'use strict';
//date format for db
//moment(new Date()).format('YYYY-MM-DD HH:mm:ss');

//Error Callbacj for Api.
var errorCallback = function (data) {
    notification(data['msg'], 'error');
};

//Notification message function
function notification(msg, type) {
    //#themes mint, sunset, relax, nest, metroui, semanticui, light, bootstrap-v3, bootstrap-v4
    var n = new Noty({
        theme: 'bootstrap-v4',
        layout: 'topRight',
        text: msg,
        type: type, //error,success,warning
        timeout: 4500,
        closeWith: ['click', 'button'],
    }).show();
}

function UniqueArraybyId(collection, keyname) {
    var output = [],
        keys = [];

    angular.forEach(collection, function (item) {
        var key = item[keyname];
        if (keys.indexOf(key) === -1) {
            keys.push(key);
            output.push(item);
        }
    });
    return output;
};
var openWindows = [];

function closeWindows() {
    window.localStorage.setItem("parentId", ' ');
    if (openWindows.length > 0) {
        angular.forEach(openWindows, function (i, e) {
            openWindows[e].close();
        });
        openWindows = [];
    }
}

function originalDateFormat(input) {
    var date = input.split(" ")[0].split('.');
    var time = input.split(" ")[1];

    var newDate = date[2] + '-' + date[1] + '-' + date[0];
    if (time) {
        newDate = date[2] + '-' + date[1] + '-' + date[0] + ' ' + time;
    }

    return newDate;
}

function originalDateFormatNew(input) {
    if (input == undefined) {
        return false;
    }
    var dtSeparator = window.localStorage.getItem('dtSeparator');

    var date = input.split(" ")[0].split(dtSeparator);
    var time = input.split(" ")[1];

    if (window.localStorage.getItem('global_dateFormat') == 'DD' + dtSeparator + 'MM' + dtSeparator + 'YYYY') {
        var newDate = date[2] + '-' + date[1] + '-' + date[0];
    } else {
        var newDate = date[0] + '-' + date[1] + '-' + date[2];
    }
    if (time) {
        newDate = newDate + ' ' + time;
    }

    return newDate;
}

function originalDateFormatDash(input) {
    if (input == undefined) {
        return false;
    }
    var dtSeparator = window.localStorage.getItem('dtSeparator');

    var date = input.split(" ")[0].split(dtSeparator);
    var time = input.split(" - ")[1];

    if (window.localStorage.getItem('global_dateFormat') == 'DD' + dtSeparator + 'MM' + dtSeparator + 'YYYY') {
        var newDate = date[2] + '-' + date[1] + '-' + date[0];
    } else {
        var newDate = date[0] + '-' + date[1] + '-' + date[2];
    }
    if (time) {
        newDate = newDate + ' ' + time;
    }

    return newDate;
}

function getAge(year, month, day) {
    var now = new Date()
    var age = now.getFullYear() - year;
    var mdif = now.getMonth() - month + 1; //0=jan   

    if (mdif < 0) {
        --age
    } else if (mdif == 0) {
        var ddif = now.getDate() - day
        if (ddif < 0) {
            --age
        }
    }
    return age
}

function randomPassword(length) {
    var chars = "abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+<>ABCDEFGHIJKLMNOP1234567890";
    var pass = "";
    for (var x = 0; x < length; x++) {
        var i = Math.floor(Math.random() * chars.length);
        pass += chars.charAt(i);
    }
    return pass;
}

function capitalize(str) {
    strVal = '';
    str = str.split(' ');
    for (var chr = 0; chr < str.length; chr++) {
        strVal += str[chr].substring(0, 1).toUpperCase() + str[chr].substring(1, str[chr].length) + ' '
    }
    return strVal
}

function makeid() {
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < 5; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}

function date_time_format(input) {
    var d = new Date(input);
    var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var date = pad(d.getDay(), 2) + "." + pad((d.getMonth() + 1), 2) + "." + d.getFullYear();
    var time = d.toLocaleTimeString().toLowerCase().replace(/([\d]+:[\d]+):[\d]+(\s\w+)/g, "$1$2");
    return (date + " " + time);
}

function TodayAfterNumberOfDays($date, $day) {
    var output;
    var days = $day;
    var date = new Date($date);
    var res = date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));

    var d = new Date(res);
    var month = d.getMonth() + 1;
    var day = d.getDate();
    var finalDate = d.getFullYear() + '-' +
        (month < 10 ? '0' : '') + month + '-' + (day < 10 ? '0' : '') + day;
    return finalDate;
    /*return output = (day < 10 ? '0' : '') + day + '.' +
        (month < 10 ? '0' : '') + month + '.' +
        d.getFullYear();*/
}

function timeFormat(input) {
    var d = new Date(input);
    var time = d.toLocaleTimeString().toUpperCase().replace(/([\d]+:[\d]+):[\d]+(\s\w+)/g, "$1$2");
    return time;
}

function randNumber() {
    var text = "";
    var possible = "0123456789";
    for (var i = 0; i < 4; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}

function stringTodate(dateString) {
    var d = new Date(dateString);
    return d;
}

function dateFormat(da) {
    var currentdateT;
    return currentdateT = pad(da.getDate(), 2) + '.' + pad((da.getMonth() + 1), 2) + '.' + da.getFullYear();
}

function dateToformat(dateString) {
    var d = new Date(dateString);
    var mm = (d.getMonth() + 1).toString();
    var dd = d.getDate().toString();
    var min = d.getMinutes().toString();
    var mmChars = mm.split('');
    var ddChars = dd.split('');
    var minChar = min.split('');
    var hour = '';
    if (d.getHours() > 12) {
        hour = d.getHours() - 12;
        return (ddChars[1] ? dd :
            "0" + ddChars[0]) + '.' + (mmChars[1] ? mm : "0" + mmChars[0]) + '.' +
            d.getFullYear() + ' ' + hour + ':' + (minChar[1] ? min : "0" + minChar[0]) +
            ' PM';
    } else {
        return (ddChars[1] ? dd : "0" + ddChars[0]) + '.' +
            (mmChars[1] ? mm : "0" + mmChars[0]) + '.' + d.getFullYear() + ' ' +
            d.getHours() + ':' + (minChar[1] ? min : "0" + minChar[0]) + ' AM';
    }
    // return d.SubtractMonth(1);
}

function dateOnresize(dateString, delta) {
    var diff = delta._data;
    var dif_hour = diff.hours;
    var dif_min = diff.minutes;
    var dif_day = diff.days;
    var d = new Date(dateString);
    var mm = (d.getMonth() + 1).toString();
    var dd = (d.getDate() + dif_day).toString();
    var min = (d.getMinutes() + dif_min).toString();
    var mmChars = mm.split('');
    var ddChars = dd.split('');
    var minChar = min.split('');
    var new_date = '';
    var hour = d.getHours() + dif_hour;
    if (hour > 12) {
        var new_hour = hour - 12;
        new_date = (ddChars[1] ? dd : "0" + ddChars[0]) + '/' + (mmChars[1] ? mm : "0" + mmChars[0]) + '/' + d.getFullYear() + ' ' + new_hour + ':' + (minChar[1] ? min : "0" + minChar[0]) + ' PM';
    } else {
        new_date = (ddChars[1] ? dd : "0" + ddChars[0]) + '/' + (mmChars[1] ? mm : "0" + mmChars[0]) + '/' + d.getFullYear() + ' ' + hour + ':' + (minChar[1] ? min : "0" + minChar[0]) + ' AM';
    }
    return dateTostring(new_date);
}

function dateTostring(date) {
    //debugger;
    var data = date.split(" ");
    var st_date = data[0].split('/');
    var time = data[1].split(':');
    var hour = '';
    if (data[2] == 'AM') {
        hour = time[0];
    } else {
        hour = 12 + parseInt(time[0]);
    }
    var return_date = new Date(st_date[2], st_date[0] - 1, st_date[1], hour, time[1]);
    return return_date;
}

function stringTommddyy(dateString) {
    var today = new Date(dateString)
    var dd = today.getDate();
    var mm = today.getMonth() + 1; // January is 0!

    var yyyy = today.getFullYear();
    if (dd < 10) {
        dd = '0' + dd
    }
    if (mm < 10) {
        mm = '0' + mm
    }
    return today = yyyy + '-' + mm + '-' + dd;
}

function getDayname(d) {
    var new_date = new Date(d);
    var weekday = new Array(7);
    weekday[0] = "sunday";
    weekday[1] = "monday";
    weekday[2] = "tuesday";
    weekday[3] = "wednesday";
    weekday[4] = "thursday";
    weekday[5] = "friday";
    weekday[6] = "saturday";
    // var n = weekday[new_date.getDay()];
    return n = new_date.getDay();
}

function getMonthName() {
    d = new Date();
    var n = d.getMonth();
    var str = "";
    var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    for (var i = 10; i >= 0; i--) {
        var now = new Date();
        var date = new Date(now.setMonth(now.getMonth() - i));
        var datex = ("0" + date.getDate()).slice(-2) + "-" + ("0" + (date.getMonth() + 1)).slice(-2) + "-" + date.getFullYear();
        str += "Date :" + datex + " | Month : " + monthNames[date.getMonth()] + "-" + date.getFullYear() + "\n";
    }
    return n;
}

function displayRendom(date, cell, data) {
    if (data != '' && data != undefined) {
        var curr = stringTodate(data.wh_type_value);
        var selector_date = stringTommddyy(date);
        var display_data = JSON.parse(data.wh_data);
        if (data.for_type == 1) {
            var firstday = new Date(curr.setDate(curr.getDate() - curr.getDay()));
            var lastday = new Date(curr.setDate(curr.getDate() - curr.getDay() + 6));
            var first_date = stringTommddyy(firstday);
            var last_date = stringTommddyy(lastday);
            if (selector_date >= first_date && selector_date <= last_date) {
                angular.forEach(display_data, function (val, i) {
                    if (val.value == 1 && i == getDayname(date)) {
                        $(cell).removeClass('normal-day');
                        $(cell).addClass('working-day');
                    }
                });

            }
        } else if (data.for_type == 2) {
            var firstDay = new Date(curr.getFullYear(), curr.getMonth(), 1);
            var lastDay = new Date(curr.getFullYear(), curr.getMonth() + 1, 0);
            var first_date = stringTommddyy(firstDay);
            var last_date = stringTommddyy(lastDay);
            if (selector_date >= first_date && selector_date <= last_date) {
                angular.forEach(display_data, function (val, i) {
                    if (val.value == 1 && i == getDayname(date)) {
                        $(cell).removeClass('normal-day');
                        $(cell).addClass('working-day');
                    }
                });
            }
        } else {
            var firstDay = new Date(curr.getFullYear(), 0, 1, 0);
            var lastDay = new Date(curr.getFullYear() + 1, 0, 0);
            var first_date = stringTommddyy(firstDay);
            var last_date = stringTommddyy(lastDay);
            if (selector_date >= first_date && selector_date <= last_date) {
                angular.forEach(display_data, function (val, i) {
                    if (val.value == 1 && i == getDayname(date)) {
                        $(cell).removeClass('normal-day');
                        $(cell).addClass('working-day');
                    }
                });
            }
        }
    }
}

function getDatetime(dateString) {
    var d = new Date(dateString);
    var mm = (d.getMonth() + 1).toString();
    var dd = d.getDate().toString();
    var min = d.getMinutes().toString();
    var ss = d.getSeconds().toString();
    var mmChars = mm.split('');
    var ddChars = dd.split('');
    var minChar = min.split('');
    var ssChar = ss.split('');
    return (ddChars[1] ? dd : "0" + ddChars[0]) + '.' + (mmChars[1] ? mm : "0" + mmChars[0]) + '.' + d.getFullYear() + ' ' + d.getHours() + ':' + (minChar[1] ? min : "0" + minChar[0]) + ':' + (ssChar[1] ? ss : "0" + ssChar[0]);
}

function pad(number, length) {
    var str = '' + number;
    while (str.length < length) {
        str = '0' + str;
    }
    return str;
}

function bytesToSize(bytes) {
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes == 0)
        return '0 Byte';
    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
}

function popupWindow(id) {
    return $window.open(id, "popup", "width=1000,height=800");
}

function array_diff(array1, array2) {
    var difference = $.grep(array1, function (el) {
        return $.inArray(el, array2) < 0
    });
    return difference.concat($.grep(array2, function (el) {
        return $.inArray(el, array1) < 0
    }));;
}


function daydiff(first, second) {
    return Math.round((second - first) / (1000 * 60 * 60 * 24));
}

//unique array
function uniq(a, param) {
    return a.filter(function (item, pos, array) {
        return array.map(function (mapItem) {
            return mapItem[param];
        }).indexOf(item[param]) === pos;
    })
}

//ScrollBody To Top
function scrollBodyToTop() {
    $('html, body').animate({ scrollTop: 0 }, 800);
}

function scrollToTop() {
    $('#top').animate({ scrollTop: 0 }, 500);
}

function scrollToId(id) {
    $('.md-content').animate({
        scrollTop: $("#" + id).offset().top
    }, 200);
}

function elmYPosition(eID) {
    var elm = document.getElementById(eID);
    var y = elm.offsetTop;
    var node = elm;
    while (node.offsetParent && node.offsetParent != document.body) {
        node = node.offsetParent;
        y += node.offsetTop;
    }
    return y;
}

function pasteHtmlAtCaret(html, selectPastedContent) {
    var sel, range;
    if (window.getSelection) {
        // IE9 and non-IE
        sel = window.getSelection();
        if (sel.getRangeAt && sel.rangeCount) {
            range = sel.getRangeAt(0);
            range.deleteContents();

            // Range.createContextualFragment() would be useful here but is
            // only relatively recently standardized and is not supported in
            // some browsers (IE9, for one)
            var el = document.createElement("div");
            el.innerHTML = html;
            var frag = document.createDocumentFragment(),
                node, lastNode;
            while ((node = el.firstChild)) {
                lastNode = frag.appendChild(node);
            }
            var firstNode = frag.firstChild;
            range.insertNode(frag);

            // Preserve the selection
            if (lastNode) {
                range = range.cloneRange();
                range.setStartAfter(lastNode);
                if (selectPastedContent) {
                    range.setStartBefore(firstNode);
                } else {
                    range.collapse(true);
                }
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }
    } else if ((sel = document.selection) && sel.type != "Control") {
        // IE < 9
        var originalRange = sel.createRange();
        originalRange.collapse(true);
        sel.createRange().pasteHTML(html);
        if (selectPastedContent) {
            range = sel.createRange();
            range.setEndPoint("StartToStart", originalRange);
            range.select();
        }
    }
}

function numberFormatComma(input) {
    if (input == undefined || input == 0 || input == '') {
        return '';
    } else {
        var decNo = 2;
        var str = input.toString();
        var numarray = str.split('.');
        var a = new Array();
        a = numarray;
        var a1 = a[0];
        var n1 = n2 = '';
        if (a[1] == undefined && a[1] !== '00') {
            a[1] = '';
        } else {
            if(a[1].length == 3)
                decNo = 3 
            if(a[1].length > 3)
                decNo = 4 
            var n2 = ',' + a[1].slice(0, decNo);
            //var n2 = ',' + a[1].slice(0, decNo);
        }
        var n1 = a1.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ".");
        return n1 + n2;
    }
}

function numberFormatCommaToPoint(input) {
    if (input == undefined || input == 0 || input == '') {
        return '';
    } else {
        var decNo = 2;
        var str = input.toString();
        var numarray = str.split(',');
        var a = new Array();
        a = numarray;
        var a1 = a[0];
        var n2 = '.00';
        var n1 = '';
        if (a[1] == undefined && a[1] !== '00') {
            a[1] = '';
        } else {
            if(a[1].length == 3)
                decNo = 3 
            if(a[1].length > 3)
                decNo = 4 
            var n2 = '.' + a[1].slice(0, 2);
            //var n2 = '.' + a[1].slice(0, a[1].length);
        }
        //var n1 = a1.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, "");
        var n1 = a1.toString().replace(/\./g, "");
        return n1 + n2;
    }
}
function CommaToPoint4Digit(input, decN=0) {
    if (input == undefined || input == 0 || input == '') {
        return '';
    } else {
        var decNo = window.localStorage.getItem('DecimalNumber') ? window.localStorage.getItem('DecimalNumber') : 2;
        var numarray = input.toString().split(',');
        var a = new Array();
        a = numarray;
        var a1 = a[0];
        var n2 = '.00';
        var n1 = '';
        if (a[1] == undefined && a[1] !== '00') {
            a[1] = '';
        } else {
            var n2 = '.' + a[1].slice(0, decNo);
        }
        var n1 = a1.toString().replace(/\./g, "");
        return n1 + n2;
    }
}
function commaToPoint(input) {
    if (input == undefined || input == 0 || input == '') {
        return '';
    } else {
        var numarray = input.toString().split(',');
        var n1 = '';
        n1 = numarray[0].toString().replace(/\./g, "");
        var n2 = numarray[1] ? '.' + numarray.pop() : '.00';
        return n1 + n2;
    }
}
// to download zip file
function fileUrlExists(url) {
    var http = new XMLHttpRequest();
    http.open('HEAD', url, false);
    http.send();
    return http.status != 404;
}
//  date format for comment
function commentDateToformat(nwdate, dtseperator = '-') {
    var d = new Date(nwdate);
    var mm = (d.getMonth() + 1);
    var dd = d.getDate();
    var yr = d.getFullYear();
    return dd + dtseperator + mm + dtseperator + yr
}
// date format for comment datetime text
function commentDatetimeToText(ndate, dtseperator = '-') {

    var todayDate = new Date();
    var mm = ("0" + (todayDate.getMonth() + 1)).slice(-2);
    var dd = ("0" + todayDate.getDate()).slice(-2);
    var yr = todayDate.getFullYear();
    var newTodayDate = dd + dtseperator + mm + dtseperator + yr;
    var newYesterday = (dd - 1) + dtseperator + mm + dtseperator + yr;
    // comment date
    var d = new Date(ndate);
    var mm1 = ("0" + (d.getMonth() + 1)).slice(-2);
    var dd1 = ("0" + d.getDate()).slice(-2);
    var yr1 = d.getFullYear();
    var cmtDate = dd1 + dtseperator + mm1 + dtseperator + yr1;
    var cmtDateText = cmtDate;
    if (newTodayDate == cmtDate) {
        var cmtDateText = "Today";
    }
    if (newYesterday == cmtDate) {
        var cmtDateText = "Yesterday";
    }
    return cmtDateText;
}
// Decimal digit count
const decimalCount = num => {
    const numStr = String(num);
    if (numStr.includes('.')) {
       return numStr.split('.')[1].length;
    };
    return 0;
 }
// Decimal number in thousand
function decimalNumberCount(val){
    var dcNumber = window.localStorage.getItem('DecimalNumber') ? window.localStorage.getItem('DecimalNumber') : 2;
    var decimalPoint = 100;
    if(val){
        var decimalCnt = val.toString().includes('.') ? val.toString().split(".")[1].length : 2;
        if(decimalCnt){
            decimalPoint =  Number(('1').padEnd(Number(dcNumber)+1, '0'));
        }
    }
    return decimalPoint ? decimalPoint : 100;
}
function ParseFloatNumber(str,val) {
    str = str.toString();
    str = str.slice(0, (str.indexOf(".")) + val + 1); 
    return Number(str);   
}
// Tax rate on amount
function taxRateAmountCalc(price, tax_rate) {
    if(! tax_rate)
        var tax_rate = 0
    if(isNaN(price) || isNaN(tax_rate))
        return 0;
    else    
        return (( parseFloat(price) * parseFloat(tax_rate) )/100).toFixed(2);
}
// Compare two array and get common element
function findCommonArrEle(arr1, arr2) {
    return arr1.some(item => arr2.includes(item))
}

function exportTableToExcel(id, fileName){
    var wb = XLSX.utils.table_to_book(document.getElementById(id), {sheet:"Sheet JS"});
    var wbout = XLSX.write(wb, {bookType:'xlsx', bookSST:true, type: 'binary'});
    function s2ab(s) {
                    var buf = new ArrayBuffer(s.length);
                    var view = new Uint8Array(buf);
                    for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
                    return buf;
    }
    saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), fileName+'.xlsx');
}

app.controller('loginController', function ($scope, $log, rest, $window, $location, $cookieStore, $timeout, $route, $routeParams, $rootScope) {
    /*-------Check for login--------*/
    if ($cookieStore.get('session_iUserId') != undefined) {
        $location.path('/dashboard');
    }

    /*-------Check for login--------*/
    $scope.login = function (user, formId) {
        if (user.password == undefined) {
            notification('Please enter password.', 'warning');
            return false;
        }
        if ($("#" + formId).valid()) {
            $('#loginSpin').show();
            $timeout(function () {
                rest.path = 'authenticate';
                rest.post(user).success(function (data) {
                    $('#loginSpin').hide();
                    $scope.userProfilepic = data.session_data.vProfilePic ? data.session_data.vProfilePic : 'user-icon.png';
                    $window.localStorage.setItem("_auth", data.session_data.vPassword);
                    $cookieStore.put('auth', data.session_data.vPassword);
                    $cookieStore.put('session_iUserId', data.session_data.iUserId);
                    $cookieStore.put('session_vEmailAddress', data.session_data.vEmailAddress);
                    //$cookieStore.put('session_password', data.session_data.org_pass);
                    $cookieStore.put('session_iFkUserTypeId', data.session_data.iFkUserTypeId);
                    $cookieStore.put('session_holidayCountry', data.session_data.vholiday_country);
                    $window.localStorage.setItem("session_vResourceType", data.vResourceType);
                    $window.localStorage.setItem("session_iUserId", data.session_data.iUserId);
                    $window.localStorage.setItem("session_eUserStatus", data.session_data.eUserStatus);
                    $window.localStorage.setItem("session_vEmailAddress", data.session_data.vEmailAddress);
                    $window.localStorage.setItem("session_vUserName", data.session_data.vUserName);
                    $window.localStorage.setItem("session_iFkUserTypeId", data.session_data.iFkUserTypeId);
                    $window.localStorage.setItem("session_vUserFullName", data.session_data.vFirstName + " " + data.session_data.vLastName);
                    $window.localStorage.setItem("session_vProfilePic", $scope.userProfilepic);
                    $window.localStorage.welUser = data.session_data.vUserName.toString();
                    
                    $window.localStorage.setItem("session_menuAccess", data.session_data.menu_access);
                    $window.localStorage.setItem("session_superAdmin", data.session_data.super_admin);

                    $rootScope.myData = data;
                    
                    //getting global dateformat
                    rest.path = 'getdateFormatByIuserId/1';
                    rest.get().success(function (data) {
                        if (data) {
                            if (data.dateSeparator == '/') {
                                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
                            } else if (data.dateSeparator == '.') {
                                data.dateformat = data.dateformat.replace(/\//g, data.dateSeparator);
                                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
                            } else {
                                data.dateformat = data.dateformat.replace(/\//g, data.dateSeparator);
                                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
                            }
                        } else {
                            $window.localStorage.setItem("global_dateFormat", 'DD/MM/YYYY');
                            $window.localStorage.setItem("dtSeparator", '/');
                        }
                    }).error(errorCallback);

                    //getting decimalSeperator
                    rest.path = 'getDecimalSeperatorByIuserId/1';
                    rest.get().success(function (data) {
                        if (data) {
                            $window.localStorage.setItem("DecimalSeparator", data.separatorChar);
                            $window.localStorage.setItem("DecimalNumber", data.decimal_number);
                        } else {
                            $window.localStorage.setItem("DecimalSeparator", ',');
                            $window.localStorage.setItem("DecimalNumber", 2);
                        }
                    }).error(errorCallback);

                    $location.path('/dashboard1');
                }).error(errorCallback, $('#loginSpin').hide());
            }, 1500);
        }
    };

    $scope.resetPass = function (reset, formId) {
        $scope.showLoadingIcon = false;
        if ($("#" + formId).valid()) {
            $scope.showLoadingIcon = true;
            rest.path = 'resetpassword';
            rest.post(reset).success(function (data) {
                $('#successModal').modal('show');
                if (data.status == 200) {
                    //$scope.showLoadingIcon = false;
                    $timeout(function () {
                        $location.path('/');
                    }, 3000);
                } else {
                    $scope.showLoadingIcon = false;
                }
            }).error(function (data) {
                if (data.status == 422) {
                    notification(data.msg, 'warning');
                    $scope.showLoadingIcon = false;
                } else {
                    errorCallback(data);
                }
            });
        }
    };

    $window.close(); // to close windowpopup after logout

}).controller('signupController', function ($scope, $log, rest, $window, $location, $cookieStore, $timeout, $route, $routeParams, $rootScope, fileReader) {
    /*-------Check for login--------*/
    // if ($cookieStore.get('session_iUserId') != undefined) {
    //     $location.path('/dashboard');
    // }

    $window.localStorage.setItem("global_dateFormat", 'DD.MM.YYYY'); // Default
    $window.localStorage.setItem("dtSeparator", '.'); // Default

    $scope.userprofiledata = {};
    $scope.userprofiledata.freelancer = 'freelancer';
    
    $scope.isValidMobileNumber = false;
            
    /* Mobile Validation START */
    var telInput = $("#iMobile"),
        errorMsg = $("#error-msg"),
        validMsg = $("#valid-msg");

    var reset = function () {
        telInput.removeClass("error");
        errorMsg.addClass("hide");
        validMsg.addClass("hide");
    };

    telInput.blur(function () {
        reset();
        $timeout(function () {
            if ($.trim(telInput.val())) {
                if (telInput.intlTelInput("isValidNumber")) {
                    $scope.isValidMobileNumber = true;
                    validMsg.removeClass("hide");
                    $('#error-msg').addClass('hide');
                } else {
                    $scope.isValidMobileNumber = false;
                    $('#error-msg').removeClass('hide');
                }
            }
        }, 200);
    });
    telInput.on("keyup change", reset);
    /* Mobile Validation END */

    $scope.checkusername = function () {
        rest.path = 'checkusername';
        rest.post($scope.userprofiledata.vUserName).success(function (data) { }).error(errorCallback);
    };

    // $scope.checkemailaddress = function () {
    //     rest.path = 'checkemailaddress';
    //     rest.post($scope.userprofiledata.vEmailAddress).success(function (data) { }).error(errorCallback);
    // };

    $scope.setUsername = function (value) {
        if ($scope.userprofiledata.vLastName) {
            if (value != undefined) {
                $scope.userprofiledata.vUserName = value + ' ' + $scope.userprofiledata.vLastName;
            } else {
                $scope.userprofiledata.vUserName = $scope.userprofiledata.vLastName;
            }
        } else {
            $scope.userprofiledata.vUserName = value;
        }
    };

    $scope.setUsername2 = function (value) {
        if ($scope.userprofiledata.vFirstName) {
            if (value != undefined) {
                $scope.userprofiledata.vUserName = $scope.userprofiledata.vFirstName + ' ' + value;
            } else {
                $scope.userprofiledata.vUserName = $scope.userprofiledata.vFirstName;
            }
        } else {
            $scope.userprofiledata.vUserName = value;
        }
    };
    $scope.ConfirmPass = function (pwd1, pwd2) {
        if (!pwd1) {
            angular.element('#vPass').focus();
            angular.element('#cPass').val('');
        }
        if (pwd1 != undefined && pwd2 != undefined) {
            if (pwd2 != pwd1) {
                angular.element('#passNotMatch').show();
                angular.element('#passMatch').hide();
            } else {
                angular.element('#passMatch').show();
                angular.element('#passNotMatch').hide();
                $timeout(function () {
                    angular.element('#passMatch').fadeOut(3000);
                }, 500);
            }
        }
    }

    $scope.cityTimezone = function (id) {
        if(id){
            var city = id.split(',')[0];
            rest.path = "cityTimeZoneget/" + city;
            rest.get().success(function (data) {
                if (data != false) {
                    if ($scope.userprofiledata == undefined || $scope.userprofiledata == null || $scope.userprofiledata == "") {
                        $scope.userprofiledata = {};
                    }
                    $scope.userprofiledata.vTimeZone = data.timeZone;
                }
            });
        }    
    }

    //Change Input Type
    $scope.changeInputType = function () {
        var type = angular.element('#vPassword').attr('type');
        if (type == 'password') {
            angular.element('#vPassword').attr('type', 'text');
        } else {
            angular.element('#vPassword').attr('type', 'password');
        }
    }

    //getting global dateformat
    rest.path = 'getdateFormatByIuserId/1';
    rest.get().success(function (data) {
        if (data) {
            if (data.dateSeparator == '/') {
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            } else if (data.dateSeparator == '.') {
                data.dateformat = data.dateformat.replace(/\//g, data.dateSeparator);
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            } else {
                data.dateformat = data.dateformat.replace(/\//g, data.dateSeparator);
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            }
        } else {
            $window.localStorage.setItem("global_dateFormat", 'DD/MM/YYYY');
            $window.localStorage.setItem("dtSeparator", '/');
        }
    }).error(errorCallback);

    //RandomPassword Generate
    $scope.getRandomPassword = function () {
        if ($scope.userprofiledata == undefined || $scope.userprofiledata == null || $scope.userprofiledata == "") {
            $scope.userprofiledata = {};
        }
        $scope.userprofiledata.vPassword = randomPassword(10)
    }

    $scope.saveUserSignUp = function (formId, ContactPersonId) {
        //('formId', formId)
                
        if (angular.element("#" + formId).valid() ) {
            $scope.userprofiledata.iEditedBy = 0;
            $scope.userprofiledata.eUserStatus = 2; // New User signup
            $scope.userprofiledata.is_available = '';
            
            if ($scope.userprofiledata){
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });
                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });
                $scope.userprofiledata.address1Detail = JSON.stringify(address1);
                $scope.userprofiledata.address2Detail = JSON.stringify(address2);

                $scope.userprofiledata.vTimeZoneCity = angular.element('#address1_locality').val();
                // ---------address over -----------------//
                $scope.userprofiledata.image = $scope.imageSrc;
                //$scope.userprofiledata.created_by = $window.localStorage.session_iUserId;
                var countryCodeData = angular.element('#iMobile').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#iMobile').parent().find('.selected-flag').find('.iti-flag').attr('class');


                var mobile = angular.element('#iMobile').val();
                var phone = angular.element('#iphone').val();

                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }

                var mobile = angular.element('#iMobile').val();
                var phone = angular.element('#iphone').val();
                $scope.userprofiledata.iMobile = JSON.stringify(countryObj);
                $scope.userprofiledata.vPhoneNumber = phone;
                $scope.userprofiledata.org_pass = $scope.userprofiledata.vPassword;

                $scope.userprofiledata.dtBirthDate = $('#dtBirthDate').val();
                if($scope.userprofiledata.dtBirthDate != '' || $scope.userprofiledata.dtBirthDate != 'Invalid date'){
                    $scope.userprofiledata.dtBirthDate = originalDateFormatNew($scope.userprofiledata.dtBirthDate);
                    $scope.userprofiledata.dtBirthDate = moment($scope.userprofiledata.dtBirthDate).format('YYYY-MM-DD');
                }else{
                    $scope.userprofiledata.dtBirthDate = '0000-00-00';
                }

                rest.path = 'saveuserProfileSignUp';
                rest.post($scope.userprofiledata).success(function (data) {
                    //$window.localStorage.iUserId = data.iUserId;
                    if(data){
                        if(data.status == 200){
                            notification('Activation link has been sent to your email!', 'success');
                            setTimeout(() => {
                                $route.reload();
                            }, 500);
                        }else{
                            notification('Something went wrong!', 'success');
                        }
                    }
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = data.iUserId;
                    $scope.logMaster.log_title = $scope.userprofiledata.vUserName;
                    $scope.logMaster.log_type = "add";
                    $scope.logMaster.log_status = "external_res";
                    $scope.logMaster.created_by = 0;

                }).error(function (data) {
                    var flagTitle = JSON.parse($scope.userprofiledata.iMobile).countryTitle;
                    var flagClass = JSON.parse($scope.userprofiledata.iMobile).countryFlagClass;
                    var Ccode = flagClass.split(' ')[1];
                    var CcodeNum = flagTitle.split(':')[1].trim();

                    var FinalMobileNum = CcodeNum + JSON.parse($scope.userprofiledata.iMobile).mobileNumber;

                    $timeout(function () {
                        $('#iMobile').intlTelInput("setNumber", FinalMobileNum);
                    }, 100);
                    notification(data['msg'], 'error');
                });
            }
        }
    };

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                $scope.filesize = bytesToSize(file.size);
                $scope.filename = file.name;
                $scope.filetype = file.type;
                var t = $scope.filename.split('.');
                var type = t.pop();
                $scope.typefile = type;
                $scope.imgshow = false;
                $scope.imageSrc = result;
            });
    };

    $scope.backtoPage = function () {
        $location.path('/');
    }
}).controller('jobacceptrejectController', function ($scope, $log, rest, $window, $location, $cookieStore, $timeout, $route, $routeParams, $rootScope, fileReader) {
    /*-------Check for login--------*/
    // if ($cookieStore.get('session_iUserId') != undefined) {
    //     $location.path('/dashboard');
    // }

    $window.localStorage.setItem("global_dateFormat", 'DD.MM.YYYY'); // Default
    $window.localStorage.setItem("dtSeparator", '.'); // Default

    let fullUrl = $location.absUrl();
    $scope.baseURL = fullUrl.split('#')[0];
    let queryString = fullUrl.split('/').pop();
    var encodedUrl = atob(queryString);
    let paramsName = encodedUrl.split('&')
    $scope.jobId = 0;
    $scope.UserId = 0;
    $scope.accept = 0;
    $scope.reject = 0;
    
    $scope.jobDetails = {};
    $scope.jobDetails.resourceId = 0;
    if(paramsName.length > 0){
        let paramsJob = paramsName[0].split('=') 
        if(paramsJob[0] =='jobId'){
            $scope.jobId = paramsJob[1];
            $scope.jobDetails.jobId = $scope.jobId; 
        }
        if(paramsName.length > 1){
            let paramsUser = paramsName[1].split('=') 
            if(paramsUser[0] =='userId'){
                $scope.userId = paramsUser[1];
                $scope.jobDetails.resourceId = $scope.userId;
            }
        }
        if(paramsName.length > 2){
            let paramsAccept = paramsName[2].split('=') 
            if(paramsAccept[0] =='accept'){
                $scope.accept = paramsAccept[1];
                $scope.jobDetails.jobAccept = 1;
            }
            if(paramsAccept[0] == 'reject'){
                $scope.reject = paramsAccept[1];
                $scope.jobDetails.jobAccept = 0;
                //notification('You have rejected the Job.', 'warning');
            }
        }

        //if($scope.jobDetails.jobId && $scope.jobDetails.jobAccept){
        if($scope.jobDetails.jobId){
            rest.path = 'getOneJobsummury/'+ $scope.jobDetails.jobId;
            rest.get().success(function (data) {
                if (data) {
                    if(data.accept > '0' ){
                        
                        if($scope.jobDetails.jobAccept == 1 && data.accept == $scope.jobDetails.resourceId){
                            $('#responseMsg').text('Already, You have accepted the job');
                            $("#responseMsg").addClass("alert alert-success" );
                        }else{
                            let msgText = $scope.jobDetails.jobAccept ? 'The job is accepted by someone else!' : 'Job is already accepted!' ;
                            $('#responseMsg').text(msgText);
                            $("#responseMsg").addClass("alert alert-warning" );
                            notification(msgText);
                        }
                    }else{
                        rest.path = 'jobAccept';
                        rest.post($scope.jobDetails).success(function (data) {
                            if(data && data.jobAccept == 1){
                                notification('You have accepted the job', 'success');
                                $('#responseMsg').text('You have accepted the job');
                                $("#responseMsg").addClass( "alert alert-success" );
                            }else{
                                if($scope.jobDetails.jobAccept == '0' ){
                                    notification('You have rejected the job', 'warning');
                                    $('#responseMsg').text('You have rejected the job');
                                    $("#responseMsg").addClass( "alert alert-warning" );
                                }
                            }
                        }).error(errorCallback);
                    }
                }
            });
        }    
    }
        
    
    //getting global dateformat
    rest.path = 'getdateFormatByIuserId/1';
    rest.get().success(function (data) {
        if (data) {
            if (data.dateSeparator == '/') {
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            } else if (data.dateSeparator == '.') {
                data.dateformat = data.dateformat.replace(/\//g, data.dateSeparator);
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            } else {
                data.dateformat = data.dateformat.replace(/\//g, data.dateSeparator);
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            }
        } else {
            $window.localStorage.setItem("global_dateFormat", 'DD/MM/YYYY');
            $window.localStorage.setItem("dtSeparator", '/');
        }
    }).error(errorCallback);

    $scope.backtoPage = function () {
        //$location.path('/dashboard1');
        //$location.path($scope.baseURL+'/#');
    }
    
}).controller('headerController', function ($uibModal, $timeout, $scope, $window, $location, $log, $interval, rest, $rootScope, $cookieStore, $route, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.superAdmin = $window.localStorage.getItem("session_superAdmin");
    if ($cookieStore.get('session_iUserId') != undefined) {
        $scope.session_iUserId = $window.localStorage.session_iUserId;
        $scope.session_eUserStatus = $window.localStorage.session_eUserStatus;
        $scope.session_vEmailAddress = $window.localStorage.session_vEmailAddress;
        $scope.session_vUserName = $window.localStorage.session_vUserName;
        $scope.session_vUserFullName = $window.localStorage.session_vUserFullName;
        $scope.session_vProfilePic = $window.localStorage.session_vProfilePic;
        $scope.session_vResourceType = $window.localStorage.getItem("session_vResourceType");
        $scope.uId = $window.localStorage.getItem("session_iUserId");
        $scope.menuAccess = $window.localStorage.getItem("session_menuAccess");
        $scope.menuAccess = $scope.menuAccess ? JSON.parse($scope.menuAccess) : [];
        
        $scope.logout = function () {
            angular.forEach(["session_iUserId", "auth", "session_iFkUserTypeId", "session_vEmailAddress", "session_password", "internalUserEdit", "internalUserAdd", "jobRecentEdit", "jobRecentAdd", "session_holidayCountry", "generalEdit", "editInternalUser"], function (key) {
                $cookieStore.remove(key);
            });

            angular.forEach(openWindows, function (i, e) {
                openWindows[e].close();
            });
            openWindows = [];
            $window.localStorage.clear();
            $window.localStorage.clear();
            $location.path('/');
        }

    } else {
        angular.forEach(["session_iUserId", "auth", "session_iFkUserTypeId", "session_vEmailAddress", "session_password", "internalUserEdit", "internalUserAdd", "jobRecentEdit", "jobRecentAdd"], function (key) {
            $cookieStore.remove(key);
        });
        $window.localStorage.clear();
        $window.localStorage.clear();
        $location.path('/');
    }

    $scope.logout = function () {
        angular.forEach(["session_iUserId", "auth", "session_iFkUserTypeId", "session_vEmailAddress", "session_password", "internalUserEdit", "internalUserAdd", "jobRecentEdit", "jobRecentAdd", "session_holidayCountry", "generalEdit", "editInternalUser"], function (key) {
            $cookieStore.remove(key);
        });

        angular.forEach(openWindows, function (i, e) {
            openWindows[e].close();
        });
        openWindows = [];
        $window.localStorage.clear();
        $window.localStorage.clear();
        $location.path('/');
    }

    $scope.clearSearchBox = function () {
        angular.element('#selectedOrder').val('');
        angular.element('#clearBtn').addClass('clearBtnHide');
    }


    //$scope.disableSearch = true;
    $scope.disableSearch = false;
    $scope.projectScoop = [];
    var orders = [];
    $scope.isApiCalled = true;    
    $scope.searchScoopFilter = function(){
        if($scope.isApiCalled){
            //rest.path = "dashboardProjectsOrderGet/" + $window.localStorage.getItem("session_iUserId");
            rest.path = "searchProjectHeader/" + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                $scope.projectScoop = data.scoopData;
                $rootScope.SearchJobList = data.jobData;
                angular.forEach($scope.projectScoop, function (scoopData) {
                    orders.push(scoopData.orderNumber +'-'+ String(scoopData.item_number).padStart(3, '0') );
                });

                $scope.projectData = UniqueArraybyId($scope.projectScoop, 'orderNumber'); 
                    
                $timeout(function () {
                    angular.forEach($scope.projectData, function (ordersData) {
                        orders.push(ordersData.orderNumber);
                    });
                    angular.forEach($rootScope.SearchJobList, function (jdata) {
                        orders.push(jdata.po_number);
                    });
                    $scope.orderNames = orders;
                    //console.log('$scope.orderNames', $scope.orderNames)
                    $scope.disableSearch = false;
                    
                }, 100);

            }).error(function () {
                $scope.isApiCalled = true;     
            });   
            $scope.isApiCalled = false;     
            //rest.path = 'getJobsFromTmsSummeryView';
            //rest.get().success(function (data) {
                //$rootScope.SearchJobList = data;

                //rest.path = "dashboardOrderGet";
                //rest.get().success(function (data) {
                    // remove same project orderNumber
                    // $scope.projectData = UniqueArraybyId($scope.projectScoop, 'orderNumber'); 
                    
                    // $timeout(function () {
                        
                    //     angular.forEach($scope.projectData, function (ordersData) {
                    //         orders.push(ordersData.orderNumber);
                    //     });
                    //     angular.forEach($rootScope.SearchJobList, function (jdata) {
                    //         orders.push(jdata.po_number);
                    //     });
                    //     $scope.orderNames = orders;
                    //     //console.log('$scope.orderNames', $scope.orderNames)
                    //     $scope.disableSearch = false;
                    // }, 100);

                //});
                //$scope.isApiCalled = false;
            //}).error(errorCallback);
            
        }

    }


    $scope.searchProject = function (selectedValue) {
        $scope.selectedOrder = selectedValue;
        var txtValue = angular.element('#selectedOrder').val()

        //If submited with enter Or click then replacing $scope.selectedOrder with txtValue
        if ($scope.selectedOrder == undefined || $scope.selectedOrder.length == 0) {
            $scope.selectedOrder = txtValue;
        }

        if ($scope.selectedOrder == undefined || $scope.selectedOrder.length == 0) {
            notification('Please enter project number Or Job Number.', 'warning');
            return false;
        } else {
            $scope.isJobSearch = false;
            if( ($scope.selectedOrder).split('_').length > 1 ){
                if(($scope.selectedOrder).split(/_(.*)/s)[1].toString().length > 4 && ($scope.selectedOrder).split('-').pop().length != 3)
                    $scope.isJobSearch = true;
            }
            if ($scope.isJobSearch) {
                //if ($scope.selectedOrder.includes('_')) {    
                var isMatch = true;
                angular.forEach($rootScope.SearchJobList, function (jobsData) {
                    if (isMatch) {
                        if (jobsData.po_number === $scope.selectedOrder) {
                            $scope.goTojobId = jobsData.job_summmeryId;
                            $scope.order_id = jobsData.order_id;
                            isMatch = false;
                        }
                    }
                });
                if ($scope.goTojobId == undefined) {
                    notification('Nothing found..', 'warning');
                } else {
                    if ($scope.goTojobId) {

                    }
                    rest.path = 'jobDetailchange/' + $scope.goTojobId;
                    rest.get().success(function (data) {
                        if (data) {
                            //$location.path('/job-summery-details/' + jobId);
                            $window.localStorage.projectJobChainOrderId = $scope.order_id;
                            $window.localStorage.orderID = $scope.order_id;
                            $routeParams.id = $scope.goTojobId;
                            var modalInstance = $uibModal.open({
                                animation: $scope.animationsEnabled,
                                templateUrl: 'tpl/jobEditPopup.html',
                                controller: 'jobSummeryDetailsController',
                                size: '',
                                resolve: {
                                    items: function () {
                                        return $scope.data;
                                    }
                                }
                            });
                        } else {
                            notification('This Record is deleted.', 'error');
                        }
                    }).error(errorCallback);
                }
            } else if(($scope.selectedOrder).split('-').pop().length == 3 && ($scope.selectedOrder).split(/-(.*)/s)[0].toString().length > 4 ) {
                var isMatchScoop = true;
                if( ($scope.selectedOrder).split('-').pop().length == 3){
                    if( ($scope.selectedOrder).split(/-(.*)/s)[0].toString().length > 4){
                        
                        angular.forEach($scope.projectScoop, function (scoopData) {
                            if (isMatchScoop) {
                                if (scoopData.orderNumber === ($scope.selectedOrder).split(/-(.*)/s)[0].toString() ) {
                                    $scope.goToScoop = scoopData.orderId;
                                    $scope.scoopId = scoopData.itemId;
                                    isMatchScoop = false;
                                }
                            }
                        });
                        if ($scope.goToScoop == undefined) {
                            notification('Nothing found..', 'warning');
                        } else {
                            if ($scope.goToScoop) {
                                var viewType = $scope.scoopId; 
                                $window.localStorage.orderID = $scope.goToScoop;
                                var modalInstance = $uibModal.open({
                                    templateUrl: 'tpl/scoopViewdetailPopup.html',
                                    controller: 'viewScoopPopupController',
                                    size: '',
                                    resolve: {
                                        items: function () {
                                            return {scoop_id: viewType, order_id:$scope.goToScoop };
                                        }
                                    }
                                });
                            }
                        }
                    }
                }
            }else{    

                var isMatch = true;
                angular.forEach($scope.projectData, function (ordersData) {
                    if (isMatch) {
                        if (ordersData.orderNumber === $scope.selectedOrder) {
                            $scope.goToOrderId = ordersData.orderId;
                            isMatch = false;
                        }
                    }
                });
                if ($scope.goToOrderId == undefined) {
                    notification('Nothing found..', 'warning');
                } else {
                    if ($scope.goToOrderId) {
                        rest.path = 'order/' + $scope.goToOrderId + '/' + $window.localStorage.getItem("session_iUserId");
                        rest.get().success(function (data) {
                            // debugger;
                            $scope.orderdata = data;
                            $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                            $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                            $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                            $window.localStorage.orderNo = $scope.orderdata.order_number;
                            $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                            $window.localStorage.orderID = $scope.goToOrderId;
                            $window.localStorage.iUserId = $scope.goToOrderId;
                            $window.localStorage.userType = 3;
                            $window.localStorage.currentUserName = data.vClientName;
                            $window.localStorage.genfC = 1;

                            if ($location.path() == '/general'+$scope.goToOrderId) {
                                $route.reload();
                            } else {
                                $location.path('/general/'+$scope.goToOrderId);
                            }
                            //set isNewProject to false
                            $window.localStorage.setItem("isNewProject", "false");
                        }).error(errorCallback);
                        $window.localStorage.orderBlock = 1;
                    }
                }
            }
            return;
        }
    }

    $scope.menuHoverIn = function (iconId) {
        angular.element('#' + iconId).removeClass('fvIconHide').addClass('fvIconShow');
    }

    $scope.menuHoverOut = function (iconId) {
        angular.element('#' + iconId).removeClass('fvIconShow').addClass('fvIconHide');
    }


    rest.path = 'getFvMenu/' + $window.localStorage.getItem("session_iUserId");
    rest.get().success(function (data) {
        if (data.data) {
            $scope.menuJsonObj = data.data;
            $scope.menus = JSON.parse(data.data.menu_json);
        } else {
            $scope.menuJsonObj = {};
            $scope.menus = [];
        }

    }).error(errorCallback);

    //$scope.menuJsonObj = {} ;

    $scope.addToFavouriteMenu = (event) => {

        var iconElement = $(event.target).prev();
        var fvMenuUrl = iconElement.attr('href');
        var fvMenuName = iconElement.find('span').text();

        if ($scope.menus) {
            var found = false;
            angular.forEach($scope.menus, function (val, i) {
                if (!found) {
                    if (val.fvMenuName == fvMenuName && val.fvMenuUrl == fvMenuUrl) {
                        notification('Menu already added in favourite.', 'warning');
                        found = true;
                    }
                }
            })
            if (!found) {
                $scope.menus.push({ 'fvMenuUrl': fvMenuUrl, 'fvMenuName': fvMenuName });
            }
        } else {
            $scope.menus.push({ 'fvMenuUrl': fvMenuUrl, 'fvMenuName': fvMenuName });
        }

        if (!found) {
            $scope.menuJsonObj.iUserId = $window.localStorage.getItem("session_iUserId");
            $scope.menuJsonObj.menu_json = JSON.stringify($scope.menus);

            rest.path = 'saveFvMenu';
            rest.post($scope.menuJsonObj).success(function (data) {
                if (data.status == 200) {
                    notification(data.msg, 'success');
                    $scope.menus = JSON.parse(data.data.menu_json);
                }
            }).error(errorCallback);
        }
    }


    $scope.removeFromFavouriteMenu = (event) => {
        var iconElement = $(event.target).prev();
        var fvMenuUrl = iconElement.attr('href');

        var removeIndex;
        angular.forEach($scope.menus, function (val, i) {
            if (val.fvMenuUrl === fvMenuUrl) {
                removeIndex = i;
            }
        })

        $scope.menus.splice(removeIndex, 1);

        $scope.menuJsonObj.iUserId = $window.localStorage.getItem("session_iUserId");
        $scope.menuJsonObj.menu_json = JSON.stringify($scope.menus);

        rest.path = 'saveFvMenu';
        rest.post($scope.menuJsonObj).success(function (data) { }).error(errorCallback);

    }

    /*Recent Activity Code start*/
    $scope.activityLimit = 17;

    $scope.loadMoreActivity = function () {
        var increamented = $scope.activityLimit + 10;
        $scope.activityLimit = increamented > $scope.activityList.length ? $scope.activityList.length : increamented;

    }

    //recent activity
    $scope.openNavCalled = true; // api call one time    
    $scope.activityList = [];
    $scope.openNav = function(){
        if ($cookieStore.get('session_iUserId') && $scope.openNavCalled) {
            $scope.dateDate = [];
            rest.path = "recentActivityGet/" + $cookieStore.get('session_iUserId');
            rest.get().success(function (data) {
                $scope.activityList = data;
                var color = ['success', 'warning', 'info', 'primary'];
                var date = new Date();
                var count = 0;

                angular.forEach(data, function (val, i) {
                    //set activity side line color
                    if (count == color.length) {
                        count = 0;
                    }

                    $scope.activityList[i].color = color[count];
                    count++;

                    //set recent activity date
                    var a = date;
                    var b = new Date(val.modified_date);
                    var days = daydiff(b, a); // 1 day

                    switch (days) {
                        case 0:
                            var recentDate = "Today " + timeFormat(val.modified_date);
                            break;
                        case 1:
                            var recentDate = "Yesterday " + timeFormat(val.modified_date);
                            break;
                        default:
                            var recentDate = days + " days ago.";
                    }

                    $timeout(function () {
                        $scope.dateDate[i] = recentDate;
                    }, 100);
                });

                $scope.openNavCalled = false;
            });
        
        }
    }    
    /*Recent Activity Code End*/

    // activity project
    $scope.edit = function (id) {
        
        if (id) {
            rest.path = 'order/' + id + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                if (data.userName != null) {
                    $scope.orderdata = data;

                    $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                    $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                    $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                    $window.localStorage.orderNo = $scope.orderdata.order_number;
                    $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                    $window.localStorage.orderID = id;
                    $window.localStorage.iUserId = id;
                    $window.localStorage.userType = 3;
                    $window.localStorage.currentUserName = data.vClientName;
                    $window.localStorage.genfC = 1;

                    //set isNewProject to false
                    $window.localStorage.setItem("isNewProject", "false");

                    $location.path('/general/'+data.order_id);
                    $window.localStorage.orderBlock = 1;
                    $timeout(function () {
                        $scope.cancel();
                    }, 500);
                } else {
                    notification('Information not available', 'warning');
                }
            }).error(errorCallback);
        }
    };

}).controller('dashboardController', function ($scope, $window, $location, $compile, $log, $interval, rest, $rootScope, $cookieStore, $timeout, $filter, fileReader, $uibModal, $route, $routeParams, DTOptionsBuilder, $q, filterFilter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.userLoginID = $window.localStorage.getItem("session_iUserId");
    $window.localStorage.jobfolderId = " ";
    $window.localStorage.scoopfolderId = " ";
    $window.localStorage.pId = " ";
    $window.localStorage.filemanagerUser = " ";
    $scope.welUser = $window.localStorage.getItem("session_vUserName");
    $window.localStorage.jobOrderId = " ";
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.jobstatusName = " ";
    $window.localStorage.countSt = " ";
    $window.localStorage.setItem("projectBranch", " ");
    $scope.showDataLoader = true;
    $scope.showDataLoaderJob = false;
    $scope.proejctsToDisplay = [];
    $window.localStorage.scoopReport = '';
    $scope.dateToday = dateFormat(new Date()).split(".").reverse().join("-");

    //Getting Jobs from getJobsFromTmsSummeryView
    // $scope.getJobList = function () {
    //     rest.path = 'getJobsFromTmsSummeryView';
    //     rest.get().success(function (data) {
    //         $scope.dashboardJobList = data;
            
    //         var Requested = [];
    //         var NewJob = [];
    //         var inProgerss = [];
    //         var readyToBeDelivered = [];
    //         var delivered = [];
    //         var completed = [];
    //         var pendingPo = [];
    //         // ---- new added status ----- //

    //         // -- Job count -- //
    //         var jobRequestesCount = 0;
    //         var jobInProgressCount = 0;
    //         var jobDueTodayCount = 0;
    //         var jobDueTomorrowCount = 0;
    //         var jobOverDueCount = 0;

    //         $timeout(function () {
    //             $scope.inProgerss = inProgerss;
    //             $scope.jobNew = NewJob;
    //             $scope.readyToBeDelivered = readyToBeDelivered;
    //             $scope.delivered = delivered;
    //             $scope.completed = completed;
    //             $scope.pendingPo = pendingPo;

    //             $scope.jobRequestesCount = jobRequestesCount;
    //             $scope.jobInProgressCount = jobInProgressCount;
    //             $scope.jobDueTodayCount = jobDueTodayCount;
    //             $scope.jobDueTomorrowCount = jobDueTomorrowCount;
    //             $scope.jobOverDueCount = jobOverDueCount;

    //         }, 200);
    //     }).error(errorCallback);
    // };
    //$scope.getJobList();

    $scope.jobDiscussion = (orderId) => {
        $location.path('discussion/' + orderId);
    }


    var objCenter = [];
    rest.path = 'centerClientGet';
    rest.get().success(function (data) {
        angular.forEach(data, function (val, i) {
            var orLen = JSON.parse(val.order_number)[0].value.length;
            let curntYear = JSON.parse(val.order_number)[0].value.substr((orLen-5), 2);
            objCenter.push({
                'id': val.abbrivation + curntYear,
                'text': val.name
            });
        });
        $timeout(function () {
            angular.element('#projectBranch').select2({
                allowClear: true,
                data: objCenter,
                placeholder:'Business Unit',
                multiple: false,
            });
        }, 500);
    });

    $scope.DtTblOption = {
        "dom": '<"pull-right"l><<t>p><"clear">'
    }

    /*Common Searching For All Datatables*/
    angular.element(document).ready(function () {
        $timeout(function () {
            $.fn.dataTableExt.oApi.fnFilterAll = function (oSettings, sInput, iColumn, bRegex, bSmart) {
                var settings = $.fn.dataTableSettings;
                for (var i = 0; i < settings.length; i++) {
                    settings[i].oInstance.fnFilter(sInput, iColumn, bRegex, bSmart);
                }
            };
            $("#jobNewTbl_wrapper .row:first").prepend('<div class="col-sm-5"><h4>New Jobs</h4></div>');
            $('#jobNewTbl_wrapper .dataTables_length').parent().removeClass('col-sm-6').addClass('col-sm-3');
            $('#jobNewTbl_filter').parent().removeClass('col-sm-6').addClass('col-sm-3');
            $("#jobNewTbl_filter").find('label').find('input').attr('id', 'Search_All');
            $('#jobNewTbl_info').parent().remove();
            $('#jobNewTbl_paginate').parent().addClass('pull-right');

            $('#inProgerssTbl_wrapper').children().first().parent().prepend('<h4 style="float: left;">Job in Progerss</h4>');
            //$("#inProgerssTbl_wrapper .row:first").prepend('<div class="col-sm-5"><h4>Job in Progerss</h4></div>');
            //$('#inProgerssTbl_wrapper .dataTables_length').parent().removeClass('col-sm-6').addClass('col-sm-3');
            //$('#inProgerssTbl_filter').parent().removeClass('col-sm-6').addClass('col-sm-3');
            //$("#inProgerssTbl_filter").find('label').find('input').attr('id', 'Search_All');

            // $("#inProgerssTbl_filter").parent().remove();
            // $('#inProgerssTbl_info').parent().remove();
            // $('#inProgerssTbl_paginate').parent().addClass('pull-right');

            $('#readyToBeDeliveredTbl_wrapper').children().first().parent().prepend('<h4 style="float: left;">Jobs Ready to be Delivered</h4>');
            //$("#readyToBeDeliveredTbl_wrapper .row:first").prepend('<div class="col-sm-6"><h4>Jobs Ready to be Delivered</h4></div>');
            //$('#readyToBeDeliveredTbl_wrapper .dataTables_length').parent().removeClass('col-sm-6').addClass('col-sm-3');
            //$('#readyToBeDeliveredTbl_filter').parent().removeClass('col-sm-6').addClass('col-sm-3');
            //$("#readyToBeDeliveredTbl_filter").find('label').find('input').attr('id', 'Search_All');

            // $("#readyToBeDeliveredTbl_filter").parent().remove();
            // $('#readyToBeDeliveredTbl_info').parent().remove();
            // $('#readyToBeDeliveredTbl_paginate').parent().addClass('pull-right');

            $('#deliveredTbl_wrapper').children().first().parent().prepend('<h4 style="float: left;">Jobs Delivered</h4>');
            //$("#deliveredTbl_wrapper .row:first").prepend('<div class="col-sm-6"><h4>Jobs Delivered</h4></div>');
            //$('#deliveredTbl_wrapper .dataTables_length').parent().removeClass('col-sm-6').addClass('col-sm-3');
            //$('#deliveredTbl_filter').parent().removeClass('col-sm-6').addClass('col-sm-3');
            //$("#deliveredTbl_filter").find('label').find('input').attr('id', 'Search_All');
            // $("#deliveredTbl_filter").parent().remove();
            // $('#deliveredTbl_info').parent().remove();
            // $('#deliveredTbl_paginate').parent().addClass('pull-right');

            $('#completedTbl_wrapper').children().first().parent().prepend('<h4 style="float: left;">Jobs Completed</h4>');
            //$("#completedTbl_wrapper .row:first").prepend('<div class="col-sm-5"><h4>Jobs Completed</h4></div>');
            //$('#completedTbl_wrapper .dataTables_length').parent().removeClass('col-sm-6').addClass('col-sm-3');
            //$('#completedTbl_filter').parent().removeClass('col-sm-6').addClass('col-sm-3');
            //$("#completedTbl_filter").find('label').find('input').attr('id', 'Search_All');
            // $("#completedTbl_filter").parent().remove();
            // $('#completedTbl_info').parent().remove();
            // $('#completedTbl_paginate').parent().addClass('pull-right');

            var oTablejobNewTbl = $("#jobNewTbl").dataTable();
            $("#jobNewTbl").keyup(function () {
                oTablejobNewTbl.fnFilterAll(this.value);
            });
            $("#Search_All").keyup(function () {
                oTablejobNewTbl.fnFilterAll(this.value);
            });


            var oTableinProgerssTbl = $("#inProgerssTbl").dataTable();
            $("#inProgerssTbl").keyup(function () {
                oTableinProgerssTbl.fnFilterAll(this.value);
            });
            $("#Search_All").keyup(function () {
                oTableinProgerssTbl.fnFilterAll(this.value);
            });

            var oTablereadyToBeDeliveredTbl = $("#readyToBeDeliveredTbl").dataTable();
            $("#readyToBeDeliveredTbl").keyup(function () {
                oTablereadyToBeDeliveredTbl.fnFilterAll(this.value);
            });
            $("#Search_All").keyup(function () {
                oTablereadyToBeDeliveredTbl.fnFilterAll(this.value);
            });

            var oTabledeliveredTbl = $("#deliveredTbl").dataTable();
            $("#deliveredTbl").keyup(function () {
                oTabledeliveredTbl.fnFilterAll(this.value);
            });
            $("#Search_All").keyup(function () {
                oTabledeliveredTbl.fnFilterAll(this.value);
            });

            var oTablecompletedTblcompletedTbl = $("#completedTblcompletedTbl").dataTable();
            $("#completedTblcompletedTbl").keyup(function () {
                oTablecompletedTblcompletedTbl.fnFilterAll(this.value);
            });
            $("#Search_All").keyup(function () {
                oTablecompletedTblcompletedTbl.fnFilterAll(this.value);
            });

            var oTablependingPoTbl = $("#pendingPoTbl").dataTable();
            $("#pendingPoTbl").keyup(function () {
                oTablependingPoTbl.fnFilterAll(this.value);
            });
            $("#Search_All").keyup(function () {
                oTablependingPoTbl.fnFilterAll(this.value);
            });
        }, 2000);
    });
    $scope.createProject = function () {
        $window.localStorage.orderID = '';
        $window.localStorage.setItem('projectOrderName', '');
        $window.localStorage.setItem("isNewProject", "true");
        $location.path('/general');
    }
    $scope.goToJobFromPOClick = function (job_summmeryId, order_id) {
        $window.localStorage.projectJobChainOrderId = order_id;
        $window.localStorage.orderID = order_id;
        $location.path('/job-summery-details/' + job_summmeryId);
    };

    $scope.goToJob = function (jobId, OrderId) {
        scrollBodyToTop();
        rest.path = 'jobDetailchange/' + jobId;
        rest.get().success(function (data) {
            if (data) {
                //$location.path('/job-summery-details/' + jobId);
                $window.localStorage.projectJobChainOrderId = OrderId;
                $window.localStorage.orderID = OrderId;
                $routeParams.id = jobId;
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/jobEditPopup.html',
                    controller: 'jobSummeryDetailsController',
                    size: '',
                    resolve: {
                        items: function () {
                            return $scope.data;
                        }
                    }
                });
            } else {
                notification('This Record is deleted.', 'error');
            }
        }).error(errorCallback);
    };

    //Project Get From DashBoard Recent Activity
    $scope.edit = function (id) {
        
        if (id) {
            rest.path = 'order/' + id + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                if (data.userName != null) {
                    $scope.orderdata = data;

                    $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                    $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                    $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                    $window.localStorage.orderNo = $scope.orderdata.order_number;
                    $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                    $window.localStorage.orderID = id;
                    $window.localStorage.iUserId = id;
                    $window.localStorage.userType = 3;
                    $window.localStorage.currentUserName = data.vClientName;
                    $window.localStorage.genfC = 1;

                    //set isNewProject to false
                    $window.localStorage.setItem("isNewProject", "false");

                    $location.path('/general/'+data.order_id);
                    $window.localStorage.orderBlock = 1;
                    $timeout(function () {
                        $scope.cancel();
                    }, 500);
                } else {
                    notification('Information not available', 'warning');
                }
            }).error(errorCallback);
        }
    };

    //my tasks job display
    if ($cookieStore.get('session_iUserId') != undefined) {
        rest.path = "taskJobget/" + $cookieStore.get('session_iUserId');
        rest.get().success(function (data) {
            $scope.jobTaskList = data;
        });
    }

    //mytask Redirect on job
    $scope.myTaskSent = function (jobId, OrderId) {
        $window.localStorage.projectJobChainOrderId = OrderId;
        $location.path('/job-summery-details/' + jobId);
    }

    //user Edit Recent activity
    if ($cookieStore.get('internalUserEdit') != undefined) {
        if (jQuery.type($cookieStore.get('internalUserEdit')) == "number") {
            rest.path = "userActivityGetOne/" + $cookieStore.get('internalUserEdit');
            rest.get().success(function (data) {
                $scope.UserEditActivity = data;
            });
        } else {
            rest.path = "userActivityGet";
            rest.post(jQuery.unique($cookieStore.get('internalUserEdit'))).success(function (data) {
                $scope.UserEditActivity = data;
            });
        }
    }

    //user Add Recent activity
    if ($cookieStore.get('internalUserAdd') != undefined) {
        if (jQuery.type($cookieStore.get('internalUserAdd')) == "number") {
            rest.path = "userActivityGetOne/" + $cookieStore.get('internalUserAdd');
            rest.get().success(function (data) {
                $scope.UserAddActivity = data;
            });
        } else {
            rest.path = "userActivityGet";
            rest.post($cookieStore.get('internalUserAdd')).success(function (data) {
                $scope.UserAddActivity = data;
            });
        }
    }

    //jobs Edit recent activity
    if ($cookieStore.get('jobRecentEdit') != undefined) {
        if (jQuery.type($cookieStore.get('jobRecentEdit')) != "number") {
            rest.path = "jobActivityGet";
            rest.post(jQuery.unique($cookieStore.get('jobRecentEdit'))).success(function (data) {
                var obj = [];
                angular.forEach(data, function (val, i) {
                    if (val != null) {
                        obj.push(val);
                    }
                });
                $scope.jobEditActivity = obj;
            });
        }
    }

    //jobs Add recent activity
    function getCookie(ckName) {
        var cookieArr = document.cookie.split(";");
        for(var i = 0; i < cookieArr.length; i++) {
            var cookiePair = cookieArr[i].split("=");
            if(ckName == cookiePair[0].trim()) {
                return decodeURIComponent(cookiePair[1]);
            }
        }
        return null;
    }
    var cookieName = getCookie("jobRecentAdd");
    if(cookieName)
        cookieName.replace(/[\[\]']+/g,'');
    if ($cookieStore.get('jobRecentAdd') != undefined && cookieName) {
        //if ($cookieStore.get('jobRecentAdd') != undefined) {
        rest.path = "jobActivityGet";
        rest.post(jQuery.unique(cookieName.split(','))).success(function (data) {
            //rest.post(jQuery.unique($cookieStore.get('jobRecentAdd'))).success(function (data) {
            //$scope.jobEditActivity = data;
            var obj = [];
            angular.forEach(data, function (val, i) {
                if (val != null) {
                    obj.push(val);
                }
            });
            $scope.jobAddActivity = obj;
        });
    }

    //highchart height set
    setInterval(function () {
        angular.element('.highcharts-container').css('height', '300px');
    }, 300);

    var date = new Date();
    var dayAftertomorrow = pad(date.getDate() + 2, 2) + '.' + pad((date.getMonth() + 1), 2) + '.' + date.getFullYear();
    var tomorrow = dateFormat(new Date(date.setDate(date.getDate() + 1)));
    var today = dateFormat(new Date());

    $scope.redirectToProject = function (id) {
        $window.localStorage.orderID = id;
        $location.path('/general');
    }
    // Admin wise data get
    if ($scope.userRight == 1) {
        // rest.path = "dashboardOrderGet";
        // rest.get().success(function (data) {
        //     // pagination
        //     $scope.filteredTodos = [], $scope.currentPage = 1, $scope.numPerPage = 10, $scope.maxSize = 5;
        //     $scope.filteredTodos = data;
        //     $scope.makeTodos = function () {
        //         $scope.todos = [];
        //         angular.forEach($scope.filteredTodos, function (val, i) {
        //             //$scope.todos.push({ , done:false});
        //         });
        //     }

        //     $scope.makeTodos();

        //     $scope.$watch('currentPage + numPerPage', function () {
        //         var begin = (($scope.currentPage - 1) * $scope.numPerPage),
        //             end = begin + $scope.numPerPage;
        //         $scope.adminOrderData = $scope.filteredTodos.slice(begin, end);

        //         $scope.projectInProgerss = 0;
        //         $scope.projectDilevered = 0;
        //         $scope.DueDateTodayCount = 0;
        //         $scope.DueDateTomorrowCount = 0;
        //         $scope.dueDayAfterTomorrowCount = 0;
        //         $scope.overDueDateCount = 0;
        //         $scope.headsUp = 0;

        //         angular.forEach($scope.filteredTodos, function (val, i) {
        //             if (val.projectStatus == 4) {
        //                 $scope.projectInProgerss++;
        //             }
        //             $scope.projectInProgerss = $scope.projectInProgerss;

        //             if (val.projectStatus == 11) {
        //                 $scope.projectDilevered++;
        //             }
        //             $scope.projectDilevered = $scope.projectDilevered;

        //             if(val.DueDate){
        //                 if (val.DueDate.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 1)) {
        //                     $scope.DueDateTomorrowCount++;
        //                 }
        //                 $scope.DueDateTomorrowCount = $scope.DueDateTomorrowCount;

        //                 if (val.DueDate.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 2)) {
        //                     $scope.dueDayAfterTomorrowCount++;
        //                 }
        //                 $scope.dueDayAfterTomorrowCount = $scope.dueDayAfterTomorrowCount;

        //                 if (val.DueDate.split(' ')[0] == dateFormat(new Date())) {
        //                     $scope.DueDateTodayCount++;
        //                 }
        //                 $scope.DueDateTodayCount = $scope.DueDateTodayCount;

        //                 if (val.DueDate.split(' ')[0].split(".").reverse().join("-") < dateFormat(new Date()).split(".").reverse().join("-")) {
        //                     $scope.overDueDateCount++;
        //                 }
        //                 $scope.overDueDateCount = $scope.overDueDateCount;
        //             }    
                    

        //             if (val.heads_up == 1) {
        //                 $scope.headsUp++;
        //             }
        //             $scope.headsUp = $scope.headsUp;
        //         });

        //         var go;
        //         $scope.OverdueFilter = function (id, eID) {
        //             eID = "projectScroll";
        //             //angular.element('.DashboardTask').css('margin-top', '-20%');
        //             $scope.dateOverdue = $filter('dateLessThenToday')($scope.adminOrderData, today);
        //             scrollToId(eID);
        //             angular.element('#exportable').hide();
        //             angular.element('#exportable1').show();
        //             angular.element('#exportExport1').show();
        //             angular.element('#exportExport').hide();
        //             angular.element('.DashboardTask').css('margin-top', '-5%');
        //         }
        //     });

        //     var order = {
        //         // all: 0,
        //         inpreparation: 0,
        //         assignedwaiting: 0,
        //         inprogress: 0,
        //         overdue: 0,
        //         delivered: 0,
        //         approved: 0,
        //         duetoday: 0,
        //         duetommorow: 0,
        //         duetoday: 0,
        //         duedayaftertomorrow: 0
        //     };

        //     //count status
        //     angular.forEach(data, function (val, i) {
        //         if (val.DueDate != "") { }
        //         if (val.itemStatus == 'In preparation') {
        //             order.inpreparation += 1;
        //         }
        //         if (val.itemStatus == 'Assigned-waiting' || val.itemStatus == 'Waiting') {
        //             order.assignedwaiting += 1;
        //         }
        //         if (val.itemStatus == 'In-progress' || val.itemStatus == 'Ongoing') {
        //             order.inprogress += 1;
        //         }
        //         /*if (val.itemStatus == 'Overdue') {
        //             order.overdue += 1;
        //         }*/
        //         if (val.itemStatus == 'Delivered' || val.itemStatus == 'Completed') {
        //             order.delivered += 1;
        //         }
        //         if (val.itemStatus == 'Approved'  || val.itemStatus == 'Invoice Ready' ) {
        //             order.approved += 1;
        //         }
        //         /*if (val.DueDate == dayAftertomorrow) {
        //             order.duedayaftertomorrow += 1;
        //         }*/
        //         /*if (val.DueDate == tomorrow) {
        //             order.duetommorow += 1;
        //         }*/
        //         /*if (val.DueDate == today) {
        //             order.duetoday += 1;
        //         }*/
        //     });

        //     //count status display
        //     var obj = [];
        //     angular.forEach(order, function (val, i) {
        //         obj.push({ name: i, y: val });
        //         angular.element('#ap_' + i).text(val);
        //     });

        //     //$scope.jobChart(obj);

        //     $scope.adminEmpty = jQuery.isEmptyObject(data);

        // });
    }

    $scope.goToProjectList = function (viewType) {
        if (viewType) {
            var modalInstance = $uibModal.open({
                //animation: $scope.animationsEnabled,
                templateUrl: 'tpl/statusWiseProject.html',
                controller: 'statusWiseProjectController',
                size: '',
                resolve: {
                    items: function () {
                        return viewType;
                    }
                }
            });
        }

    };

    $scope.goToProjectScoopList = function (viewType) {
        if (viewType) {
            var modalInstance = $uibModal.open({
                //animation: $scope.animationsEnabled,
                templateUrl: 'tpl/statusWiseProjectScoop.html',
                controller: 'statusWiseProjectController',
                size: '',
                resolve: {
                    items: function () {
                        return viewType;
                    }
                }
            });
        }

    };

    $scope.goToProjectViewdetail = function (viewType) {
        
        if (viewType) {
            var modalInstance = $uibModal.open({
                //animation: $scope.animationsEnabled,
                templateUrl: 'tpl/projectViewdetailPopup.html',
                //controller: 'viewProjectController',
                controller: 'viewProjectPopupController',
                size: '',
                resolve: {
                    items: function () {
                        return viewType;
                    }
                }
            });
        }
    };

    $scope.goToScoopViewdetail = function (viewType, orderId, event) {
        
        if(event.ctrlKey && orderId){
            rest.path = 'order/' + orderId + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                if (data.userName != null) {
                    $scope.orderdata = data;
                    
                    $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                    $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                    $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                    $window.localStorage.orderNo = $scope.orderdata.order_number;
                    $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                    $window.localStorage.orderID = orderId;
                    $window.localStorage.iUserId = orderId;
                    $window.localStorage.userType = 3;
                    $window.localStorage.currentUserName = data.vClientName;
                    $window.localStorage.genfC = 1;

                    //set isNewProject to false
                    $window.localStorage.setItem("isNewProject", "false");

                    $window.open($location.absUrl().split('#')[0]+'#/general/'+orderId, '_blank');
                    $window.localStorage.orderBlock = 1;
                } else {
                    notification('Information not available', 'warning');
                }
            }).error(errorCallback);
        }else{

            if (viewType && orderId) {
                $window.localStorage.orderID = orderId;
                var modalInstance = $uibModal.open({
                    //animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/scoopViewdetailPopup.html',
                    controller: 'viewScoopPopupController',
                    size: '',
                    resolve: {
                        items: function () {
                            return {scoop_id: viewType,order_id:orderId};
                        }
                    }
                });
            }
        }    
    };

    $scope.goTocommentChat = function (viewType) {
        if (viewType) {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/commentchatPopup.html',
                controller: 'commentchatController',
                size: '',
                resolve: {
                    items: function () {
                        return viewType;
                    }
                }
            });
        }
    }
    $scope.childPrice = [];
    $scope.langsListAll = [];
    if ($cookieStore.get('session_iUserId') != undefined) {
        rest.path = 'languagesGet';
        rest.get().success(function (data) {
            $scope.langsListAll = data;
        }).error(errorCallback);

        //* child Price list *//
        rest.path = 'childPriceitemget';
        rest.get().success(function (data) {
            $scope.childPrice = data;
            
        }).error(errorCallback);
    }

    // Jobs delivered status
    $scope.jobListDelivered = [];
    if ($cookieStore.get('session_iUserId') != undefined) {
        rest.path = 'getJobsAll';
        rest.get().success(function (data) {
            $scope.jobListDelivered = data;
            
        })
    }         

    // Tabs permission array
    //$scope.tabPermission = { "due_today": true, "to_be_assigned": true, "in_progress": true, "qa_ready": true, "to_be_delivered": true, "due_tomorrow": true, "delivered": true, "my_projects": true };
    var tabPermission = { "due_today": true, "assigned": true, "ongoing": true, "qa_ready": true, "qa_issue": true, "pm_ready": true, "delivery": true, "completed": true, "overdue": true, "due_tomorrow": true, "my_project": true, "upcoming": true, "approved": true, "all": true };
    $scope.tabPermission = {};
    // User data with postion for widget box
    if ($cookieStore.get('session_iUserId') != undefined) {
        rest.path = 'viewExternalget/' + $window.localStorage.getItem("session_iUserId");
        rest.get().success(function (data) {
            
            $scope.vResourcePosition = data.vResourcePosition;
            //-- Permission to show tabs --//
            if($window.localStorage.getItem("session_iUserId") == 1){
                $scope.tabPermission = tabPermission;
            }else{ 
                if(data.tabPermission)
                    $scope.tabPermission = JSON.parse(data.tabPermission) 
                else
                    $('.btn_create-project').css('top','15px')
            }        
            
        });
    }

    // ** Dashoboard Project TABS start ** //
    $scope.projBranchChange = false;
    // Tab view Project List

    $scope.allProjectListing = function () {
        $scope.projectsAll = [];
        $scope.projectsMyproj = [];
        $scope.projectsUpcoming = [];
        $scope.projectsInProgress = [];
        $scope.projectsDueToday = [];
        $scope.projectsDueTomorrow = [];
        $scope.projectsOverdue = [];
        $scope.projectsAssigned = [];
        $scope.projectsQaready = [];
        $scope.projectsPmready = [];
        $scope.projectsQaissue = [];
        $scope.projectsToBeDelivered = [];
        $scope.projectsDelivered = [];
        $scope.projectsApproved = [];
        $scope.projectsCompletedByLng = [];
        $scope.projectsToDisplay = [];

        $scope.projectsAllCount = 0;
        $scope.projectsMyprojCount = 0;
        $scope.projectsUpcomingCount = 0;
        $scope.projectsInprogressCount = 0;
        $scope.projectsDueTodayCount = 0;
        $scope.projectsDueTomorrowCount = 0;
        $scope.projectsOverdueCount = 0;
        $scope.projectsToBeDeliveredCount = 0;
        $scope.projectsDeliveredCount = 0;
        $scope.projectsQaReadyCount = 0;
        $scope.projectsPmReadyCount = 0;
        $scope.projectsQaIssueCount = 0;
        $scope.projectsApprovedCount = 0;
        $scope.projectsAssignedCount = 0;
        // -- new status for scoop item count based on status -- //
        $scope.projectLinguistCount = 0;
        $scope.projectDileveredCount = 0;
        $scope.projectApprovedCount = 0;
        $scope.projectInvoicedCount = 0;
        $scope.projectPaidCount = 0;
        $scope.projectWithoutInvoicedCount = 0;
        $scope.projectCancelledCount = 0;
        $scope.projectOverdueCount = 0;

        rest.path = "dashboardProjectsOrderGet/" + $window.localStorage.getItem("session_iUserId");
        rest.get().success(function (data) {
            
            //if($window.localStorage.projectBranch != ' '){
            if ($scope.projBranchChange) {
                // filter data based on branch
                //$scope.projectData = data.filter(pd => pd.project_branch == $window.localStorage.projectBranch)
                $scope.projectData = data.filter( pd => pd.orderNumber.startsWith($window.localStorage.projectBranch) )
            } else {
                $scope.projectData = data;
            }
            angular.forEach($scope.projectData, function (val, i) {
                val.progrss_precentage = -1;
                //$scope.projectsAll = $scope.projectData;
                //var newLangData = { sourceLang: 'English (US)', dataNgSrc: 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png', alt: '' };
                var newLangData = { sourceLang: '', dataNgSrc: '', alt: ' ' };
                if (val.itemsSourceLang) {
                    $scope.projectData[i].itemsSourceLang = JSON.parse(val.itemsSourceLang);
                    // var sourceLangName = $scope.projectData[i].itemsSourceLang.sourceLang;
                    // if(sourceLangName){
                    //     if($scope.langsListAll){
                    //         var sourceLang = $scope.langsListAll.find(obj => {
                    //             return obj.name === sourceLangName;
                    //         })
                    //         if(sourceLang)
                    //         $scope.projectData[i].itemsSourceLang.sourceLang = sourceLang.title;
                    //     }
                    // }
                } else {
                    $scope.projectData[i].itemsSourceLang = newLangData;
                }
                if (val.itemsTargetLang) {
                    $scope.projectData[i].itemsTargetLang = JSON.parse(val.itemsTargetLang);
                    // var targetLangName = $scope.projectData[i].itemsTargetLang.sourceLang;
                    // if(targetLangName){
                    //     var targetLang = $scope.langsListAll.find(obj => {
                    //         return obj.name == targetLangName
                    //     })
                    //     if(targetLang){
                    //         $scope.projectData[i].itemsTargetLang.sourceLang = targetLang.title;
                    //     }
                    // }
                } else {
                    $scope.projectData[i].itemsTargetLang = newLangData;
                }
                var scoopWords = 0;
                var scoopHours = 0;
                val.scoop_projectColor = '#3B9C9C';
                if(val.scoop_price){ 
                    $scope.projectData[i].scoop_price = JSON.parse(val.scoop_price);
                    if($scope.childPrice.length){
                        angular.forEach(val.scoop_price, function(pval, i) {
                            const isFound = $scope.childPrice.filter(element => {
                                if (element.name == pval.pricelist) {
                                    return element.unit;
                                }
                                return false;
                            });
                            if(isFound.length){
                                if(isFound[0].unit == 'Words') 
                                    scoopWords += parseInt(pval.quantity)
                                if(isFound[0].unit == 'Hours') 
                                    scoopHours += parseInt(pval.quantity)
                            }
                        });
                        if( scoopWords > 0){
                            if(scoopWords > 0 && scoopWords < 2000)
                                val.scoop_projectColor =  'green';
                            if(scoopWords > 2000 && scoopWords < 4000)
                                val.scoop_projectColor =  'blue';
                            if(scoopWords > 4000 && scoopWords < 9999)
                                val.scoop_projectColor =  'orange';
                            if(scoopWords > 10000)
                                val.scoop_projectColor =  'red';
                        }
                        if(scoopWords == 0 && scoopHours > 0){
                            if(scoopHours > 0 && scoopHours <= 2)
                                val.scoop_projectColor =  'green';
                            if(scoopHours > 2 && scoopHours <= 4)
                                val.scoop_projectColor =  'blue';
                            if(scoopHours > 4 && scoopHours <= 10)
                                val.scoop_projectColor =  'orange';
                            if(scoopHours > 10)
                                val.scoop_projectColor =  'red';
                        }    
                    }    
                    scoopWords = 0; 
                    scoopHours = 0;
                }    
                    
                //  ----linguist List----- / 
                
                val.jobLinguist = [];
                // if (val.linguist.length > 0) {
                //     val.jobLinguist = UniqueArraybyId(val.linguist, 'resources');
                // }
                if(val.linguistName){
                    let linguistId = (val.linguistId).toString().split(',');
                    var lngstArr = [];
                    (val.linguistName).split(',').forEach((ele,i) => {
                        lngstArr.push( { resources: linguistId[i], vUserName: ele } )    
                    });
                    val.jobLinguist = lngstArr;
                }   

                if(val.sub_pm_id !== 0 && val.sub_pm_name != null){
                    val.pm_name = val.sub_pm_name
                }
                
                // if(val.price_currency){
                //     val.price_currency = val.price_currency.includes(',') ? val.price_currency.split(',')[0] : '';
                // }else if(val.price_currency2){
                //     val.price_currency = val.price_currency2.includes(',') ? val.price_currency2.split(',')[0] : '';
                // }else{
                //     val.price_currency = 'EUR';
                // }
                
                val.price_currency = val.client_currency && val.client_currency.includes(',') ? val.client_currency.split(',')[0] : 'EUR';
              
                // Comment read unRead
                var cmtcolor = '#0190d8';
                var is_comment = 0;
                var comment_id = 0;
                // if (val.comment.length > 0) {
                //     var is_comment = $scope.projectData[i].comment[0].comment_status;
                // }

                if (val.comment_status > 0) {
                    cmtcolor = '#d30c39';
                }
                if (val.comment_status == 0) {
                    cmtcolor = '#67bb0a';
                }
                val.comment = cmtcolor;

                //$scope.projectsAllCount++;
                val.projectstatus_class = 'projectstatus_common';
                val.projectstatus_color = '#FFFF';
                
                // Projects All
                if (val) {
                    $scope.projectsAll.push(val);
                    $scope.projectsAllCount++;
                }
                // My Projects
                if (val.project_manager_id == $scope.userLoginID || val.project_coordinator_id == $scope.userLoginID || val.qa_specialist_id == $scope.userLoginID || (val.sub_pm_id == $scope.userLoginID)) {
                    $scope.projectsMyproj.push(val);
                    $scope.projectsMyprojCount++;
                }
                // upcoming Projects - Heads up
                if (val.heads_up == 1 ) {
                    $scope.projectsUpcoming.push(val);
                    $scope.projectsUpcomingCount++;
                }
                //To be Assigned - Assign
                if (val.itemStatusId == "1") {
                //if (val.itemStatusId == "To be Assigned") {
                    val.progrss_precentage = 0;
                    val.projectstatus_class = 'projectstatus_assigned';
                    val.projectstatus_color = '#ffea3c';
                    $scope.projectsAssigned.push(val);
                    $scope.projectsAssignedCount++;
                }
                // In Progress - Ongoing
                if (val.itemStatusId == "2") {
                    val.progrss_precentage = 25;
                    val.projectstatus_class = 'projectstatus_inprogress';
                    val.projectstatus_color = '#fec106';
                    $scope.projectsInProgress.push(val);
                    $scope.projectsInprogressCount++;
                }
                // To be Delivered - Delivery
                if (val.itemStatusId == "3") {
                    val.progrss_precentage = 80;
                    val.projectstatus_class = 'projectstatus_tobedelivered';
                    val.projectstatus_color = '#c6d732';
                    $scope.projectsToBeDelivered.push(val);
                    $scope.projectsToBeDeliveredCount++;
                }
                // Delivered - Completed
                if (val.itemStatusId == "4") {
                    val.progrss_precentage = 100;
                    //$scope.projectDileveredCount++;
                    $scope.projectsDelivered.push(val);
                    $scope.projectsDeliveredCount++;
                    val.projectstatus_class = 'projectstatus_delivered';
                    val.projectstatus_color = '#80bb41';
                }
                // Approved - Approved
                if (val.itemStatusId == "5") {
                    val.progrss_precentage = 75;
                    $scope.projectsApprovedCount++;
                    $scope.projectsApproved.push(val);
                    val.projectstatus_class = 'projectstatus_approved';
                    val.projectstatus_color = '#4caf52';
                }
                // Invoiced 
                if (val.itemStatusId == "6") {
                    val.progrss_precentage = 100;
                    $scope.projectInvoicedCount++;
                    val.projectstatus_class = 'projectstatus_invoiced';
                    val.projectstatus_color = '#ea1e63';
                }
                // Paid
                if (val.itemStatusId == "7") {
                    val.progrss_precentage = 100;
                    $scope.projectPaidCount++;
                    val.projectstatus_class = 'projectstatus_paid';
                    val.projectstatus_color = '#00bcd5';
                }
                //Without invoice => Non-payable
                if (val.itemStatusId == "8") {
                    $scope.projectWithoutInvoicedCount++;
                    val.projectstatus_class = 'projectstatus_withoutInvoice';
                    val.projectstatus_color = '#9e9e9e';
                }
                // Cancelled
                if (val.itemStatusId == "9") {
                    $scope.projectCancelledCount++;
                    val.projectstatus_class = 'projectstatus_cancelled';
                    val.projectstatus_color = '#f44237';
                }
                // Completed by linguist
                if (val.itemStatusId == "10") {
                    val.progrss_precentage = 50;
                    val.projectstatus_class = 'projectstatus_completed';
                    val.projectstatus_color = '#ff9700';
                    $scope.projectsCompletedByLng.push(val);
                    $scope.projectLinguistCount++;
                }
                // QA Ready
                let isQaReady = false;
                if($scope.jobListDelivered.length > 0){
                    let checkqaReady = $scope.jobListDelivered.filter( jb => jb.order_id == val.orderId && jb.item_id == val.item_number && ['Completed','Delivered'].includes(jb.item_status) );
                    isQaReady = checkqaReady.length > 0 ? true : false;
                }
                if ( ([4,6,7,8,9].includes(val.itemStatusId)==false) && (val.itemStatusId == "10" || isQaReady)) {
                    //if(isQaReady){
                        val.progrss_precentage = 75;
                        val.projectstatus_class = 'projectstatus_ready';
                        val.projectstatus_color = '#019788';
                        $scope.projectsQaready.push(val);
                        $scope.projectsQaReadyCount++;
                    //}    
                }
                // QA issue
                if (val.itemStatusId == "11") {
                    $scope.projectsQaIssueCount++;
                    $scope.projectsQaissue.push(val);
                    val.projectstatus_class = 'projectstatus_ready';
                    val.projectstatus_color = '#f44237';
                }
                // PM Ready
                if (val.itemStatusId == "12") {
                    val.progrss_precentage = 75;
                    $scope.projectsPmReadyCount++;
                    $scope.projectsPmready.push(val);
                    val.projectstatus_class = 'projectstatus_ready';
                    val.projectstatus_color = '#f44237';
                }
                // Overdue
                // if (val.itemStatusId == "12") {
                //     $scope.projectOverdueCount++;
                //     val.projectstatus_class = 'projectstatus_overdue';
                //     val.projectstatus_color = '#f44237';
                // }
                // val.DueDate - due Today
                //let statusExistArr = ["Delivered","Approved","Invoiced","Paid"];
                let statusExistArr = [4,5,6,7];
                let scoopDueDate = val.itemDuedate;
                    
                if(scoopDueDate && !(statusExistArr.indexOf(val.itemStatusId) > -1) ){
                    if (scoopDueDate.split(' ')[0] == $scope.dateToday && [1,2].indexOf(val.itemStatusId) > -1 ) {
                        $scope.projectsDueToday.push(val);
                        $scope.projectsDueTodayCount++;
                    }
                    if (scoopDueDate.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 1)  && [1,2].indexOf(val.itemStatusId) > -1 ) {
                        $scope.projectsDueTomorrow.push(val);
                        $scope.projectsDueTomorrowCount++;
                    }
                    if (scoopDueDate.split(' ')[0] < $scope.dateToday && [1,2].indexOf(val.itemStatusId) > -1 ) {
                        $scope.projectsOverdue.push(val);
                        $scope.projectsOverdueCount++;
                    }
                }    
                if (val.heads_up == 1) {
                    $scope.projectsToDisplay.push(val);
                }
                val.itemDuedate_new = val.itemDuedate ? val.itemDuedate : '';

                $scope.showDataLoader = false;
            });
            if(data.length == 0)
                $scope.showDataLoader = false;

        });
    };
    $scope.allProjectListing();
    // Branch change (Norway-Bulgaria) call function again
    $scope.projectBranchchange = function (id) {
        $scope.projBranchChange = true;
        $scope.projectBranch = {};
        $scope.projectBranch = angular.element('#projectBranch').select2('data');
        //var projBranchVal = $scope.projectBranch.length > 0 ? $scope.projectBranch[0].id : 'RWS22';
        var projBranchVal = $scope.projectBranch ? $scope.projectBranch.id : '';
        $window.localStorage.projectBranch = projBranchVal;
        if (projBranchVal) {
            //$route.reload();
            $scope.allProjectListing();
        }else{
            $scope.allProjectListing();
        }
    }
    $scope.branchRefresh = function () {
        $route.reload();
    }

    $scope.checkedIds = [];
    // Remove Element from array
    function arrayRemove(arr, value) { 
        return arr.filter(function(ele){ 
            return ele != value; 
        });
    }
    $scope.checkScoopIds = function(id){
        if(id){
            let isChecked = $('.scoopCheck' + id).is(':checked') ? 'true' : 'false';
            if(isChecked == 'true'){
                if(!$scope.checkedIds.includes(id))
                    $scope.checkedIds.push(id);
            }else
                $scope.checkedIds = arrayRemove($scope.checkedIds, id);
        }    
    }
    $scope.changeScoopStatus = function (scoopId,index) {
        if(scoopId){
            $("#scoopCheck"+index).prop('checked', true);
            $scope.checkScoopIds(scoopId);
        }
        //$scope.checkedIds
        $scope.selectedStatus = '';
        if($scope.checkedIds.length){
            var html = angular.element(
                '<div class="col-sm-12">' +
                '<div class="col-sm-6">'+
                '<lable>Select scoop status <lable>'+
                '<input type="text" id="scoopStatus" select2-scoop-detailitm-status name="selectedStatus" ng-model="selectedStatus" />'+
                '</div></div>' +
                '</div>' );

            $compile(html)($scope);
            var dialog = bootbox.dialog({
                title: "Change scoop status",
                message: html,
                buttons: {
                    success: {
                        label: "Save",
                        onEscape: true,
                        className: "btn-info",
                        callback: function () {
                            let objStatus = {
                                'scoop_id':JSON.stringify($scope.checkedIds),
                                'item_status':$scope.selectedStatus.split(',')[0],
                            }
                            if($scope.checkedIds.length){
                                rest.path = "scoopStatusChange";
                                rest.post(objStatus).success(function (data) {
                                    if(data && data.all_update == 1){
                                        notification('Status successfully updated', 'success');
                                        $route.reload();
                                    }
                                }).error(errorCallback);
                            }    
                        }
                    }
                }
            });
        }else{
            notification('Please select project scoop', 'information');
        }    
    }

    // Dynamic Dashboard tabs
/*     $scope.tabList = [{name:'All',className:'All',statusCount:'0'},{name:'Ongoing',className:'Ongoing',statusCount:'0'}];
    $scope.projectsListData = [];
    $scope.dashboardProjects = function (tabName) {
        $scope.showDataLoader = true;
        $scope.projectsListData = [];
        let tabList = $scope.tabList;
        switch (tabName) {
            case 'All':
                $scope.projectsListData = $scope.projectsAll;
                tabList.filter( (nm) => { 
                    if(nm.name == 'All')
                        nm.statusCount = $scope.projectsAllCount 
                })
                break;
            case 'Ongoing':
                $scope.projectsListData = $scope.projectsAssigned;
                tabList.filter( (nm) => { 
                    if(nm.name == 'Ongoing')
                        nm.statusCount = 5 
                } )
                $scope.showDataLoader = false;
                break;
            default:
                $scope.projectsListData = $scope.projectsAssigned;
                break;
        }
    } */

    /* Jobs section */
    $scope.jobList_tabFilter = function () {
        var deferred = $q.defer();

        rest.path = 'getJobsFromTmsSummeryView';
        rest.get().success(function (data) {
            $scope.dashboardJobList = data;
            
            $scope.allJobsData = [];
            $scope.requested = [];
            $scope.jobNew = [];
            $scope.inProgerss = [];
            $scope.readyToBeDelivered = [];
            $scope.delivered = [];
            $scope.completed = [];
            $scope.pendingPo = [];
            $scope.jobDueToday = [];
            $scope.jobDueTomorrow = [];
            $scope.jobOverDue = [];

            // -- Job count -- //
            $scope.jobRequestesCount = 0;
            $scope.jobInProgressCount = 0;
            $scope.jobDueTodayCount = 0;
            $scope.jobDueTomorrowCount = 0;
            $scope.jobOverDueCount = 0;
            $scope.jobTobeDileveredCount = 0;

            angular.forEach($scope.dashboardJobList, function (val, i) {
                val.item_id = pad(val.item_id, 3);
                if (val.ItemLanguage) {
                    val.ItemLanguage = val.ItemLanguage.split('>')[0].trim().substring(0, 3).toUpperCase() + ' > ' + val.ItemLanguage.split('>')[1].trim().substring(0, 3).toUpperCase();
                }
                if (val.item_source_lang) {
                    val.item_source_lang = JSON.parse(val.item_source_lang);
                }
                if (val.item_source_lang) {
                    val.item_target_lang = JSON.parse(val.item_target_lang);
                }
                val.proj_scoop_no = val.po_number ? val.po_number.substr(0, val.po_number.indexOf('_')) + '-' + val.item_id : val.item_id;

                /* var sourceData = JSON.parse(data.source_lang);
                var targetData = JSON.parse(data.target_lang);
                srcLang =  sourceData.sourceLang;   
                trgLang =  targetData.sourceLang; */

                if (val.po_number.length < 1) {
                    $scope.pendingPo.push(val);
                }
                $scope.allJobsData.push(val);
                if (val.item_status == 'In preparation') {
                //if (val.item_status == 'New') {
                        $scope.jobNew.push(val);
                } else if (val.item_status == 'Requested') {
                    $scope.requested.push(val);
                    $scope.jobRequestesCount++;
                } else if (val.item_status == 'In-progress' || val.item_status == 'Ongoing') {
                    $scope.inProgerss.push(val);
                    $scope.jobInProgressCount++;
                } else if (val.item_status == 'Ready to be Delivered') {
                    $scope.readyToBeDelivered.push(val);
                    $scope.jobTobeDileveredCount++;
                } else if (val.item_status == 'Completed') {
                    $scope.completed.push(val);
                }

                //Due date counts for jobs
                if( ! ['Delivered','Completed','Paid','Invoice Ready','Invoice Accepted','Invoiced'].indexOf(val.item_status) > -1 ){
                    if (val.due_date.split(' ')[0] == dateFormat(new Date()).split(".").reverse().join("-")) {
                        $scope.jobDueToday.push(val);
                        $scope.jobDueTodayCount++;
                    }
                    if (val.due_date.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 1)) {
                        $scope.jobDueTomorrow.push(val);
                        $scope.jobDueTomorrowCount++;
                    }
                    const dateToday = dateFormat(new Date()).split(".").reverse().join("-");
                    if (val.due_date.split(' ')[0] < dateToday) {
                        if( ['In preparation','Requested','Assigned-waiting','Waiting','In-progress','Ongoing'].indexOf(val.item_status) > -1 ){
                            $scope.jobOverDue.push(val);
                            $scope.jobOverDueCount++;
                        }
                    }
                }    

            });
            //$timeout(function () {
                /* All jobs list for widget */
                $scope.alljobsWidget = $scope.allJobsData;
                //const sortedActivities = jobOverDue.sort((a, b) => new Date(a.due_date) - new Date(b.due_date) )
                if ($scope.jobsListAll) {
                    $scope.jobsListAll = $scope.jobsListAll.sort(function (a, b) {
                        const aDate = a.due_date;
                        const bDate = b.due_date;
                        if (!aDate.includes("1970-01-01"))
                            return new Date(a.due_date) - new Date(b.due_date);
                    });
                }
                /* Start Upcoming Due Jobs - widgetBox */
                const currentDatestr = new Date();
                const currentDate = currentDatestr.toISOString().split('T')[0];
                if ($scope.vResourcePosition == 2) {
                    $scope.upJobsDue = $scope.alljobsWidget.filter(upJobs => upJobs.due_date > currentDate && upJobs.job_manager_id == $window.localStorage.getItem("session_iUserId"));
                }
                if ($scope.vResourcePosition == 3) {
                    $scope.upJobsDue = $scope.alljobsWidget.filter(upJobs => upJobs.due_date > currentDate && upJobs.project_coordinator_id == $window.localStorage.getItem("session_iUserId"));
                }
                if ($scope.vResourcePosition == 4) {
                    $scope.upJobsDue = $scope.alljobsWidget.filter(upJobs => upJobs.due_date > currentDate && upJobs.qa_specialist_id == $window.localStorage.getItem("session_iUserId"));
                }
                $scope.showDataLoaderJob = false;
                /* End */


            //}, 2000);

            deferred.resolve($scope.dashboardJobList);

        }).error(function () {
            deferred.reject();
        });    

        return deferred.promise;
    };

    // static 
    $scope.jobsTabArr = [ {id:1, tabName:'Requested', jobsListAll:[]}, {id:2, tabName:'inProgress', jobsListAll:[] }, {id:3, tabName:'DueToday', jobsListAll:[]}, {id:4, tabName:'DueTomorrow', jobsListAll:[]}, {id:5, tabName:'Overdue', jobsListAll:[]}  ]
      
    $scope.alljobsWidget = [];
    $scope.isoverviewJobs = false;
    $scope.jobstatusRecord = function (statusType, jobStatus) {
        $scope.showDataLoaderJob = true;
        if (jobStatus) {
            $scope.jobstatusFilter = jobStatus;
            $scope.isoverviewJobs = true;
            $scope.jobsListAll = [];
            $scope.showDataLoaderJob = true;
        } else {
            //$scope.jobstatusFilter = 'all';
            $scope.jobstatusFilter = '';
        }
        $scope.jobsactive = $scope.jobsactive == jobStatus ? '' : jobStatus;

        switch($scope.jobstatusFilter){
            case 'all':
                $scope.jobsListAll = $scope.allJobsData;
                break;
            case 'Requested':
                angular.element('#jobAllTbl_'+jobStatus).show();
                $scope.jobsListAll = $scope.requested;
                $scope.jobsTabArr[0].jobsListAll = $scope.requested
                break;    
            case 'inProgress':
                $scope.jobsListAll = $scope.inProgerss;
                $scope.jobsTabArr[1].jobsListAll = $scope.inProgerss
                break;
            case 'DueToday':
                $scope.jobsListAll = $scope.jobDueToday;
                $scope.jobsTabArr[2].jobsListAll = $scope.jobDueToday
                break;             
            case 'DueTomorrow':
                $scope.jobsListAll = $scope.jobDueTomorrow;
                $scope.jobsTabArr[3].jobsListAll = $scope.jobDueTomorrow
                break;
            case 'Overdue':
                $scope.jobsListAll = $scope.jobOverDue;
                $scope.jobsTabArr[4].jobsListAll = $scope.jobOverDue
                break;         
        }
        
        $scope.showDataLoaderJob = false;
    };

    $scope.jobList_tabFilter()
        .then(function (invoicePromiseData) {
            //$scope.jobstatusRecord('jobs', '');

    });

    // Jobs tabs section


    // $scope.jobstatusRecord = function(jobStatus) {
    //     if(jobStatus == 'inProgerss'){
    //         $scope.jobstatusFilter = 'inProgerss';
    //         $scope.jobNew = delivered;
    //     }
    // };
    // $scope.jobstatusRecord('all');


    $scope.goTojobsList = function (jobStatus, count) {
        if (count == 0) {
            notification("Nothing jobs available in " + jobStatus + ".", "warning");
            return false;
        }
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/statusWiseJobs.html',
            controller: 'statusWiseJobsController',
            size: '',
            resolve: {
                items: function () {
                    return jobStatus;
                }
            }
        });
    };
    $scope.namePrezip = function (name) {
        $window.localStorage.setItem('itemClientName', name);
    }
    $scope.orderCheck = function (id, eID, inPrepare) {
        eID = "projectScroll";
        $scope.orderItem = {};
        angular.element('.DashboardTask').css('margin-top', '-20%');
        switch (id) {
            case "In preparation":
                $scope.itemStatus = id;
                $scope.orderItem.itemStatus = $scope.itemStatus;
                $scope.ordersData = true;
                $scope.OrList = "In preparation";
                $scope.inprogressColapse = false;
                angular.element('#exportable').show();
                angular.element('#exportable1').hide();
                angular.element('#exportExport1').hide();
                angular.element('#exportExport').show();
                scrollToId(eID);
                break;
            case "Waiting":
            //case "Assigned-waiting":
                $scope.itemStatus = id;
                $scope.orderItem.itemStatus = $scope.itemStatus;
                $scope.ordersData = true;
                $scope.OrList = "Assigned-waiting";
                $scope.inprogressColapse = false;
                angular.element('#exportable').show();
                angular.element('#exportable1').hide();
                angular.element('#exportExport1').hide();
                angular.element('#exportExport').show();
                scrollToId(eID);
                break;
            case "In-progress":
                $scope.itemStatus = id;
                $scope.orderItem.itemStatus = $scope.itemStatus;
                $scope.ordersData = true;
                $scope.OrList = "In-progress";
                $scope.inprogressColapse = true;
                if (inPrepare == undefined || inPrepare == false) {
                    $scope.inprogressColapse = true;
                    angular.element('.DashboardTask').css('margin-top', '0%');
                } else {
                    $scope.inprogressColapse = false;
                    angular.element('.DashboardTask').css('margin-top', '-20%');
                }
                break;
            case "Overdue":
                $scope.itemStatus = id;
                $scope.orderItem.DueDate = today;
                $scope.ordersData = true;
                $scope.OrList = "Overdue";
                angular.element('#exportable').show();
                angular.element('#exportable1').hide();
                angular.element('#exportExport1').hide();
                angular.element('#exportExport').show();
                scrollToId(eID);
                angular.element('.DashboardTask').css('margin-top', '0%');
                break;
            case "Delivered":
                $scope.itemStatus = id;
                $scope.orderItem.itemStatus = $scope.itemStatus;
                $scope.ordersData = true;
                $scope.OrList = "Delivered";
                angular.element('#exportable').show();
                angular.element('#exportable1').hide();
                angular.element('#exportExport1').hide();
                angular.element('#exportExport').show();
                $scope.inprogressColapse = false;
                scrollToId(eID);
                break;
            case "Approved":
                $scope.itemStatus = id;
                $scope.orderItem.itemStatus = $scope.itemStatus;
                $scope.ordersData = true;
                $scope.OrList = "Approved";
                $scope.inprogressColapse = false;
                angular.element('#exportable').show();
                angular.element('#exportable1').hide();
                angular.element('#exportExport1').hide();
                angular.element('#exportExport').show();
                scrollToId(eID);
                break;
            case "Due-today":
                var today = dateFormat(new Date());
                $scope.itemStatus = id;
                $scope.orderItem.DueDate = today;
                $scope.ordersData = true;
                $scope.OrList = "Due-today";
                angular.element('#exportable').show();
                angular.element('#exportable1').hide();
                angular.element('#exportExport1').hide();
                angular.element('#exportExport').show();
                scrollToId(eID);
                angular.element('.DashboardTask').css('margin-top', '0%');
                break;
            case "Due-tomorrow":
                $scope.itemStatus = id;
                $scope.orderItem.DueDate = tomorrow;
                $scope.ordersData = true;
                $scope.OrList = "Due-tomorrow";
                angular.element('#exportable').show();
                angular.element('#exportable1').hide();
                angular.element('#exportExport1').hide();
                angular.element('#exportExport').show();
                scrollToId(eID);
                angular.element('.DashboardTask').css('margin-top', '0%');
                break;
            case "Due-day-after-tomorrow":
                $scope.itemStatus = id;
                $scope.orderItem.DueDate = dayAftertomorrow;
                $scope.ordersData = true;
                $scope.OrList = "Due-day-after-tomorrow";
                angular.element('#exportable').show();
                angular.element('#exportable1').hide();
                angular.element('#exportExport1').hide();
                angular.element('#exportExport').show();
                scrollToId(eID);
                angular.element('.DashboardTask').css('margin-top', '0%');
                break;
        }
    }

    // freelance job wise data get
    if ($cookieStore.get('session_iUserId') && $window.localStorage.session_iUserId && $scope.userRight == 2) {
        rest.path = 'freelanceJob/' + $window.localStorage.session_iUserId;
        rest.get().success(function (data) {
            $scope.jobList = data;
            $scope.freelanceEmpty = jQuery.isEmptyObject(data);
            var allStatus = [];
            var Requested = [];
            var aw = [];
            var ip = [];
            var Delivered = [];
            var Approved = [];
            angular.forEach(data, function (val, i) {
                if (val.item_status) {
                    allStatus.push(val.item_status);
                }

                if (val.item_status == 'Requested') {
                    Requested.push(val.item_status);
                }
                if (val.item_status == 'Assigned-waiting' || val.item_status == 'Waiting') {
                        aw.push(val.item_status);
                }
                if (val.item_status == 'In-progress' || val.item_status == 'Ongoing') {
                    ip.push(val.item_status);
                }
                // Delivered status rename as Completed
                if (val.item_status == 'Delivered' || val.item_status == 'Completed') {
                    Delivered.push(val.item_status);
                }
                // Approved status rename as Invoice Ready
                if (val.item_status == 'Approved' || val.item_status == 'Invoice Ready') {
                    Approved.push(val.item_status);
                }
            });

            //job assign count
            $scope.allCount = allStatus.length;
            $scope.RequestedCount = Requested.length;
            $scope.awCount = aw.length;
            $scope.ipCount = ip.length;
            $scope.Delivered = Delivered.length;
            $scope.Approved = Approved.length;

            // Pagination with ng-repeat filter
            $scope.page = 1;
            //$scope.displayItems = $scope.jobList.slice(0, 3);
            $scope.pageChanged = function () {
                var startPos = ($scope.page - 1) * 10;
                //$scope.displayItems = $scope.totalItems.slice(startPos, startPos + 3);
            };

        }).error(errorCallback);
    }



    //job action like all, request etc
    $scope.highlightSearch = "All";
    $scope.sortJob = function (action, eID) {
        //pagination controls
        // $scope.currentPage = 1;
        // $scope.totalItems = $scope.jobList.length;
        // $scope.entryLimit = 8; // items per page
        // $scope.noOfPages = Math.ceil($scope.totalItems / $scope.entryLimit);
        
        // $scope.$watch('In_progress', function (newVal, oldVal) {
        //     $scope.filtered = filterFilter($scope.jobList, newVal);
        //     $scope.totalItems = $scope.filtered.length;
        //     $scope.noOfPages = Math.ceil($scope.totalItems / $scope.entryLimit);
        //     $scope.currentPage = 1;
        // }, true);

        switch (action) {
            case "All":
                $scope.highlightSearch = "All";
                $route.reload();
                break;
            case "Requested":
                $scope.jobRow = "Requested";
                $scope.highlightSearch = "Requested";
                break;
            case "Waiting":
                $scope.jobRow = "Waiting";
                $scope.highlightSearch = "Waiting";
                break;
            case "In_progress":
                $scope.jobRow = "Ongoing";
                //$scope.jobRow = "In-progress";
                $scope.highlightSearch = "In_progress";
                break;
            case "Delivered":
                $scope.jobRow = "Completed";
                //$scope.jobRow = "Delivered";
                $scope.highlightSearch = "Delivered";
                break;
            case "Approved":
                $scope.jobRow = "Invoice Ready";
                //$scope.jobRow = "Approved";
                $scope.highlightSearch = "Approved";
                break;
            case "Calculated":
                $scope.jobRow = "";
                $scope.highlightSearch = "Calculated";
                break;
        }
        scrollToId(eID);
    }

    $scope.resetFilters = function () {
        // needs to be a function or it won't trigger a $watch
        $scope.search = {};
    };


    $scope.statusAction = function (action, item) {
        if ($.isEmptyObject(item) != true) {
            switch (action) {
                case "Export to excel":
                    if ($scope.userRight == 1) {
                        var blob = new Blob([document.getElementById('exportable').innerHTML], {
                            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                        });
                        saveAs(blob, "project-status-report.xls");
                    } else {
                        var blob = new Blob([document.getElementById('exportableRecord').innerHTML], {
                            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                        });
                        saveAs(blob, "project-Jobs-status-report.xls");
                    }
                    break;
            }
        }
    }
    $scope.statusAction1 = function (action, item) {
        if ($.isEmptyObject(item) != true) {
            switch (action) {
                case "Export to excel1":
                    if ($scope.userRight == 1) {
                        var blob = new Blob([document.getElementById('exportable1').innerHTML], {
                            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                        });
                        saveAs(blob, "project-status-report.xls");
                    } else {
                        var blob = new Blob([document.getElementById('exportable1').innerHTML], {
                            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                        });
                        saveAs(blob, "project-Jobs-status-report.xls");
                    }
                    break;
            }
        }

    }

    $scope.userOpenClose = function (id) {
        if (id == 'open') {
            $scope.userOpen = true;
            $window.localStorage.filemanagerUser = "";
        } else {
            $scope.userOpen = false;
            $window.localStorage.filemanagerUser = "";
        }
    }

    //chart user dashboard
    $scope.jobChart = function (data) {
        var chart = new Highcharts.Chart({
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                type: 'pie',
                renderTo: 'container'
            },
            title: {
                text: '',
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: false
                    },
                    showInLegend: true
                }
            },
            plotOptions: {
                pie: {
                    allowPointSelect: false,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: false,
                    },
                    colors: ['#C581EE', '#67C8FF', '#FFA200', '#FFA200', '#51E039', '#22A61D'],
                    showInLegend: true,
                    center: ['50%', '50%']
                },
            },
            series: [{
                showInLegend: false,
                name: 'Percent',
                colorByPoint: true,
                data: data
            }]
        });
    }

    $scope.sideNav = function () {
        angular.element('#rightMenu').fadeToggle();
    }

    angular.element('#holidaysLoading').css('dispaly', 'block');
    $scope.countryHolidayGet = function () {
        //$scope.countryListHoliday = country;
        $scope.countryListHoliday = ['norway', 'sweden', 'denmark', 'finland'];
        //National Holiay List current date to higher date get
        var currentYear = new Date().getFullYear();

        var upcomming = [];
        var ongoing = [];

        angular.forEach($scope.countryListHoliday, function (val, i) {
            rest.path = "holidayGet/" + val;
            rest.get().success(function (data) {
                angular.forEach(data, function (val, i) {
                    var currentDate = new Date;
                    var holiday = new Date(val[0] + ' ' + currentYear);

                    if (currentDate <= holiday) {
                        var dayMon = val[0].split(' ');
                        var fullDate = dayMon[1] + ' ' + dayMon[0] + ' ' + currentYear;
                        upcomming.push({
                            'date': fullDate,
                            'holidayName': val[2],
                            'holidayStatus': val[3]
                        });
                    } else {
                        var dayMon = val[0].split(' ');
                        var fullDate = dayMon[1] + ' ' + dayMon[0] + ' ' + currentYear;
                        if (val[0]) {
                            ongoing.push({
                                'date': fullDate,
                                'holidayName': val[2],
                                'holidayStatus': val[3]
                            });
                        }
                    }
                });

                $scope.upcommingList = upcomming;
                $scope.ongoingList = ongoing.reverse();
                $scope.upLength = $scope.upcommingList.length;
                $scope.onLength = $scope.ongoingList.length;
            }).error(errorCallback);
            
        })
        //return false;
    }
    $scope.countryHolidayGet();
    $timeout(function () {
        $('#holidaysLoading').addClass('hide');
    }, 200);
    /*if (!$cookieStore.get('session_holidayCountry')) {
        $scope.country = "Bulgaria";
        $scope.countryListHoliday.push({ 'Cname': $scope.country });
        $scope.countryHolidayGet("Bulgaria");
    } else {
        $scope.countryHolidayGet(JSON.parse($cookieStore.get('session_holidayCountry')));
    }*/

    //holiday Status wise show
    $scope.holidayStatus = function (status) {
        if (status == "Upcoming") {
            $timeout(function () {
                angular.element('.holidayTab2').removeClass('holidayTabActive');
                angular.element('.holidayTab1').addClass('holidayTabActive');
            }, 100);
            $scope.holidayShow = false;
        } else {
            angular.element('.holidayTab2').addClass('holidayTabActive');
            angular.element('.holidayTab1').removeClass('holidayTabActive');
            $scope.holidayShow = true;
        }
    }

    $scope.holidayStatus("Upcoming");

    // widget Absent Linguist
    /* function selectWeek(date) {
        return Array(7).fill(new Date(date)).map((el, idx) => 
            new Date(el.setDate(el.getDate() - el.getDay() + idx)).toISOString().split('T')[0] )
    } */
    const up7Days = [...Array(7).keys()].map(index => {
        const date = new Date();
        date.setDate(date.getDate() + index);
        return date.toISOString().split('T')[0];
    });

    $scope.absentLinguistlist = function () {
        if ($cookieStore.get('session_iUserId') != undefined) {
            rest.path = 'user/' + 2;
            rest.get().success(function (data) {
                var absentLngstlist = data.data;
                let currentDatestr = new Date(); 

                currentDatestr = currentDatestr.toISOString().split('T')[0];
                let cDate1 = new Date();
                let cDate = cDate1.setHours(0, 0, 0, 0);

                var absentLngstFilter = absentLngstlist.filter(x => {
                    if(x.is_available){
                        let isAailable = JSON.parse(x.is_available);
                        if(isAailable.length){
                            const isFound = isAailable.filter( dt => {
                                if(Date.parse(dt.dateFrom) >= cDate || Date.parse(dt.dateTO) <= cDate ){
                                    return true
                                }
                            } )
                            x.is_available = JSON.parse(x.is_available);
                            if(isFound.length)
                                return isAailable;
                            //return isAailable.includes(currentDatestr);
                        }
                    }
                });
                $scope.absentLngstlist = absentLngstFilter;
            }).error(errorCallback);
        }
    }
    $scope.absentLinguistlist();

    $scope.absentPopup = function(id){
        const absentRec = $scope.absentLngstlist.filter(x => {
            if(x.iUserId == id){
                return x.is_available
            }
        });
        const absentDateArr = absentRec ? absentRec[0].is_available : [];
        let element = '';
        let div = document.createElement('ul');
        for (let index = 0; index < absentDateArr.length; index++) {
            let dateFrom = moment(absentDateArr[index].dateFrom).format($window.localStorage.getItem('global_dateFormat') );
            var dateTo = moment(absentDateArr[index].dateTo).format($window.localStorage.getItem('global_dateFormat') );
            element = div.innerHTML += "<li> <i class='fa fa-calendar'></i> &nbsp;&nbsp;"+ dateFrom + ' To ' + dateTo +"</li>";
        }
        var dialog = bootbox.dialog({
            title: 'Absent Linguist : '+ absentRec[0].vUserName,
            message: "<div id='absent'>Absent On Date.</div> <br/>" + element,
            size: 'medium',
            buttons: {
                ok: {
                    label: "close",
                    className: 'btn-info',
                }
            }
        });
    }

    setTimeout(() => {
        //const currentDate = today.getFullYear()+'-'+(today.getMonth()+1)+'-0'+today.getDate();
        const currentDatestr = new Date();
        const currentDate = currentDatestr.toISOString().split('T')[0];
        if ($scope.vResourcePosition == 2) {
            $scope.upProjDeliveries = $scope.projectsAll.filter(upProj => upProj.itemDuedate_new > currentDate && upProj.project_manager_id == $window.localStorage.getItem("session_iUserId"));
            //$scope.upJobsDue = $scope.alljobsWidget.filter(upJobs => upJobs.due_date > currentDate && upJobs.job_manager_id == $window.localStorage.getItem("session_iUserId") );
        }
        if ($scope.vResourcePosition == 3) {
            $scope.upProjDeliveries = $scope.projectsAll.filter(upProj => upProj.itemDuedate_new > currentDate && upProj.project_coordinator_id == $window.localStorage.getItem("session_iUserId"));
            //$scope.upJobsDue = $scope.alljobsWidget.filter(upJobs => upJobs.due_date > currentDate && upJobs.project_coordinator_id == $window.localStorage.getItem("session_iUserId") );
        }
        if ($scope.vResourcePosition == 4) {
            $scope.upProjDeliveries = $scope.projectsAll.filter(upProj => upProj.itemDuedate_new > currentDate && upProj.qa_specialist_id == $window.localStorage.getItem("session_iUserId"));
            //$scope.upJobsDue = $scope.alljobsWidget.filter(upJobs => upJobs.due_date > currentDate && upJobs.qa_specialist_id == $window.localStorage.getItem("session_iUserId") );
        }
        
    }, 1500);

    $scope.jobDiscussion = (orderId) => {
        $location.path('discussion/' + orderId);
    }

    $scope.viewProject = (orderId) => {
        $location.path('/viewProject/' + orderId);
    }

    $scope.editProject = function (id) {
        if (id) {
            rest.path = 'order/' + id + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                if (data.userName != null) {
                    $scope.orderdata = data;

                    $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                    $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                    $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                    $window.localStorage.orderNo = $scope.orderdata.order_number;
                    $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                    $window.localStorage.orderID = id;
                    $window.localStorage.iUserId = id;
                    $window.localStorage.userType = 3;
                    $window.localStorage.currentUserName = data.vClientName;
                    $window.localStorage.genfC = 1;

                    //set isNewProject to false
                    $window.localStorage.setItem("isNewProject", "false");

                    $location.path('/general/'+data.order_id);
                    $window.localStorage.orderBlock = 1;
                    /*$timeout(function() {
                        $scope.cancel();
                    },500);*/
                } else {
                    notification('Information not available', 'warning');
                }
            }).error(errorCallback);
        }

    };

    /* Redirect To Project Jobs Section */
    $scope.goTojobDetail = function (id) {
        $location.path('/jobs-detail/' + id);
    }

    $timeout(function () {
        //jQuery.fn.init('.projecttable input[type="search"]').attr( {"placeholder" : " Search", "id":"new-serach", "class":"form-control input-sm rounded"} );
        $(".projecttable #DataTables_Table_0_filter input[type='search']").keyup(function () {
            if ($(this).val().length) {
                $('.projecttable #DataTables_Table_0_filter .searchicn').addClass("sicon1")
            } else {
                $('.projecttable #DataTables_Table_0_filter .searchicn').removeClass("sicon1")
            }
        });
        $(".projecttable #DataTables_Table_1_filter input[type='search']").keyup(function () {
            if ($(this).val().length) {
                $('.projecttable #DataTables_Table_1_filter .searchicn').addClass("sicon2")
            } else {
                $('.projecttable #DataTables_Table_1_filter .searchicn').removeClass("sicon2")
            }
        });
        $(".projecttable #DataTables_Table_2_filter input[type='search']").keyup(function () {
            if ($(this).val().length) {
                $('.projecttable #DataTables_Table_2_filter .searchicn').addClass("sicon3")
            } else {
                $('.projecttable #DataTables_Table_2_filter .searchicn').removeClass("sicon3")
            }
        });
        $(".projecttable #DataTables_Table_3_filter input[type='search']").keyup(function () {
            if ($(this).val().length) {
                $('.projecttable #DataTables_Table_3_filter .searchicn').addClass("sicon4")
            } else {
                $('.projecttable #DataTables_Table_3_filter .searchicn').removeClass("sicon4")
            }
        });
        $(".projecttable #DataTables_Table_4_filter input[type='search']").keyup(function () {
            if ($(this).val().length) {
                $('.projecttable #DataTables_Table_4_filter .searchicn').addClass("sicon5")
            } else {
                $('.projecttable #DataTables_Table_4_filter .searchicn').removeClass("sicon5")
            }
        });
        $(".projecttable #DataTables_Table_5_filter input[type='search']").keyup(function () {
            if ($(this).val().length) {
                $('.projecttable #DataTables_Table_5_filter .searchicn').addClass("sicon6")
            } else {
                $('.projecttable #DataTables_Table_5_filter .searchicn').removeClass("sicon6")
            }
        });
        $(".projecttable #DataTables_Table_6_filter input[type='search']").keyup(function () {
            if ($(this).val().length) {
                $('.projecttable #DataTables_Table_6_filter .searchicn').addClass("sicon7")
            } else {
                $('.projecttable #DataTables_Table_6_filter .searchicn').removeClass("sicon7")
            }
        });
    }, 500);

    /*$scope.dtOptions = {
      "pageLength"  : 100,
      'dom': 'frtilp',
      "oLanguage": {
          "sSearch": ' _INPUT_' //search
        },
      'scrollX': true,  
      'scrolly': true,  
    };*/
    $scope.dtOptions = DTOptionsBuilder.newOptions().
        //withOption('scrollY', '100%').
        //withOption('scrollX', '100%').
        withOption('responsive', true).
        withOption('oLanguage', {
            "sSearch": '<i class="fa fa-search searchicn" aria-hidden="true"></i> _INPUT_ ',
            "sSearchPlaceholder": "Search",
        }).
        withOption('pageLength', 100).
        // withOption('scrollCollapse', true).
        withOption('dom', 'frtilp');

    $scope.dtOptionsJob = DTOptionsBuilder.newOptions().
        withOption('responsive', true).
        withOption('oLanguage', {
            "sSearch": '<i class="fa fa-search searchicn" aria-hidden="true"></i> _INPUT_ ',
            "sSearchPlaceholder": "Search",
        }).
        withOption('columnDefs', {
            "defaultContent": "-",
            "targets": "_all"
        }).
        //withOption('pageLength', 25).
        // withOption('scrollCollapse', true).
        //withOption('retrieve', true).
        withOption('dom', 'tfrilp');

    // $scope.dtOptionsJob2 = DTOptionsBuilder.newOptions().
    //     withOption('responsive', true).
    //     withOption('pageLength', 25);

    $scope.modalOpen = false;
    // After Linguist login
    $scope.projectJobdetail = function (jobId) {
        scrollBodyToTop();
        //$location.path('/job-summery-details/' + id);
        $routeParams.id = jobId;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/jobDetailPopup.html',
            controller: 'projectjobDetailPopupController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });

        modalInstance.opened.then(function () {
            $scope.modalOpen = true;
        });

        // we want to update state whether the modal closed or was dismissed,
        // so use finally to handle both resolved and rejected promises.
        modalInstance.result.finally(function (selectedItem) {
            $scope.modalOpen = false;
        });
    
    }
    
    // on edit/update stay on same tabs
    $scope.changeProjectTabs = function(className){
        $window.localStorage.setItem("projectActiveTab", className);
    }
    $scope.lastProjectTabs = function(){
        let projectActiveTab = $window.localStorage.getItem("projectActiveTab");
        $scope.changeProjectTabs(projectActiveTab);
        if(!projectActiveTab || projectActiveTab != 'due-today' )
            angular.element('.'+projectActiveTab+' > a ').triggerHandler('click');
        else    
            $window.localStorage.setItem("projectActiveTab", '');
    }    
    setTimeout(() => {
        let getprojectActiveTab = $window.localStorage.getItem("projectActiveTab");
        if(getprojectActiveTab)
            $scope.lastProjectTabs();
            setTimeout( () => {
                //$window.localStorage.setItem("projectActiveTab", '');
            },100)
    }, 1500);
    // END - edit/update project scoop stay on same tabs


}).controller('usertypeController', function ($scope, $log, $location, rest, $window, $rootScope, $route, $routeParams) {
    rest.path = 'usertype';
    rest.get().success(function (data) {
        $scope.usertype = data;
        $scope.usertypeEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.saveType = function (formId) {
        if (angular.element("#" + formId).valid()) {
            rest.path = 'saveusertype';
            rest.post($scope.type).success(function (data) {
                notification('Record inserted successfully', 'success');
                $route.reload();
            }).error(errorCallback);
        }
    };

    $scope.updateType = function (formId, id) {
        if (angular.element("#" + formId).valid()) {
            rest.path = 'updateusertype/' + id;
            rest.post($scope.type).success(function (data) {
                notification('Record updeted successfully', 'success');
                $route.reload();
            }).error(errorCallback);
        };
    }

    $scope.getType = function (id, eID) {
        rest.path = 'usertype/' + id;
        rest.get().success(function (data) {
            $scope.type = data;
            $scope.type.iResourceType = $scope.type.iResourceType.toString();
        }).error(errorCallback);
        scrollToTop();
    }

    $scope.deleteType = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteType/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };


}).controller('knowledgeCalendarController', function ($rootScope, $scope, $log, $location, rest, $window, $cookieStore, $timeout, $route, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    $scope.dateMatch = function (startD, endD) {
        var start = originalDateFormatNew(startD);
        var end = originalDateFormatNew(endD);

        if (startD != undefined && endD != undefined || start && end) {
            start = moment(start).format('YYYY-MM-DD');
            end = moment(end).format('YYYY-MM-DD');
            if (end < start) {
                $scope.calendar.event_enddate = "";
                notification('Lowest date not allowed', "warning");
                angular.element('#endDate').val('');
            }
        }
    }

    //get all event
    rest.path = "knowledgeEventGetAll";
    rest.get().success(function (data) {
        $scope.eventList = data;
        angular.forEach($scope.eventList, function (val, i) {
            val.event_enddate = moment(val.event_enddate).format($window.localStorage.getItem('global_dateFormat'));
            val.event_startdate = moment(val.event_startdate).format($window.localStorage.getItem('global_dateFormat'));
        });
    });

    //save and update event
    $scope.save = function (formId) {
        if (angular.element('#' + formId).valid()) {
            $scope.calendar.event_startdate = angular.element('#StartDate').val();
            $scope.calendar.event_enddate = angular.element('#endDate').val();
            var start = originalDateFormatNew($scope.calendar.event_startdate);
            var end = originalDateFormatNew($scope.calendar.event_enddate);
            if (start != undefined && end != undefined) {
                start = moment(start).format('YYYY-MM-DD');
                end = moment(end).format('YYYY-MM-DD');
                if (end < start) {
                    $scope.calendar.event_enddate = "";
                    notification('Lowest date not allowed', "warning");
                    angular.element('#endDate').val('');
                    return false;
                }
            }
            var startTime = '00:00:00'
            var endTime = '23:59:59'

            if ($scope.calendar.event_id) {
                $routeParams.id = $scope.calendar.event_id;
                rest.path = "knowledgeEventUpdate";

                var dtSeparator = window.localStorage.getItem('dtSeparator');
                if (window.localStorage.getItem('global_dateFormat') == 'DD' + dtSeparator + 'MM' + dtSeparator + 'YYYY') {
                    $scope.calendar.event_startdate = originalDateFormatNew($scope.calendar.event_startdate);
                    $scope.calendar.event_startdate = $scope.calendar.event_startdate + ' ' + startTime;

                    $scope.calendar.event_enddate = originalDateFormatNew($scope.calendar.event_enddate);
                    $scope.calendar.event_enddate = $scope.calendar.event_enddate + ' ' + endTime;
                } else {
                    $scope.calendar.event_startdate = moment($scope.calendar.event_startdate).format('YYYY-MM-DD');
                    $scope.calendar.event_startdate = $scope.calendar.event_startdate + ' ' + startTime;

                    $scope.calendar.event_enddate = moment($scope.calendar.event_enddate).format('YYYY-MM-DD');
                    $scope.calendar.event_enddate = $scope.calendar.event_enddate + ' ' + endTime;
                }

                rest.put($scope.calendar).success(function (data) {
                    notification('Record updeted successfully', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                var dtSeparator = window.localStorage.getItem('dtSeparator');
                if (window.localStorage.getItem('global_dateFormat') == 'DD' + dtSeparator + 'MM' + dtSeparator + 'YYYY') {
                    $scope.calendar.event_startdate = originalDateFormatNew($scope.calendar.event_startdate);
                    $scope.calendar.event_startdate = $scope.calendar.event_startdate + ' ' + startTime;

                    $scope.calendar.event_enddate = originalDateFormatNew($scope.calendar.event_enddate);
                    $scope.calendar.event_enddate = $scope.calendar.event_enddate + ' ' + endTime;
                } else {
                    $scope.calendar.event_startdate = moment($scope.calendar.event_startdate).format('YYYY-MM-DD');
                    $scope.calendar.event_startdate = $scope.calendar.event_startdate + ' ' + startTime;

                    $scope.calendar.event_enddate = moment($scope.calendar.event_enddate).format('YYYY-MM-DD');
                    $scope.calendar.event_enddate = $scope.calendar.event_enddate + ' ' + endTime;
                }
                rest.path = "knowledgeEventSave";
                rest.post($scope.calendar).success(function (data) {
                    notification('Record inserted successfully', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    //get selected event
    $scope.getEvent = function (id, eID) {
        rest.path = "knowledgeEventGetOne/" + id;
        rest.get().success(function (data) {
            $scope.calendar = data;
            /*$scope.calendar.event_startdate = dateFormat(new Date(data.event_startdate));
            $scope.calendar.event_enddate = dateFormat(new Date(data.event_enddate));*/

            $scope.calendar.event_startdate = moment($scope.calendar.event_startdate).format($window.localStorage.getItem('global_dateFormat'));
            $scope.calendar.event_enddate = moment($scope.calendar.event_enddate).format($window.localStorage.getItem('global_dateFormat'));
        });
        scrollToTop();
    }

    //delete event
    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = "knowledgeEventDelete/" + id;
                rest.delete().success(function (data) {
                    notification('Record deleted successfully', 'success');
                    $route.reload();
                })
            }
        });
    }

}).controller('jobSummeryDetailsController', function ($interval, $uibModalInstance, $scope, $window, $compile, $timeout, $uibModal, $log, rest, $rootScope, $location, $cookieStore, $route, $routeParams, $q) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.setItem("parentId", " ");
    $scope.DetailId = $window.localStorage.projectJobChainOrderId;
    
    $window.localStorage.jobfolderId = $routeParams.id;
    $window.localStorage.pId = " ";
    $window.localStorage.jobstatusName = " ";
    $scope.dateFormatGlobal = $window.localStorage.getItem('global_dateFormat');

    if ($scope.DetailId) {
        $scope.priceList = [];
        rest.path = 'customerpriceAll/' + 2;  //2 for external userID
        rest.get().success(function (data) {
            $scope.priceList = data;
        });
    }

    $scope.exChildPriceArr = [];
    // Get PriceList for client
    $scope.scoopSpecializationArr = '';
    $scope.customerpriceAll = [];
    $scope.exCustPriceAll = function (data) {
        var deferred = $q.defer();
        rest.path = 'customerpriceAll/' + 2;
        rest.get().success(function (data) {
            var lpData = data;
            $scope.customerpriceAll = data;
            $scope.clientpriceList = data.filter( function (lp) {
                if(lp.price_basis)
                    lp.price_basis = JSON.parse(lp.price_basis)
                if(lp.price_language)
                    lp.price_language = JSON.parse(lp.price_language)    
                if(lp.specialization)
                    lp.specialization = (lp.specialization.toString()).split(',');     
                return lp;  
            });
            deferred.resolve(lpData);
        }).error(function () {
            deferred.reject();
        });

        return deferred.promise;
    };


    $scope.poTempate = false;
    $scope.sendPO = function(type){
        let poFilenamePdf = $scope.jobdetail.po_number ? 'PO_' +$scope.jobdetail.po_number +'.pdf' : 'purchase_order.pdf'; 
        $scope.poTempate = true;
        if(type == 'Download'){
            setTimeout(() => {
                kendo.drawing.drawDOM($("#downloadPO")).then(function (group) {
                    //group.options.set("font", "8px DejaVu Sans");
                    kendo.drawing.pdf.saveAs(group, poFilenamePdf);
                });
                setTimeout(() => {
                    $scope.poTempate = false;  
                }, 3000); 
            }, 500);
            
        }
        if(type == 'SendOrder'){    
            $scope.poTempate = true;
            setTimeout(() => {
                kendo.drawing.drawDOM($("#downloadPO"))
                    .then(function (group) {
                        // Render the result as a PDF file
                        return kendo.drawing.exportPDF(group, {
                            //paperSize: "auto",
                        });
                    })
                    .done(function (data) {
                        $scope.invoicemailDetail = {
                            'pdfData': data,
                            'purchaseOrderNo': $scope.purchaseDetail.purchaseOrderNo,
                            'resourceEmail': $scope.resourceDetail.vEmailAddress,
                            'poFilenamePdf': poFilenamePdf,
                            'resourceName': $scope.resourceDetail.vFirstName + $scope.resourceDetail.vLastName
                        };
                        rest.path = 'sendPurchaseOrderLinguist';
                        rest.post($scope.invoicemailDetail).success(function (data) {
                            if (data.status == 200) {
                                notification('Purchase order has been sent successfully', 'success');
                                $scope.poTempate = false; 
                            }
                        }).error(errorCallback);

                    });
                }, 500);
        }        
        // setTimeout(() => {
        //     $scope.poTempate = false;  
        // }, 5000);    
    }    

    $scope.childPrice = [];
    $scope.childPriceAll = function (data) {        
        var deferredCh = $q.defer();
        rest.path = 'childPriceitemget';
        rest.get().success(function (data) {
            $scope.childPrice = data;
            $scope.exChildPriceArr = [];
            deferredCh.resolve($scope.childPrice);
        }).error( function(){
            deferredCh.reject();
        })
        return deferredCh.promise;
    }    

    // Linguist Price list fetching
    $scope.changeLinguistPrice = function(resourceId, specializationArr, langPair){
        if(resourceId > 0){
            let clientPricelist = $scope.customerpriceAll.filter((e) => e.resource_id == resourceId )
            if(clientPricelist){
                angular.forEach($scope.exChildPriceArr, function (val, i) {
                    $scope.exChildPriceArr[i].rate = 0;
                    angular.forEach(clientPricelist, function (val2, i2) {
                        val2.price_basis.find(x => {
                                // if(val.child_price_id == x.childPriceId){
                                //     if(val.child_price_id == x.childPriceId){
                                //         if(val.itemId == item_id){
                                //             $scope.exChildPriceArr[i].rate = x.basePrice; 
                                //         }
                                //     }
                                //     return x;
                                // }
                                if(val.child_price_id == x.childPriceId){
                                    if(specializationArr)
                                        var spclFound = specializationArr.some(r => (val2.specialization).indexOf(r) >= 0)
                                    else
                                        var spclFound = false; 
                                    const lngPairFound = (val2.price_language).some(r => r.languagePrice == langPair)
                                    if(val.child_price_id == x.childPriceId && spclFound && lngPairFound){
                                        $scope.exChildPriceArr[i].rate = x.basePrice;  
                                    }
                                    return x;
                                }
                            });    
                    });    
                });
            }
        }else{
            angular.forEach($scope.exChildPriceArr, function(val, i) {
                $scope.exChildPriceArr[i].rate = 0;
                // angular.forEach($scope.clientpriceList, function (val2, i2) {
                //     val2.price_basis.find(x => {
                //         if(val.child_price_id == x.childPriceId){
                //             if(specializationArr)
                //                 var spclFound = specializationArr.some(r => (val2.specialization).indexOf(r) >= 0)
                //             else
                //                 var spclFound = false; 
                //             const lngPairFound = (val2.price_language).some(r => r.languagePrice == langPair)
                //             if(val.child_price_id == x.childPriceId && spclFound && lngPairFound){
                //                 $scope.exChildPriceArr[i].rate = x.basePrice;  
                //             }
                //             return x;
                //         }
                //     });    
                // });    
                
            });
        }
    }
    // Resource detail API function
    $scope.purchaseDetail = [];
    $scope.purchaseDetail.purchaseOrderDate = new Date();
    $scope.resourceCity = $scope.resourceCountry = $scope.resourceZipcode = $scope.resourceState = $scope.resourceVatinfo = '';
    $scope.resourceDetail = [];
    $scope.resourceDetailFn = function(resID){
        $scope.purchaseDetail.purchaseOrderNo = 'S-' + pad($scope.jobdetail.job_summmeryId, 7);
        if(resID){
            rest.path = 'viewExternalget/' + resID;
            rest.get().success(function (data) {
                $scope.resourceDetail = data;
            if ($scope.resourceDetail.address1Detail) {
                let resourceAddDetail = JSON.parse($scope.resourceDetail.address1Detail);
                angular.forEach(resourceAddDetail, function (resourceAddress, i) {
                    if (resourceAddress.id == 'address1_locality')
                        $scope.resourceCity = resourceAddress.value;
                    if (resourceAddress.id == 'address1_country')
                        $scope.resourceCountry = resourceAddress.value;
                    if (resourceAddress.id == 'address1_postal_code')
                        $scope.resourceZipcode = resourceAddress.value;
                })
            }
            }).error(errorCallback);

            rest.path = "getUserDataById/" + resID;
            rest.get().success(function (dataUser) {
                if(dataUser.userPaymentData){
                    if(dataUser.userPaymentData.vPaymentInfo){
                     var vPaymentInfo = JSON.parse(dataUser.userPaymentData.vPaymentInfo)
                     $scope.resourceVatinfo = vPaymentInfo.tax_id;
                    }
                }
            });
        }    
    }

    $scope.csvProgress = true;
    if ($scope.DetailId) {
        rest.path = 'jobSummeryDetailsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.jobdetail = data[0];
            $scope.jobdetail.ItemLanguage = '';
            var srcLang = 'English (US)';
            var trgLang = 'English (US)';
            rest.path = 'jobItemQuantityget/' + data[0].order_id + '/' + data[0].item_id;
            rest.get().success(function (data) {
                var sourceData = JSON.parse(data.source_lang);
                var targetData = JSON.parse(data.target_lang);
                srcLang = sourceData.sourceLang;
                trgLang = targetData.sourceLang;
            });

            //var srcLang = JSON.parse($scope.jobdetail.ItemLanguage.split('>')[0]).sourceLang;
            //var trgLang = JSON.parse($scope.jobdetail.ItemLanguage.split('>')[1]).sourceLang;
            $scope.jobdetail.ItemLanguage = srcLang + ' > ' + trgLang;
            $scope.dueDate = $scope.jobdetail.due_date;
            $scope.jobdetail.due_date = moment($scope.jobdetail.due_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');

            if ($scope.jobdetail.price) {
                //$scope.itemPriceUni = JSON.parse($scope.jobdetail.price);
                $scope.itemPriceUni[$scope.jobdetail.job_summmeryId] = JSON.parse($scope.jobdetail.price);
                for (var j = 0; j < $scope.itemPriceUni[$scope.jobdetail.job_summmeryId].length; j++) {
                    $scope.itemPriceUni[$scope.jobdetail.job_summmeryId][j].itemTotal = $scope.itemPriceUni[$scope.jobdetail.job_summmeryId][j].itemTotal ? numberFormatComma($scope.itemPriceUni[$scope.jobdetail.job_summmeryId][j].itemTotal) : 0;
                }
            }
            if ($scope.jobdetail.total_price.length == 0) {
                angular.element('#totalItemPrice').text('0.0');
            } else {
                //angular.element('#totalItemPrice').text(data.total_price);
            }
            
            $scope.clientCurrency = $scope.jobdetail.freelance_currency ? $scope.jobdetail.freelance_currency.split(',')[0] : 'EUR'; 

            /*if (isNaN(Date.parse($scope.jobdetail.due_date))) {
                $timeout(function() {
                    var date = new Date();
                    var currentdateT;
                    currentdateT = pad(date.getDate(), 2) + '.' + pad((date.getMonth() + 1), 2) + '.' + date.getFullYear()

                        +
                        ' ' + date.getHours() + ':' + date.getMinutes();
                    $scope.jobdetail.due_date = currentdateT;
                }, 300);
            }*/
            // service - 
            $scope.resourceDetailFn($scope.jobdetail.resource);
            
            $scope.lngPriceList = [];
            var resource_id_csv = $scope.jobdetail.resource;
            $scope.isResourceChange = 0;
            $scope.resourceChange = function (resID) {
                if (resID) {
                    const res_id = resID.includes(',') ? resID.substring(resID.indexOf(',') + 1) : resID;
                    
                    // To get resource detail (Purchase order)
                    $scope.resourceDetailFn(res_id);
            
                    resource_id_csv = res_id;
                    $scope.isResourceChange = 1;
                    //var priceList = $scope.priceList;
                    var priceList = $scope.priceList.filter(function (priceList) { return priceList.resource_id == resource_id_csv; });
                    //var projSpecialization = $scope.jobdetail.proj_specialization.toString().split(',');
                    var projSpecialization = $scope.jobdetail.proj_specialization.toString().split(',');
                    
                    $scope.changeLinguistPrice(res_id, projSpecialization, $scope.jobdetail.ItemLanguage);
                    //var newPriceList = priceList.filter(function (priceList) { const isSpclzExist = projSpecialization.indexOf(priceList.specialization.toString()); return priceList.resource_id == resource_id_csv && isSpclzExist != -1; });
                    var newPriceList = priceList.filter(function (priceList) { 
                        if(!priceList.specialization)
                            return false;
                        var priceSpc = priceList.specialization.toString().split(',');
                        return findCommonArrEle(projSpecialization, priceSpc)
                    });   
                    //var newPriceList = priceList.filter(function(priceList) { const isSpclzExist = projSpecialization.includes(priceList.specialization); console.log('isSpclzExist',isSpclzExist);  return priceList.resource_id == resource_id_csv && isSpclzExist; });

                    $scope.lngPriceList = [];
        
                    angular.forEach(newPriceList, function (val, i) {
                        var langList = JSON.parse(val.price_language);
                        const price = JSON.parse(val.price_basis);
                        angular.forEach(langList, function (val2, i2) {
                            //$scope.jobdetail.ItemLanguage = angular.element('#sourceLang').text;
                            if ($scope.jobdetail.ItemLanguage == val2.languagePrice) {
                                angular.forEach(price, function (val3, i3) {
                                    if (val3.basePriceUnit.includes($scope.jobdetail.project_type_name))
                                        $scope.lngPriceList.push(val3);
                                });
                            }
                        });
                    });
                    var lngPriceList = $scope.lngPriceList;
                }


            }
            setTimeout(() => {
                // function csvResorce() {
                //var priceList = $scope.priceList;
                var priceList = $scope.priceList.filter(function (priceList) { return priceList.resource_id == resource_id_csv; });
                //var projSpecialization = $scope.jobdetail.proj_specialization.split(',');
                var projSpecialization = $scope.jobdetail.proj_specialization.toString().split(',');
                
                //var newPriceList = priceList.filter(function (priceList) { const isSpclzExist = projSpecialization.indexOf(priceList.specialization.toString()); return priceList.resource_id == resource_id_csv && isSpclzExist != -1; });
                var newPriceList = priceList.filter(function (priceList) { 
                        if(!priceList.specialization)
                            return false;
                        var priceSpc = priceList.specialization.toString().split(',');
                        return findCommonArrEle(projSpecialization, priceSpc)
                    });
                //var projSpecialization = $scope.jobdetail.proj_specialization.toString();
                //var newPriceList = priceList.filter(function(priceList) { const isSpclzExist = projSpecialization.includes(priceList.specialization.toString()); return priceList.resource_id == resource_id_csv && isSpclzExist; });
                //$scope.lngPriceList = [];
                angular.forEach(newPriceList, function (val, i) {
                    var langList = JSON.parse(val.price_language);
                    const price = JSON.parse(val.price_basis);
                    angular.forEach(langList, function (val2, i2) {
                        //$scope.jobdetail.ItemLanguage = angular.element('#sourceLang').text;
                        if ($scope.jobdetail.ItemLanguage == val2.languagePrice) {
                            angular.forEach(price, function (val3, i3) {
                                if (val3.basePriceUnit.includes($scope.jobdetail.project_type_name))
                                    $scope.lngPriceList.push(val3);
                            });
                        }
                    });
                });
                var lngPriceList = $scope.lngPriceList;

                // import CSV
                $scope.csvData = [];
                var csvID = $scope.jobdetail.job_summmeryId;
                var percent = 0;
                var csvColmnArr = ['Repetition', '101%', '100%', '95%-99%', '85%-94%', '75%-84%', '50%-74%', 'No match', '(New)', 'New'];
                $scope.getFile = function (files) {
                    if (!files)
                        $scope.csvProgress = false;
                    $scope.csvFilename = files.name;
                    $scope.csvmatchMsg = false;
                    Papa.parse(files, {
                        header: false,
                        //preview: 5,
                        //worker:true,
                        download: true,
                        delimiter: "',','\t',';'",
                        complete: function (results, files, err) {
                            var csv = results.data;
                            if (csv[7]["Repetition"])
                                var numindex = 0;
                            $scope.csvData = [];
                            var gtotal = 0;
                            var Isnumpattern = /^[0-9,\.\? ]+$/;
                            var isError = false;
                            lngPriceList = $scope.lngPriceList;
                            angular.forEach(csv, function (val, i) {
                                //if(csvColmnArr.includes(val[0]) ){
                                if (i > 8 && Isnumpattern.test(val[2])) {
                                    //var lngPriceListFilt = lngPriceList.filter(function(lngPriceList) { const lngBasePriceUnit = lngPriceList.basePriceUnit.replace($scope.jobdetail.project_type + ' - ',''); return lngBasePriceUnit == val[0]; });
                                    var isPercentVal = 0;
                                    if (val[0].match(/%.*%/)) { // Check if there are 2 % sign remove first one to compare
                                        isPercentVal = val[0].replace('%', ''); // Remove the first one
                                    }
                                    val[0] = isPercentVal ? isPercentVal : val[0];
                                    var lngPriceListFilt = lngPriceList.filter(function (lngPriceList) { return lngPriceList.basePriceUnit.includes(val[0]) || (val[0] == 'No match' && lngPriceList.basePriceUnit.includes('(New)')); });

                                    var itemVal = (lngPriceListFilt.length > 0) ? lngPriceListFilt[0].basePrice : 0;
                                    var pricelistData = (lngPriceListFilt.length > 0) ? lngPriceListFilt[0].basePriceUnit : '';
                                    if (itemVal) {
                                        if (val)
                                            var total = itemVal * val[2];
                                        var matchStr = val[0] != 'No match' ? ' Match' : '';
                                        var obj = {
                                            'id': numindex,
                                            'quantity': val[2],
                                            //'pricelist': 'Words ' + $scope.jobdetail.project_type_name + ' ' + val[0] + matchStr,
                                            'pricelist': pricelistData,
                                            'itemPrice': itemVal ? numberFormatComma(itemVal) : 0,
                                            'itemTotal': total ? numberFormatComma(total) : 0,
                                        };
                                        $scope.csvData.push(obj);
                                        if (total)
                                            gtotal += total;
                                        numindex++;
                                    }
                                } else {
                                    //if(i!=0)
                                    //isError = true; 
                                }
                                percent += Math.round(100 / (results.data.length));
                                $(".progress-bar").width(percent + '%')
                                if (percent >= 97)
                                    $(".progress-bar").width('100%')

                                if (i == results.data.length - 1) {
                                    setTimeout(() => {
                                        $scope.csvProgress = false;
                                    }, 1000);
                                    setTimeout(() => {
                                        $scope.csvProgress = true;
                                        percent = 0;
                                        $(".progress-bar").width('0%')
                                        $('#file-input').val('');
                                    }, 2000)

                                    $scope.csvmatchMsg = ($scope.csvData.length <= 0) ? true : false;
                                    setTimeout(() => {
                                        $scope.csvmatchMsg = false;
                                    }, 7000);
                                }

                            });
                            // notification csv first column will be quantity
                            // if(isError == true){
                            //     notification('Please upload valid CSV', 'warning');
                            //     $scope.csvProgress = false;
                            // }  
                            setTimeout(() => {
                                /* $scope.csvProgress = false;
                                percent = 0; */
                            }, 10000);

                            var itmpr = angular.element('#totalItemPrice').text();
                            itmpr = itmpr ? numberFormatCommaToPoint(itmpr) : 0;
                            //var mgTotal = (parseFloat(itmpr)+parseFloat(gtotal);
                            //angular.element('#totalItemPrice').text(mgTotal);
                            //$scope.newtotal_price = gtotal;
                            //$scope.itemPriceUni[csvID] = $scope.csvData;
                            if ($scope.itemPriceUni.length > 0) {
                                $scope.itemPriceUni[csvID].push.apply($scope.itemPriceUni[csvID], $scope.csvData)
                            } else {
                                $scope.itemPriceUni[csvID] = $scope.csvData;
                                //$scope.itemPriceUni[csvID].push($scope.csvData)
                            }
                            $scope.jobdetail.total_price = parseFloat(itmpr) + parseFloat(gtotal);
                            //$scope.csvData = [];      
                        }
                    });
                };

                //}
                //csvResorce();

            }, 2500);
            if ($scope.isResourceChange == 1) {
                //csvResorce();
            }

            $cookieStore.put('editJobact', data[0]);
            if (data[0].order_id) {
                rest.path = 'jobItemQuantityget/' + data[0].order_id + '/' + $scope.jobdetail.item_id;
                rest.get().success(function (data) {
                    if (data) {
                        rest.path = 'getClientCurrency/' + data.contact_person;
                        rest.get().success(function (data) {
                            //$scope.clientCurrency = data.client_currency.split(',')[0];
                            $scope.clientCurrencySymbole = data.client_currency.split(',')[1];
                        })
                        $scope.totalPrice = data.total_amount;
                        if (data.price) {
                            $scope.itemList = JSON.parse(data.price);
                        } else {
                            $scope.itemList = "";
                        }
                        $scope.pricelistJobEmpty = jQuery.isEmptyObject($scope.itemList);
                    }
                })
            }
            $timeout(function () {
                $("#scoopId > [value=" + $scope.jobdetail.item_id + "]").attr("selected", "true");
            }, 600);

        }).error(errorCallback);

        rest.path = 'jobitemsGet/' + $scope.DetailId;
        rest.get().success(function (data) {
            $scope.jobitList = data;
        });
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

    
    $scope.jumptoItem = function () {
        $window.localStorage.orderID = $scope.DetailId;
        //set isNewProject to false
        $window.localStorage.setItem("isNewProject", "false");
        const prevUrl = $scope.DetailId ? '/'+$scope.DetailId : '';
        $location.path('/items'+prevUrl);
        $scope.cancel();
    }

    $scope.backtojobSummery = function () {
        $location.path('jobs-detail/' + $scope.DetailId);
    }

    $scope.jobsumResource = function (resourceName, jobSummeryId) {
        rest.path = 'jobsummeryResourceMail/' + resourceName + '/' + jobSummeryId;
        rest.get().success(function (data) {
            notification('Mail send successfully', 'success');
            $route.reload();
        }).error(errorCallback);
    }

    //dispaly jobdetails data
    if ($routeParams.id) {
        //jobsummeryGet
        rest.path = 'jobSummeryDetailsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.jobdetail = data[0];
            
            //$scope.jobdetail.due_date = moment($scope.jobdetail.due_date).format($scope.dateFormatGlobal+' '+'HH:mm');
            var due_timeval = $scope.jobdetail.due_date.split(" ")[1];
            var due_timeval = due_timeval.substring(0, 5);
            $scope.jobdetail.due_date = moment($scope.jobdetail.due_date).format($window.localStorage.getItem('global_dateFormat'));
            angular.element('#due_time').val(due_timeval);
            if ($scope.jobdetail.due_date == '0000-00-00 00:00:00' || $scope.jobdetail.due_date == 'Invalid date') {
                angular.element('#duedate').val('');
                angular.element('#due_time').val('');
            }

            /*var time = $scope.jobdetail.due_date.split(' ')[1].split(':');
            time = time[0] + ':' + time[1];
            $timeout(function() {
                $scope.jobdetail.due_date = $scope.jobdetail.due_date.split(' ')[0].split('-').reverse().join('.') + ' ' + time;
            }, 100);*/
            $scope.jobdetail.ItemLanguage = '';
            $scope.promiseItemLang = function (res) {        
                var deferredIl = $q.defer();
                rest.path = 'jobItemQuantityget/' + data[0].order_id + '/' + data[0].item_id;
                rest.get().success(function (data) {
                    
                    var sourceData = JSON.parse(data.source_lang);
                    var targetData = JSON.parse(data.target_lang);
                    var srcLang = sourceData.sourceLang;
                    var trgLang = targetData.sourceLang;

                    var srcLang = srcLang ? srcLang : '';
                    var trgLang = trgLang ? trgLang : '';

                    $scope.jobdetail.ItemLanguage = srcLang + ' > ' + trgLang;
                    deferredIl.resolve($scope.jobdetail.ItemLanguage);
                }).error( function(){
                    deferredIl.reject();
                })
                return deferredIl.promise;
            }

            
            rest.path = 'getOrderSingle/' + data[0].order_id ;
            rest.get().success(function (data) {
                //$scope.jobdetail.genSpecialization = data.specialization;
                $scope.scoopSpecializationArr = (data.specialization.toString()).split(',');
            });
            //var srcLang = JSON.parse($scope.jobdetail.ItemLanguage.split('>')[0]).sourceLang;
            //var trgLang = JSON.parse($scope.jobdetail.ItemLanguage.split('>')[1]).sourceLang;
            //$scope.jobdetail.ItemLanguage = srcLang + ' > ' + trgLang; 
            /*if (isNaN(Date.parse($scope.jobdetail.due_date))) {
                $timeout(function() {
                    var date = new Date();
                    var currentdateT;
                    currentdateT = pad(date.getDate(), 2) + '.' + pad((date.getMonth() + 1), 2) + '.' + date.getFullYear() +
                        ' ' + date.getHours() + ':' + date.getMinutes();
                    $scope.jobdetail.due_date = currentdateT;
                }, 300);
            }*/
            if ($scope.jobdetail.work_instruction) {
                $scope.wrInstruct = JSON.parse($scope.jobdetail.work_instruction);
            }

            //$scope.jobdetail.ItemLanguage = data[0].ItemLanguage;
            $scope.jobdetail.created_date = data[0].created_date;
            //angular.element('#itemStatus').select2('val', data[0].item_status);
            angular.element('#contactPerson').select2('val', data[0].contact_person);
            angular.element('#resources').select2('val', data[0].resource);

            //count file
            if (data) {
                rest.path = 'filefolderstget/' + data[0].fmanager_id + '/' + $routeParams.id;
                rest.get().success(function (data) {
                    var sourceFile = [];
                    var targetFile = [];
                    angular.element('.sourceC').text(data.source);
                    angular.element('.targteC').text(data.target);
                }).error(errorCallback);
            }
            if ($scope.jobdetail.master_job_id) {
                rest.path = "selectWorkInstruction/" + $scope.jobdetail.master_job_id;
                rest.get().success(function (data) {
                    var cont = [];
                    var obj = [];
                    angular.forEach(data, function (val, i) {
                        var obj = {
                            'id': val.w_id + ',' + val.w_source,
                            'text': val.w_source
                        };
                        cont.push(obj);
                    });
                    angular.element('#work_instruction').select2({
                        allowClear: true,
                        data: cont
                    });
                })
            }
            if ($scope.jobdetail.master_job_id) {
                rest.path = "selectWorkInstructs";
                rest.get().success(function (data) {
                    var cont = [];
                    var obj = [];
                    angular.forEach(data, function (val, i) {
                        var obj = {
                            'id': val.id + ',' + val.instruct_name,
                            'text': val.instruct_name
                        };
                        cont.push(obj);
                    });
                    angular.element('#work_instructs').select2({
                        allowClear: true,
                        data: cont
                    });
                })
            }
            $cookieStore.put('editJobact', data[0]);
            
            var newitemData = data[0];
            
            // ----->>>>  Price List Linguist <<<<---------
            $scope.childPriceAll().then((chData) => {
                //newitemData.forEach( function(eleVal, index, arr){
                    
                    $scope.exChildPriceArr = $scope.childPrice;
                    $scope.exCustPriceAll().then((prData) => {
                        let resourceId = newitemData.resource ? newitemData.resource : 0; 
                        
                        $scope.promiseItemLang().then( (lang) => {
                            var langPair = $scope.jobdetail.ItemLanguage;
                    
                            $scope.changeLinguistPrice(resourceId, $scope.scoopSpecializationArr, langPair)
                        });
                        // if($scope.exChildPriceArr && newitemData.resource)
                        //     $scope.changeLinguistPrice(newitemData.resource, '', '')
                        // if($scope.exChildPriceArr && !newitemData.resource){
                        //     $scope.changeLinguistPrice(0, newitemData.job_id, $scope.scoopSpecializationArr, langPair)
                        // }
                    });    
                //})
            });

        }).error(errorCallback);
    }

    $scope.autoJobOn = function (id) {
        rest.path = 'jobSummeryDetailsAutoChangeon/' + $routeParams.id + '/' + id;
        rest.get().success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }

    $scope.autoJobOff = function (id) {
        rest.path = 'jobSummeryDetailsAutoChangeoff/' + $routeParams.id + '/' + id;
        rest.get().success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }

    rest.path = 'masterPriceitemgetFromPriceList';
    rest.get().success(function (data) {
        $scope.masterPrice = data;
    }).error(errorCallback);

    rest.path = 'childPriceitemget';
    rest.get().success(function (data) {
        $scope.childPrice = data;
    }).error(errorCallback);
    // Change job price
    $scope.itemPriceUni = [];
    //change jobitem price module
    $scope.changeItemField = function (id, index, parentIndex, totalChng = 0) {
        var quantity = $scope.itemPriceUni[id][index].quantity;
        var itemPrice = $scope.itemPriceUni[id][index].itemPrice;
        var itemTtl = $scope.itemPriceUni[id][index].itemTotal;
        
        if (!quantity) {
            quantity = 0;
            $scope.itemPriceUni[id][index].quantity = 0;
        }
        if (!itemPrice) {
            itemPrice = 0;
            $scope.itemPriceUni[id][index].itemPrice = 0;
        }
        if (!itemTtl)
            itemTtl = 0;
        quantity = CommaToPoint4Digit(quantity);
        if (quantity == '')
            itemPrice = 0;
        //itemPrice = CommaToPoint4Digit(itemPrice);
        itemPrice = commaToPoint(itemPrice);

        if (itemPrice == '')
            itemPrice = 0;

        var decimalPoint = decimalNumberCount(itemPrice);    
        //var decimalPoint = 100;    
            
        var price = parseFloat(quantity) * parseFloat(itemPrice);
        price = isNaN(price) ? 0 : Math.round(price * decimalPoint)/decimalPoint
        if (totalChng > 0) {
            $scope.itemPriceUni[id][index].itemTotal = itemTtl;
        } else {
            $scope.itemPriceUni[id][index].itemTotal = price ? numberFormatComma(price) : 0;
        }
        $scope.itemPriceUni[id][index].amtSum = price;
        var grandTotal = 0;
        var smPromise = new Promise((resolve, reject) => {
            $scope.itemPriceUni[id].forEach((element, indx, array) => {
                let elVal = $scope.itemPriceUni[id][indx].itemTotal;
                elVal = (elVal != 0 || elVal != '') ? CommaToPoint4Digit(elVal) : 0;
                var subTtl = parseFloat(elVal);
                grandTotal += isNaN(subTtl) ? 0 : subTtl;
                if (indx === array.length -1) resolve();
            });
        });
        smPromise.then(() => {
            var decimalPoint = decimalNumberCount(grandTotal);    
            $scope.jobdetail.total_price = Math.round(grandTotal * decimalPoint)/decimalPoint;
        });
    }
    // Delete job price row
    $scope.itemQuentityDelete = function (id, index, parentIndex) {
        $scope.itemPriceUni[id].splice(index, 1);
        var decimalPoint = 100;
        var grandTotal = 0;
        if($scope.itemPriceUni[id].length){
            var smPromise = new Promise((resolve, reject) => {
                $scope.itemPriceUni[id].forEach((element, indx, array) => {
                    let elVal = $scope.itemPriceUni[id][indx].itemTotal;
                    elVal = (elVal != 0 || elVal != '') ? CommaToPoint4Digit(elVal) : 0;
                    var subTtl = parseFloat(elVal);
                    grandTotal += isNaN(subTtl) ? 0 : subTtl;
                    if (indx === array.length -1) resolve();
                });
            });
            smPromise.then(() => {
                decimalPoint = decimalNumberCount(grandTotal );
                $scope.jobdetail.total_price = Math.round(grandTotal * decimalPoint)/decimalPoint;
            });
        }else{
            $scope.jobdetail.total_price = '00';
        }    
    }
    // end job price

    $scope.savejobDetail = function (formId) {
        if ($routeParams.id) {
            $scope.jobdetail.due_date = angular.element('#duedate').val();
            
            $scope.jobdetail.description = $scope.jobdetail.jobDesc;
            delete $scope.jobdetail['jobDesc'];

            //Error message if job due date is greater then project due date.
            /*if (originalDateFormat($scope.jobdetail.due_date).split(' ')[0] > originalDateFormat($scope.jobdetail.ProjectDueDate).split(' ')[0]) {
                notification('Due date should be less then project due date.', 'warning');
                return false;
            }*/
            var obj = [];
            $('[id^=work_name]').each(function (i, v) {
                //var dateTime = $(this).find('time')[0].innerText;
                obj.push({
                    work_id: i,
                    work_name: v.innerText
                });
            });
            /*var obj1 = [];
            for (var i = 0; i < angular.element('[id^=work1_]').length; i++) {
                var workId = angular.element('#work_id' + i).text();
                var workName = angular.element('#work_name' + i).text();
                    obj1.push({
                        work_id: workId,
                        work_name: workName
                    });
            }*/
            $scope.jobdetail.item_status = $scope.jobdetail.item_status.split(',').pop()

            $scope.work_instruction = JSON.stringify(obj);
            $scope.jobdetail.work_instruction = $scope.work_instruction;

            var itemPriceUnit = [];
            itemPriceUnit = $scope.itemPriceUni[$scope.jobdetail.job_summmeryId];

            if (itemPriceUnit) {
                for (var j = 0; j < itemPriceUnit.length; j++) {
                    //itemPriceUnit[j].itemTotal = itemPriceUnit[j].itemTotal ? numberFormatCommaToPoint(itemPriceUnit[j].itemTotal) : 0;
                    itemPriceUnit[j].itemTotal = itemPriceUnit[j].itemTotal ? CommaToPoint4Digit(itemPriceUnit[j].itemTotal) : 0;
                }
            }
            $scope.jobdetail.price = JSON.stringify(itemPriceUnit);
            delete $scope.jobdetail['itemPrice'];
            delete $scope.jobdetail['quantity'];

            // end - jobprices 
            if ($scope.jobdetail.contact_person == '') {
                notification('Please select project manager', 'warning');
                return false;
            }

            if ($scope.jobdetail.due_date == '0000-00-00 00:00:00' || $scope.jobdetail.due_date == '0000-00-00' ||  $scope.jobdetail.due_date == '') {
                notification('Please select due date', 'warning');
                return false;
            }

            //$scope.jobdetail.due_date = originalDateFormatNew($scope.jobdetail.due_date);
            //$scope.jobdetail.due_date = moment($scope.jobdetail.due_date).format('YYYY-MM-DD HH:mm:ss');
            $scope.jobdetail.due_date = $scope.jobdetail.due_date.split(' ')[0].split('.').reverse().join('-');
            $scope.jobdetail.due_date = $scope.jobdetail.due_date;
            var due_timevl1 = angular.element('#due_time').val();
            $scope.jobdetail.due_date = moment($scope.jobdetail.due_date + ' ' + due_timevl1).format("YYYY-MM-DD HH:mm");
            
            // this field used in tabel join for csv pay calculation
            if ($scope.jobdetail.project_type_name)
                delete $scope.jobdetail.project_type_name;
            if ($scope.jobdetail.project_type)
                delete $scope.jobdetail.project_type;
            if ($scope.jobdetail.proj_specialization)
                delete $scope.jobdetail.proj_specialization;
            /* if($scope.jobdetail.job_type_name)
            delete $scope.jobdetail.job_type_name; */

            //job start recent activity store in cookie
            var arr1 = $.map($scope.jobdetail, function (el) {
                return el;
            });

            if($cookieStore.get){
                var arr2 = $.map($cookieStore.get('editJobact'), function (el) {
                    return el;
                });
                if (array_diff(arr1, arr2) != "") {
                    var obj = [];
                    if ($cookieStore.get('jobRecentEdit') != undefined) {
                        angular.forEach($cookieStore.get('jobRecentEdit'), function (val, i) {
                            obj.push(val);
                        });
                    }
                    obj.push($routeParams.id);
                    $cookieStore.put('jobRecentEdit', obj);
                    $cookieStore.remove('editJobact')
                }
            }    

            if ($scope.jobdetail.resource != '' && $scope.jobdetail.item_status == 'In preparation') {
                //$scope.jobdetail.item_status = 'In-progress';
            }
            delete $scope.jobdetail['ProjectDueDate'];
            delete $scope.jobdetail['freelance_currency'];

            $routeParams.id;
            rest.path = 'jobSummeryJobDetailsUpdate';
            rest.put($scope.jobdetail).success(function (data) {
                //log file start
                $scope.logMaster = {};
                $scope.logMaster.log_type_id = $scope.jobdetail.order_id;
                $scope.logMaster.task_id = $routeParams.id;
                if (!$scope.jobdetail.po_number) {
                    $scope.logMaster.log_title = $scope.jobdetail.tmp_po_number;
                } else {
                    $scope.logMaster.log_title = $scope.jobdetail.po_number;
                }
                $scope.logMaster.log_type = "update";
                $scope.logMaster.log_status = "task";
                $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                rest.path = "saveLog";
                rest.post($scope.logMaster).success(function (data) { });
                //log file end - 
                //$location.path('jobs-detail/' + $scope.DetailId);
                notification('Job successfully updated.', 'success');
                $uibModalInstance.dismiss('cancel');
                $route.reload();
            }).error( function(data,error,status){
                if($scope.jobdetail && $scope.jobdetail.due_date){
                    var due_timeval_e = $scope.jobdetail.due_date.split(" ")[1];
                    var due_timeval_e = due_timeval_e.substring(0, 5);
                    $scope.jobdetail.due_date = moment($scope.jobdetail.due_date).format($window.localStorage.getItem('global_dateFormat'));
                    angular.element('#due_time').val(due_timeval_e);
                }
            });
        }
    }
    $scope.filemanagerSource = function (name) {
        if ($routeParams.id) {
            // var obj = [];

            // for (var i = 0; i < angular.element('[id^=work1_]').length; i++) {
            //     var workId = angular.element('#work_id' + i).text();
            //     var workName = angular.element('#work_name' + i).text();
            //     obj.push({
            //         work_id: workId,
            //         work_name: workName
            //     });
            // }

            // $scope.work_instruction = JSON.stringify(obj);
            // $scope.jobdetail.work_instruction = $scope.work_instruction;
            // $routeParams.id;
            // rest.path = 'jobSummeryJobDetailsUpdate';
            // rest.put($scope.jobdetail).success(function(data) {
            closeWindows();
            $window.localStorage.ItemClient = '';
            var ItemcodeNumber = angular.element('#itemCode').text();
            //var ItemClient = angular.element('.itemClient').text();
            $window.localStorage.ItemcodeNumber = ItemcodeNumber;
            // start to get downloaded folder name with client name
            //rest.path = 'customer/' + $window.localStorage.orderID ;
            rest.path = 'customer/' + $scope.DetailId ;
            rest.get().success(function (res) {
                $scope.customer = res;
                if (res) {
                    rest.path = 'client/' + $scope.customer.client;
                    rest.get().success(function (cData) {
                        $scope.directClientData = cData
                        $window.localStorage.ItemClient = $scope.directClientData.vUserName;
                    }).error(function (data, error, status) { });
                }
            })
            // end
            //$window.localStorage.ItemClient = ItemClient;

            var filemanagerPopup = $window.open('#/filemanager/' + name, "popup", "width=1000,height=650");
            filemanagerPopup.addEventListener("beforeunload", function () {
                localStorage['parentId'] = ' ';
                return false;
            }, false);
            openWindows.push(filemanagerPopup);
            // }).error(errorCallback);
        }
    }

    var getCountJobFolder = function () {
        var count = $window.localStorage.getItem("sourceFolderCount");
        if (!count) {
            count = 0;
        }
        var type = $window.localStorage.getItem("jobFoldertype");
        var id = $window.localStorage.getItem("jobfolderId");

        if (type) {
            if (type == 'source') {
                $('#popSourceCount').text(count);
                $('#popTargetCount').text(count);
            }
            if (type == 'target') {
                $('#popTargetCount').text(count);
            }
        }
    }
    $interval(getCountJobFolder, 1000);

    $scope.jobsumemailResource = function (resourceName, jobSummeryId) {
        if (!resourceName || !jobSummeryId) {
            notification('Resource not selected', 'warning');
        } else {
            $window.localStorage.ResourceMsg = resourceName;
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/jobresourcemsg.html',
                controller: 'jobResourceMsgController',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.data;
                    }
                }
            });
        }
    }

    $scope.removeWorkIns = function (id) {
        var len = angular.element('[id^=work1_]').length;
        $('#work1_' + id).remove();
        /*if (id == len - 1) {
            $('#work1_' + id).remove();
        } else {
            notification('Delete from last record', 'warning');
        }*/
    }



    $scope.assignPoToJob = function (job_id, tmp_po) {
        var obj = {
            "po_number": tmp_po
        }
        $routeParams.id = job_id;
        rest.path = 'assignPoToJob';
        rest.put(obj).success(function (data) {
            $scope.jobdetail.po_number = tmp_po;
            angular.element('#tmp_po_number').hide();
            angular.element('#po_number').show();
        }).error(errorCallback);
    }

}).controller('filemanagerController', function ($interval, $scope, $log, $location, fileReader, rest, $uibModal, $window, $rootScope, $timeout, $route, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.breadcrums = [''];
    $scope.statusName = $window.localStorage.jobstatusName;
    $scope.statussource = $routeParams.id;
    var FilesLength;
    //popup close
    // serachTextBox Animation
    $scope.searchBox = function () {
        angular.element('#fileSearchBox').addClass('animationtextBox');
    }

    // onClick upload button hideShow uploadContainer
    $scope.uploadbtn = function () {
        angular.element('#uploadContainer').toggleClass('hideShowClass');
    }
    $scope.popupCloseFile = function () {

        $window.close();
    }
    //Final File upload
    $scope.finalupload = function () {
        var obj = {
            "item_status": "Overdue"
        }
        $routeParams.id = $rootScope.jobId;
        rest.path = 'updateJobSummeryItemStatus';
        rest.put(obj).success(function (data) {
            $window.close();
        }).error(errorCallback);
    }

    $scope.getJobRootFileCount = function () {
        var id = $window.localStorage.getItem("jobFolderRoot");
        var type = $window.localStorage.getItem("jobFoldertype");
        var externalResourceUserId = null;
        rest.path = 'filefolderGet/' + id + '/' + type + '/' + externalResourceUserId;
        rest.get().success(function (data) {
            $window.localStorage.setItem("sourceFolderCount", data.length);
        }).error(errorCallback);
    }

    $scope.hideuploadBtn = false;
    if ($window.localStorage.jobFoldertype == 'source') {
        $scope.hideuploadBtn = ($scope.userRight == 2) ? true : false;
    }
    if ($window.localStorage.jobFoldertype == 'target') {
        $scope.hideuploadBtn = ($scope.userRight == 2) ? false : true;
    }
    if($routeParams.id == 'target' && $scope.userRight == 1)
        $scope.hideuploadBtn = true;

    //project root get display front
    if ($window.localStorage.orderID && $window.localStorage.jobfolderId == " " && $window.localStorage.countSt == " ") {
        if ($window.localStorage.getItem("parentId") == undefined || $window.localStorage.getItem("parentId") == 0) {
            rest.path = 'filefrontroot/' + $window.localStorage.orderID + '/' + $routeParams.id;
            rest.get().success(function (data) {
                $window.localStorage.setItem("parentId", data.fmanager_id);
                $route.reload();
            }).error(errorCallback);
        }
    } else if ($window.localStorage.orderID != " " && $window.localStorage.jobfolderId && $window.localStorage.countSt == " " && $scope.userRight == '1') {
        if ($window.localStorage.getItem("parentId") == undefined || $window.localStorage.getItem("parentId") == 0) {
            $routeParams.id = ($routeParams.id == 'target') ? 'source' : $routeParams.id; 
            rest.path = 'jobfilefrontroot/' + $window.localStorage.orderID + '/' + $window.localStorage.jobfolderId + '/' + $routeParams.id;
            rest.get().success(function (data) {
                $window.localStorage.setItem("parentId", data[0].fmanager_id);
                //setting variable for jobfilecounter
                $window.localStorage.setItem("jobFolderRoot", data[0].fmanager_id);
                $window.localStorage.setItem("jobFoldertype", $routeParams.id);

                $interval($scope.getJobRootFileCount, 1000);

                $route.reload();
            }).error(errorCallback);
        }
    } else if ($window.localStorage.orderID != " " && $window.localStorage.jobfolderId && $scope.userRight == '2') {
        if ($window.localStorage.getItem("parentId") == undefined || $window.localStorage.getItem("parentId") == 0) {
            rest.path = 'jobfileuserfrontroot/' + $window.localStorage.jobfolderId + '/' + $routeParams.id;
            rest.get().success(function (data) {
                $window.localStorage.pId = data[0].fmanager_id;
                $window.localStorage.setItem("parentId", data[0].fmanager_id);

                //setting variable for jobfilecounter for freelancer project detail
                $window.localStorage.setItem("jobFolderRoot", data[0].fmanager_id);
                $window.localStorage.setItem("jobFoldertype", $routeParams.id);

                $interval($scope.getJobRootFileCount, 1000);
                $route.reload();
            }).error(errorCallback);
        }
    }

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                $scope.filesize = bytesToSize(file.size);
                $scope.filename = file.name;
                $scope.filetype = file.type;
                var t = $scope.filename.split('.');
                var type = t.pop();
                $scope.typefile = type;
                $scope.imgshow = false;
                $scope.imageSrc = result;
            });
    };

    //file insert data
    var uploadObj;
    $scope.allFilesArr = [];
    var allFilesArr = [];
    $timeout(function () {
        uploadObj = $("#multipleupload").uploadFile({
            url: 'filemanager-upload.php',
            multiple: true,
            dragDrop: true,
            dragDropStr: "<span class='spandragdrop'><b>Drag & Drop Files</b></span>",
            fileName: "myfile",
            acceptFiles: "png",
            showPreview: true,
            previewHeight: "35px",
            previewWidth: "35px",
            maxFileCount: 5,
            maxFileSize: 15 * 1024 * 1024,
            showDelete: true,
            autoSubmit: false,
            uploadStr: "<span class='fa fa-upload newUpload' style='color:#FFF;font-size:30px;'> </span>",
            onLoad: function (obj) { },
            afterUploadAll: function (obj) {
                notification('Files uploaded successfully', 'success');
                $timeout(function () {
                    $route.reload();
                }, 200);

            },
            onCancel: function (files, pd) {
                $timeout(function () {
                    var filenameContains = angular.element('.ajax-file-upload-filename').text();
                    var length = angular.element("[class^='upimg']").length;
                    angular.forEach(angular.element("[class^='upimg']"), function (res, i) {
                        var upClassName = angular.element("[class^='upimg']")[i].className = 'upimg' + length;
                        length--;
                    })
                }, 100);

            },
            onSuccess: function (files, datalist, xhr, pd) {
                var filenameContains = $(".ajax-file-upload-filename:contains('" + files[0] + "')");
                var fileType = files[0].substring(files[0].lastIndexOf(".") + 1, files[0].length);
                var fileDivText = $(".ajax-file-upload-filename:contains('" + files[0] + "')").text();
                if (fileDivText) {
                    var dataU = $('.upimg' + fileDivText.charAt(0)).text();
                }
                var size = fileDivText.substring(fileDivText.lastIndexOf(".") - 4, fileDivText.length).trim();
                var regExp = /\(([^)]+)\)/;
                var getFileSize = regExp.exec(size);
                $scope.name = dataU;
                $scope.f_id = 1;
                $scope.parent_id = $window.localStorage.getItem("parentId");
                if ($scope.filedata == undefined || $scope.filedata == " " || $scope.filedata == null) {
                    $scope.filedata = {};
                }
                $scope.role_id = $scope.userRight;
                $scope.filedata.role_id = $scope.role_id;
                $scope.filedata.name = $scope.name;
                $scope.filedata.f_id = $scope.f_id;
                $scope.filedata.parent_id = $scope.parent_id;
                $scope.filedata.filename = files[0];
                $scope.filedata.filetype = fileType;
                $scope.filedata.size = getFileSize[1];

                /*rest.path = 'fileAdd';
                rest.post($scope.filedata).success(function(data) {
    
                }).error(errorCallback);*/
                var filelength = angular.element('.ajax-file-upload-statusbar').length;

                //if(datalist){
                if (datalist) {
                    var alldata = JSON.parse(datalist);
                    var allFiles = {
                        role_id: $scope.role_id,
                        name: alldata["name"],
                        f_id: 1,
                        parent_id: $scope.filedata.parent_id,
                        ext: alldata["ext"],
                        size: alldata["size"]
                    };
                    $scope.allFilesArr.push(allFiles);
                    rest.path = 'fileAdd';
                    if (filelength == $scope.allFilesArr.length) {
                        rest.post($scope.allFilesArr).success(function (data) {
                            /*if(data.status == 200){
                                notification('Files uploaded successfully', 'success');
                                $timeout(function() {
                                    $route.reload();
                                }, 100);
                            }else{
                                notification('Some files not uploaded!', 'success');
                                $timeout(function() {
                                    $route.reload();
                                }, 100);
                            }*/
                        }).error(errorCallback);
                    }
                }

            },
            onSelect: function (files) {
                var isFilesAvailable = angular.element('.ajax-file-upload-container').css('border', '1px dotted #ddd');
                angular.forEach(files, function (val, i) {
                    fileReader.readAsDataUrl(files[i], $scope).then(function (result) {
                        var data = result;
                        var txt = $(".ajax-file-upload-filename:contains('" + files[i].name + "')");
                        var fileExtension = files[i].name.substr((files[i].name.lastIndexOf('.') + 1));
                        if (txt) {
                            var fullTxt = $(".ajax-file-upload-filename:contains('" + files[i].name + "')").text();
                            $('<div class="upimg' + fullTxt.charAt(0).toString() + '" style="display:none">' + data + '</div>').insertAfter(".ajax-file-upload-filename:contains('" + files[i].name + "')");
                        }
                        /*if (fileExtension != 'jpg' && fileExtension != 'png' && fileExtension != 'gif') {
                            var previewContainer = $('.upimg' + fullTxt.charAt(0).toString()).parent().children(':first-child');
                            previewContainer.css('display', 'block', 'margin-left', '40px');
                            previewContainer.css('margin-left', '55px');
                            var DefaultImgPath = "assets/img/file_icon/fileicon.png";
                            previewContainer.attr('src', DefaultImgPath);
                        }*/
                        
                        if (['jpg', 'jpeg', 'png','gif','svg', 'tiff','bmp','pcx', 'rle', 'dib'].includes(fileExtension)) {
                            var previewContainer = $('.upimg' + fullTxt.charAt(0).toString()).parent().children(':first-child');
                            previewContainer.css('display', 'block', 'margin-left', '40px');
                            previewContainer.css('margin-left', '55px');
                            var DefaultImgPath = "assets/img/file_icon/fileicon.png";
                            if (['docx','doc'].includes(fileExtension)) {
                                DefaultImgPath = "assets/img/file_icon/doc.png";
                            }
                            if (['xlsx','xlsm','xls','csv'].includes(fileExtension)) {
                                DefaultImgPath = "assets/img/file_icon/xls.png";
                            }
                            if (fileExtension == 'pdf') {
                                DefaultImgPath = "assets/img/file_icon/pdf.png";
                            }
                            if (fileExtension == 'msg') {
                                DefaultImgPath = "assets/img/file_icon/fileicon.png";
                            }
                            if (fileExtension == 'ppt') {
                                DefaultImgPath = "assets/img/file_icon/ppt.png";
                            }
                            if (['zip','zipx','gz','rar','tar','7z'].includes(fileExtension)) {
                                DefaultImgPath = "assets/img/file_icon/zip.png";
                            }
                            if (['mp3','wav','wma'].includes(fileExtension)) {
                                DefaultImgPath = "assets/img/file_icon/mp3.png";
                            }
                            if (['mp4','wmv','avi','3gp','mov','vob'].includes(fileExtension)) {
                                DefaultImgPath = "assets/img/file_icon/video.png";
                            }
                            if (['txt','html','htm','js','css','vob','sql','tiff','ttf'].includes(fileExtension)) {
                                DefaultImgPath = "assets/img/file_icon/video.txt";
                            }
                            previewContainer.attr('src', DefaultImgPath);
                        }


                    });
                });

                return true; //to allow file submission.
            },
        });
    }, 100);

    $scope.addToCopy = function (fid) {
        var chkForClass = angular.element('#' + fid).hasClass('activeselect');
        var alreadyInCopy = false;
        if (chkForClass == false) {
            angular.forEach($scope.copyfile, function (value, key) {
                if (value.id == fid) {
                    alreadyInCopy = true;
                }
            });
            if (alreadyInCopy) {
                alert('File already copied');
                angular.element('#' + fid).addClass('activeselect');
            } else {
                angular.element('#' + fid).addClass('activeselect');
                /*$scope.copyfile.push({
                    id: fid
                });*/
            }
        } else if (chkForClass == true) {
            angular.element('#' + fid).removeClass('activeselect');
            angular.forEach($scope.copyfile, function (value, key) {
                if (value.id == fid) {
                    $scope.copyfile.splice(key, 1);
                    angular.element('#' + fid).removeClass('activeselect');
                }
            });
            angular.element('#files_count').text($scope.copyfile.length);
        }
    }
    $scope.clearCopy = function () {
        if ($scope.copyfile.length == 0) {
            $.each($('file'), function () {
                if (angular.element('#' + this.id).hasClass('activeselect')) {
                    angular.element('#' + this.id).removeClass('activeselect')
                }
            });
            angular.element('#files_count').text('0');
            $scope.copyfile = [];
        } else {
            angular.forEach($scope.copyfile, function (value, key) {
                angular.element('#' + value.id).removeClass('activeselect');
            });
            $scope.copyfile = [];
            angular.element('#files_count').text('0');
        }

    }


    // Keyboard keypress Event for File Manager
    $(window).keydown(function (event) {
        if (event.ctrlKey && event.keyCode == 86) { //CTRL + V

            if ($scope.copyfile.length > 0 && angular.element('#files_count').text() != 0) {
                angular.forEach($scope.copyfile, function (value, key) {
                    value.parent = $window.localStorage.getItem("parentId");
                });
                $scope.showLoder = true;
                $scope.copyfile = JSON.stringify($scope.copyfile);
                $routeParams.id = JSON.parse($scope.copyfile)[0].id;
                rest.path = 'fileManagerPaste';
                rest.put($scope.copyfile).success(function (data) {
                    $scope.copyfile = [];
                    $route.reload();
                }).error(errorCallback);
            } else {
                notification('No selected Files', 'warning');
            }
            event.preventDefault();
            event.stopImmediatePropagation();
        } else if (event.ctrlKey && event.keyCode == 65) { //CTRL + A Key Event
            FilesLength = angular.element('file').length;
            if (FilesLength > 0) {
                $scope.copyfile = [];
                $.each($('file'), function () {
                    angular.element('#' + this.id).addClass('activeselect');
                    $scope.copyfile.push({
                        id: this.id
                    });
                });
                angular.element('#files_count').text($scope.copyfile.length);
            }
            event.preventDefault();
            event.stopImmediatePropagation();
        } else if (event.ctrlKey && event.keyCode == 67) { //CTRL + C Key Event
            FilesLength = angular.element('file').length;
            $scope.copyfile = [];
            if (FilesLength > 0) {
                $.each($('file'), function () {
                    if (angular.element('#' + this.id).hasClass('activeselect')) {
                        $scope.copyfile.push({
                            id: this.id
                        });
                    }
                });
                angular.element('#files_count').text($scope.copyfile.length);
                //notification('Files copied.','warning');
            }
            event.preventDefault();
            event.stopPropagation();
        } else if (event.keyCode == 46) { //Delete Key Event
            FilesLength = angular.element('file').length;
            if (FilesLength > 0) {
                $.each($('file'), function () {
                    if (angular.element('#' + this.id).hasClass('activeselect')) {
                        $scope.showLoder = true;
                        angular.element('#' + this.id).removeClass('activeselect');
                        var folderId = this.id;
                        var image = angular.element('#' + this.id).text();
                        rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                        rest.delete().success(function (data) {
                            $scope.copyfile = [];
                            $timeout(function () {
                                $route.reload();
                            }, 100);
                        })
                    }
                });
            }
            event.preventDefault();
            event.stopImmediatePropagation();
        } //else if(event.keyCode == 8){//Backspace Key event
        //     var eventElement = $(event.target)[0].id;
        //     if(eventElement == 'fileSearchBox'){

        //     }else{
        //         $scope.higherlevelFolder($window.localStorage.getItem("parentId"));
        //         event.preventDefault();
        //         event.stopImmediatePropagation();
        //     }
        // }
    });

    $scope.showLoder = false;
    // Delete all selected files
    $scope.deleteSelected = function () {
        var FilesLength = angular.element('file').hasClass('activeselect');
        if (FilesLength) {
            bootbox.confirm("Are you sure you want to delete?", function (result) {
                if (result == true) {
                    $scope.copyfile = [];
                    FilesLength = angular.element('file').hasClass('activeselect');
                    if (FilesLength) {
                        $.each($('file'), function () {
                            if (angular.element('#' + this.id).hasClass('activeselect')) {
                                $scope.copyfile.push({
                                    id: this.id
                                });
                            }
                        });
                        $scope.copyfile = JSON.stringify($scope.copyfile);
                        $routeParams.id = JSON.parse($scope.copyfile)[0].id
                        $scope.showLoder = true;
                        rest.path = 'filemanagerfolderDeleteMultiple';
                        rest.put($scope.copyfile).success(function (data) {
                            $route.reload();
                        })
                    }
                } else {
                    $.each($('file'), function () {
                        if (angular.element('#' + this.id).hasClass('activeselect')) {
                            angular.element('#' + this.id).removeClass('activeselect');
                        }
                    });
                    $scope.copyfile = [];
                    angular.element('#files_count').text($scope.copyfile.length);
                }
            });
        } else {
            notification('No files selected', 'warning');
        }
    }

    // Upload button click will start uploading uploadObj 
    $scope.uploadClick = function () { //uploadObj
        var isFilesAvailable = angular.element('.ajax-file-upload-container').html().toString().length;
        if (isFilesAvailable > 0) {
            uploadObj.startUpload();
        } else {
            notification('No Files Selected.', 'warning');
        }
    }

    //file root parent and high levelset
    if ($window.localStorage.getItem("parentId") != 0) {
        var id = $window.localStorage.getItem("parentId");
        rest.path = 'fileparentNameGet/' + id;
        rest.get().success(function (data) {
            if (data.parent_id == 0) {
                $scope.roothigher = false;
            } else {
                if ($scope.userRight == 2 && $window.localStorage.pId == $window.localStorage.getItem("parentId") || $window.localStorage.countSt != " ") {
                    $scope.roothigher = false;
                } else if ($scope.userRight != 2) {
                    $scope.roothigher = true;
                }
            }

            if ($scope.userRight == 2) {
                if (data.name == '_out' || data.name == '_in') {
                    if (data.name == '_out')
                        $scope.parentName = 'From BeConnected';
                    else
                        $scope.parentName = 'To BeConnected';
                } else {
                    $scope.parentName = data.name;
                }
            } else {
                $scope.parentName = data.name;
            }
        }).error(errorCallback);
    }

    if ($window.localStorage.getItem("parentId") != " ") {
        var id = $window.localStorage.getItem("parentId");
        var externalResourceUserId = null;
        rest.path = 'filefolderGet/' + id + '/' + $routeParams.id + '/' + externalResourceUserId;
        //rest.path = 'filefolderGet/' + id + '/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.displayfolder = data;
            // $scope.headerfilename(id);
            $timeout(function () {
                $scope.displayfolder = data;

                //Change ItemFolder Name to item001 -> Files-001
                angular.forEach($scope.displayfolder, function (val, i) {
                    if (val.item_id != 0) {
                        var ItemNo;
                        ItemNo = val.name.match(/\d+$/);
                        if (ItemNo) {
                            $scope.displayfolder[i].name = 'Files-' + ItemNo[0];

                        }
                    }
                })

                $scope.headerfilename(id);

                // context-menu for file paste
                $scope.menuOptionsPaste = [
                    ['Paste', function ($itemScope) {
                        angular.forEach($scope.copyfile, function (value, key) {
                            value.parent = $window.localStorage.getItem("parentId");
                        });
                        $scope.copyfile = JSON.stringify($scope.copyfile);
                        $routeParams.id = JSON.parse($scope.copyfile)[0].id;
                        rest.path = 'fileManagerPaste';
                        rest.put($scope.copyfile).success(function (data) {
                            $route.reload();
                        }).error(errorCallback);

                    }, function ($itemScope, $event, modelValue) {
                        if ($itemScope.copyfile.length > 0) {
                            return true;
                        } else {
                            return false
                        }
                    }],

                    ['Refresh', function ($itemScope) {
                        $route.reload();
                    }],
                ];

                // context-menu for folder
                $scope.menuOptionsFolder = [
                    ['Open', function ($itemScope) {
                        $scope.findfile($itemScope.display.fmanager_id, $itemScope.display.name);
                    }],

                    ['Download', function ($itemScope) {
                        var folderId = $itemScope.display.fmanager_id;
                        var ItemcodeNumber = $window.localStorage.ItemcodeNumber;
                        var ItemClient = $window.localStorage.ItemClient;
                        ItemcodeNumber = (ItemcodeNumber == undefined) ? "" : ItemcodeNumber + '_';
                        var ItemClient = (ItemClient == undefined) ? "" : ItemClient + '_';

                        var preFolderName = ItemcodeNumber + ItemClient;

                        var tmsfolder = preFolderName + $itemScope.display.name;
                        if (!tmsfolder) {
                            tmsfolder = 'tms';
                        }
                        if (folderId != undefined) {
                            $scope.showLoder = true;
                            rest.path = 'filemanagerfolderDownload/' + folderId;
                            rest.get().success(function (data) {
                                $scope.downloadAllfile = data;
                                var zipdwnld = new JSZip();
                                var fileUrls = [];
                                var folderArr = [];
                                var fileIndex = 0;

                                angular.forEach($scope.downloadAllfile, function (val, i) {
                                    if (val.ext != '') {
                                        var fimg = val.name;
                                        //zipdwnld.file(fimg, "uploads/fileupload/"+fimg);
                                        //fileList.push("uploads/fileupload/"+fimg);
                                        var fimgUrl = "uploads/fileupload/" + fimg;
                                        if (fileUrlExists(fimgUrl)) {
                                            fileUrls.push({
                                                'parent_id': val.parent_id,
                                                'full_url': fimgUrl,
                                                'file_name': fimg,
                                                'folderurl_dir': val.folderurl,
                                            });
                                        }
                                    }
                                    var fmid = 0;
                                    if (val.ext == '') {
                                        var foldername = val.name;
                                        var fmid = val.fmanager_id;
                                        //zipdwnld.folder(foldername);
                                        folderArr.push({
                                            'fmanager_id': val.fmanager_id,
                                            'folder_name': val.name,
                                            'folderurl_dir': val.folderurl,
                                        });
                                    }

                                    /*if(val.childfile){
                                        angular.forEach(val.childfile,function(val2,i2){
                                            var prntId = 1;
                                            if(val2.ext!=''){
                                                var fimg2 = val2.name;
                                                //fileList.push("uploads/fileupload/"+fimg2);
                                                var fimgUrl2 = "uploads/fileupload/"+fimg2;
                                                if(fileUrlExists(fimgUrl2)){
                                                    fileUrls.push(
                                                        {
                                                        'parent_id':val2.parent_id,
                                                        'full_url':fimgUrl2,
                                                        'file_name':val2.name
                                                        });
                                                }
                                            }
                                            if(fimg2){
                                                //zipdwnld.file(fimg2, "uploads/fileupload/"+fimg2);
                                            }
                                            if(val2.ext==''){
                                                var foldername2 = val2.name;
                                                //zipdwnld.folder(foldername2);
                                                folderArr.push({
                                                    'fmanager_id':val2.fmanager_id,
                                                    'folder_name':val2.name,
                                                });
                                            }
                                        });
                                        //$scope.childData = val2;
                                    }*/
                                })
                                // files download
                                var file_count = 0;
                                fileUrls.forEach(function (url) {
                                    JSZipUtils.getBinaryContent(url.full_url, function (err, data) {
                                        if (err) {
                                            throw err;
                                        }
                                        var folderName = '';
                                        folderArr.forEach(function (folders) {
                                            /*if(folders.fmanager_id == url.parent_id){
                                                folderName = folders.folder_name+'/';
                                            }else{
                                                zipdwnld.folder(folders.folder_name);
                                            }*/
                                            zipdwnld.folder(folders.folderurl_dir);
                                        });
                                        
                                        file_count++;
                                        if (data != null) {
                                            //zipdwnld.file(folderName+url.file_name, data,  {binary:true});
                                            zipdwnld.file(url.folderurl_dir + url.file_name, data, { binary: true });

                                            if (file_count == fileUrls.length) {
                                                zipdwnld.generateAsync({ type: 'blob' }).then(function (content) {
                                                    saveAs(content, tmsfolder + ".zip");
                                                }).then(function () {
                                                    $scope.showLoder = false;
                                                    $route.reload();
                                                });
                                                $timeout(function () {
                                                    $scope.showLoder = false;
                                                    //$route.reload();
                                                }, 10000);
                                            }
                                        }

                                    });
                                });

                                $timeout(function () {
                                    if (fileUrls.length == 0 && folderArr.length > 0) {
                                        folderArr.forEach(function (folders) {
                                            zipdwnld.folder(folders.folder_name);
                                            zipdwnld.folder(folders.folderurl_dir);
                                        });
                                        zipdwnld.generateAsync({ type: 'blob' }).then(function (content) {
                                            saveAs(content, tmsfolder + ".zip");
                                        }).then(function () {
                                            $scope.showLoder = false;
                                            $route.reload();
                                        });
                                    }
                                }, 1000);

                            })
                            $timeout(function () {
                                $scope.showLoder = false;
                            }, 10000);

                        }

                    }],

                    ['Delete', function ($itemScope) {
                        bootbox.confirm("Are you sure you want to delete this folder?", function (result) {
                            var folderId = $itemScope.display.fmanager_id;
                            var image = $itemScope.display.name;
                            if (folderId != undefined) {
                                $scope.showLoder = true;
                                if (result == true) {
                                    rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                                    rest.delete().success(function (data) {
                                        $scope.copyfile = [];
                                        $route.reload();
                                    })
                                } else {
                                    $scope.showLoder = false;
                                }
                            }
                        });
                    }],

                    ['Rename', function ($itemScope) {
                        var newName = prompt("Please enter name");
                        if (newName) {
                            var folderId = $itemScope.display.fmanager_id;
                            var image = $itemScope.display.name;
                            if (folderId != undefined) {
                                if ($scope.folderData == undefined || $scope.folderData == null || $scope.folderData == "") {
                                    $scope.folderData = {};
                                }
                                $scope.name = newName;
                                $scope.image = image;
                                $scope.folderData.name = $scope.name;
                                $scope.folderData.image = $scope.image;
                                $routeParams.id = folderId;

                                rest.path = 'fileManagerUpdate';
                                rest.put($scope.folderData).success(function (data) {
                                    $route.reload();
                                }).error(errorCallback);
                            }
                        }

                    }],
                ];

                // context-menu for files
                $scope.menuOptionsFiles = [
                    ['Download', function ($itemScope) {
                        var a = document.createElement('a');
                        document.body.appendChild(a);
                        a.download = $itemScope.display.name;
                        a.href = $("#download" + $itemScope.display.fmanager_id).attr('href');
                        a.click();
                    }],

                    ['Delete', function ($itemScope) {
                        bootbox.confirm("Are you sure you want to delete?", function (result) {
                            if (result == true) {
                                $scope.copyfile = [];
                                FilesLength = angular.element('file').hasClass('activeselect');
                                if (FilesLength) {
                                    $.each($('file'), function () {
                                        if (angular.element('#' + this.id).hasClass('activeselect')) {
                                            $scope.copyfile.push({
                                                id: this.id
                                            });
                                        }
                                    });
                                    $scope.copyfile = JSON.stringify($scope.copyfile);
                                    $routeParams.id = JSON.parse($scope.copyfile)[0].id
                                    $scope.showLoder = true;
                                    rest.path = 'filemanagerfolderDeleteMultiple';
                                    rest.put($scope.copyfile).success(function (data) {
                                        $scope.copyfile = [];
                                        $route.reload();
                                    })
                                } else {
                                    var folderId = $itemScope.display.fmanager_id;
                                    var image = $itemScope.display.name;
                                    if (folderId != undefined) {
                                        $scope.showLoder = false;
                                        if (result == true) {
                                            rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                                            rest.delete().success(function (data) {
                                                $scope.copyfile = [];
                                                $route.reload();
                                            })
                                        }
                                    }
                                }
                            } else {
                                $.each($('file'), function () {
                                    if (angular.element('#' + this.id).hasClass('activeselect')) {
                                        angular.element('#' + this.id).removeClass('activeselect');
                                    }
                                });
                                $scope.copyfile = [];
                            }
                        });
                    }],

                    ['Rename', function ($itemScope) {
                        $.each($('file'), function () {
                            if (angular.element('#' + this.id).hasClass('activeselect')) {
                                angular.element('#' + this.id).removeClass('activeselect');
                            }
                        });
                        $timeout(function () {
                            var newName = prompt("Please enter name");
                            if (newName) {
                                var folderId = $itemScope.display.fmanager_id;
                                var image = $itemScope.display.name;
                                if (folderId != undefined) {
                                    if ($scope.folderData == undefined || $scope.folderData == null || $scope.folderData == "") {
                                        $scope.folderData = {};
                                    }
                                    $scope.name = newName;
                                    $scope.image = image;
                                    $scope.folderData.name = $scope.name;
                                    $scope.folderData.image = $scope.image;
                                    $routeParams.id = folderId;

                                    rest.path = 'fileManagerUpdate';
                                    rest.put($scope.folderData).success(function (data) {
                                        $route.reload();
                                    }).error(errorCallback);
                                }
                            }

                        }, 100);
                    }],

                    ['Copy', function ($itemScope) {
                        angular.forEach($scope.copyfile, function (value, key) {
                            angular.element('#' + value.id).removeClass('activeselect');
                        });
                        FilesLength = angular.element('file').hasClass('activeselect');
                        if (FilesLength) {
                            $.each($('file'), function () {
                                if (angular.element('#' + this.id).hasClass('activeselect')) {
                                    $scope.copyfile.push({
                                        id: this.id
                                    });
                                    angular.element('#' + this.id).addClass('activeselect');
                                    angular.element('#files_count').text($scope.copyfile.length);
                                }
                            });
                            angular.forEach($scope.copyfile, function (value, key) {
                                angular.element('#' + value.id).addClass('activeselect');
                            });
                        } else {
                            var alreadyInCopy = false;
                            angular.forEach($scope.copyfile, function (value, key) {
                                if (value.id == $itemScope.display.fmanager_id) {
                                    alreadyInCopy = true;
                                }
                            });
                            if (alreadyInCopy) {
                                angular.forEach($scope.copyfile, function (value, key) {
                                    angular.element('#' + value.id).addClass('activeselect');
                                });
                                alert('File already copied');
                                angular.element('#' + $itemScope.display.fmanager_id).addClass('activeselect');
                            } else {
                                $scope.copyfile = [];
                                angular.element('#' + $itemScope.display.fmanager_id).addClass('activeselect');
                                $scope.copyfile.push({
                                    id: $itemScope.display.fmanager_id
                                });
                                angular.element('#files_count').text($scope.copyfile.length);
                            }
                        }
                    }],

                    ['Properties', function ($itemScope) {
                        var fileName = $itemScope.display.name;
                        var fileSize = $itemScope.display.size;
                        var fileExt = $itemScope.display.ext;
                        var FileCreatedDate = $itemScope.display.created_date;
                        var propertyHtml = '<div class="alert" style="word-wrap: break-word;">' +
                            '<strong>Name&nbsp;:&nbsp;</strong>&nbsp;' + fileName + '<br><br>' +
                            '<strong>Size&nbsp;:&nbsp;</strong>' + fileSize + '<br><br>' +
                            '<strong>Extention&nbsp;:&nbsp;</strong>' + fileExt + '<br><br>' +
                            '<strong>Created Date&nbsp;:&nbsp;</strong>' + moment(FileCreatedDate).format($window.localStorage.getItem('global_dateFormat') + ' ' + 'HH:mm:ss') +
                            '</div>';
                        $('#propertyModal').find('.modal-body').html(propertyHtml);
                        $('#propertyModal').modal('show');
                    }],
                ];

                //Source to Download and Target to Upload
                //Remove download option in (Download Upload)
                if ($window.localStorage.jobFoldertype == 'target' && $scope.userRight == 2) {
                    $scope.menuOptionsFiles.splice(0, 1);
                    $scope.menuOptionsFolder.splice(0, 1);
                }

                if ($window.localStorage.jobFoldertype == 'source' && $scope.userRight == 1) {
                    let urlName = document.URL.substring(document.URL.lastIndexOf('/') + 1);
                    if($routeParams.id != 'target'){
                        $scope.menuOptionsFiles.splice(0, 1);
                        $scope.menuOptionsFolder.splice(1, 1);
                    }
                }

            }, 200);
        }).error(errorCallback);
    } else {
        rest.path = 'fileManagerGet';
        rest.get().success(function (data) {
            $scope.displayfolder = data;
            
            //Change ItemFolder Name to item001 -> Files-001
            angular.forEach($scope.displayfolder, function (val, i) {
                if (val.item_id != 0) {
                    var ItemNo;
                    ItemNo = val.name.match(/\d+$/);
                    if (ItemNo) {
                        $scope.displayfolder[i].name = 'Files-' + ItemNo[0];

                    }
                }
            })
            
            $window.localStorage.setItem("parentId", $scope.displayfolder[0].parent_id);

            // Stop to list all filemanager file if orderID null - Source-target
            if($routeParams.id == 'source' || $routeParams.id == 'target'){
                if($window.localStorage.orderID == null){
                    $scope.displayfolder = [];  
                }
            }

        }).error(errorCallback);
    }

    $scope.mkdir = function () {
        var folderName = prompt("Please enter folder name");
        if (folderName) {
            var id = $window.localStorage.getItem("parentId");
            var role = $scope.userRight;
            rest.path = 'Newfoldermake/' + id + '/' + folderName + '/' + role;
            rest.get().success(function (data) {
                $route.reload();
            }).error(errorCallback);
        }

    }

    /*$scope.foldertree = function(id) {
        $('.ftr'+id).hide();                
    }*/
    //nested file
    $scope.findfile = function (id, name) {
        var externalResourceUserId = null;

        rest.path = 'filefolderGet/' + id + '/' + $routeParams.id + '/' + externalResourceUserId;

        rest.get().success(function (data) {
            $scope.displayfolder = data;

            //Change ItemFolder Name to item001 -> Files-001
            angular.forEach($scope.displayfolder, function (val, i) {
                if (val.item_id != 0) {
                    var ItemNo;
                    ItemNo = val.name.match(/\d+$/);
                    if (ItemNo) {
                        $scope.displayfolder[i].name = 'Files-' + ItemNo[0];

                    }
                }
            })

            $scope.headerfilename(id);

        }).error(errorCallback);
    }

    $scope.headerfilename = function (id, name) {
        if (id == 0 || id == 'null' || id == 'undefined') {
            $scope.rootshow = false;
        } else {
            $scope.rootshow = true;
        };

        $scope.folid = id;
        $window.localStorage.setItem("parentId", $scope.folid);
    }

    // redirect to higher level directiory or file
    $scope.higherlevelFolder = function (id) {
        var externalResourceId = null;
        rest.path = 'higherfolderGet/' + id + '/' + externalResourceId;
        //rest.path = 'higherfolderGet/' + id;
        rest.get().success(function (data) {
            $scope.displayfolder = data.data;
            var fid = [];
            var fname = [];
            if (data.info.parent_id == 0) {
                $scope.rootshow = false;
            }
            angular.forEach(data.data, function (val, i) {
                fid = val.parent_id;
                fname = val.name;
            })


            //Change ItemFolder Name to item001 -> Files-001
            angular.forEach($scope.displayfolder, function (val, i) {
                if (val.item_id != 0) {
                    var ItemNo;
                    ItemNo = val.name.match(/\d+$/);
                    if (ItemNo) {
                        $scope.displayfolder[i].name = 'Files-' + ItemNo[0];

                    }
                }
            })
            // call headerfilename() to fill id in folderlevel up
            $scope.headerfilename(fid);
            $window.localStorage.setItem("parentId", fid);

        }).error(errorCallback);
    }

    //change file manager action
    $scope.changefolderAction = function (action) {
        switch (action) {
            case "Rename as":
                $scope.renameshow = true;
                break;
            case "New folder":
                $scope.renameshow = false;
                break;
            case "Delete":
                $scope.renameshow = false;
                break;
        }
    }

    // file manager action rename,delete,cut etc.
    $scope.folderAction = function (action, name) {
        switch (action) {
            case "Rename as":
                for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
                    var folderId = angular.element('#folderCheckdata' + i).val();
                    var image = angular.element('#folderCheckfile' + i).val();
                    if (folderId != undefined) {
                        if ($scope.folderData == undefined || $scope.folderData == null || $scope.folderData == "") {
                            $scope.folderData = {};
                        }
                        $scope.name = name;
                        $scope.image = image;
                        $scope.folderData.name = $scope.name;
                        $scope.folderData.image = $scope.image;
                        $routeParams.id = folderId;
                        rest.path = 'fileManagerUpdate';
                        rest.put($scope.folderData).success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
                break;
            case "New folder":
                if (name) {
                    var id = $window.localStorage.getItem("parentId");
                    var role = $scope.userRight;
                    rest.path = 'Newfoldermake/' + id + '/' + name + '/' + role;
                    rest.get().success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                } else {
                    notification('Enter Folder Name', 'information');
                }
                break;
            case "Delete":
                bootbox.confirm("Are you sure you want to delete this row?", function (result) {
                    for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
                        var folderId = angular.element('#folderCheckdata' + i).val();
                        var image = angular.element('#folderCheckfile' + i).val();
                        if (folderId != undefined) {
                            if (result == true) {
                                rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                                rest.delete().success(function (data) {
                                    $route.reload();
                                }).error(errorCallback);
                            }
                        }
                    }
                });
                break;
        }
    }

    //file or directory paste
    $scope.copyfile = [];
    $scope.folderCopy = function () {
        for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
            var folderId = angular.element('#folderCheckdata' + i).val();
            if (folderId != undefined) {
                $scope.copyfile.push({
                    id: folderId
                });
            }
        }
    }

    //copy directory or file paste
    $scope.folderPaste = function () {
        for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
            var folderId = angular.element('#folderCheckdata' + i).val();
            if (folderId != undefined) {
                $scope.copyfiles = JSON.stringify($scope.copyfile);
                $routeParams.id = folderId;
                rest.path = 'fileManagerPaste';
                rest.put($scope.copyfiles).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    //All and selected directory delete
    $scope.folderDelete = function () {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
                var folderId = angular.element('#folderCheckdata' + i).val();
                var image = angular.element('#folderCheckfile' + i).val();
                if (folderId != undefined) {
                    if (result == true) {
                        rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                        rest.delete().success(function (data) {
                            $route.reload();
                        })
                    }
                }
            }
        });
    }

    $scope.folderAct = false;

    //folder check on action display
    $scope.folderSelect = function () {
        var bool = 0;
        for (var i = 0; i < angular.element('[class^=fcheck1]').length; i++) {
            if (angular.element('.fcheck1' + i).is(':checked') == true) {
                bool += 1;
            }
        }
        if (bool > 0) {
            $scope.folderAct = true;
        } else {
            $scope.folderAct = false;
        }
    }

    //Freelance folder check on action display
    $scope.folderSelectFr = function () {
        var bool = 0;
        for (var i = 0; i < angular.element('[class^=fcheck]').length; i++) {
            if (angular.element('.fcheck' + i).is(':checked') == true) {
                bool += 1;
            }
        }
        if (bool > 0) {
            $scope.folderAct = true;
        } else {
            $scope.folderAct = false;
        }
    }

    setTimeout(() => {
        $('.ajax-upload-dragdrop:eq(1)').hide();
    }, 1500);

}).controller('filemanagerCtrl', function ($scope, $log, $location, fileReader, rest, $uibModal, $window, $rootScope, $timeout, $route, $routeParams, $interval) {
    $scope.clientId = $window.localStorage.getItem("contactclientId");
    $scope.userId = $window.localStorage.getItem("contactUserId");
    $scope.userIdInternal = $window.localStorage.getItem("internal");
    $scope.IndirectClientId = $window.localStorage.getItem("IndirectClientId");
    $scope.copyfile = [];
    var FilesLength;
    //popup close
    $scope.popupCloseFile = function () {
        $window.localStorage.setItem("contactclientId", "");
        $window.localStorage.setItem("contactUserId", "");
        $window.localStorage.setItem("internal", "");
        $window.localStorage.setItem("IndirectClientId", "");
        $window.close();
    }

    // serachTextBox Animation
    $scope.searchBox = function () {
        angular.element('#fileSearchBox').addClass('animationtextBox');
    }

    // onClick upload button hideShow element
    $scope.uploadbtn = function () {
        var id = $window.localStorage.getItem("parentId");
        if ($window.sessionStorage.getItem("ExternalUserId") != null) {
            rest.path = 'checkDefaultFolderProjectExternal/' + id;
            rest.get().success(function (data) {
                if (data == 200) {
                    notification('You can not upload files here.', 'error');
                } else {
                    angular.element('#uploadContainer').toggleClass('hideShowClass');
                }
            }).error(errorCallback);
        } else {
            angular.element('#uploadContainer').toggleClass('hideShowClass');
        }
        $('.ajax-upload-dragdrop:eq(1)').hide();
    }

    if ($scope.clientId != null) {
        if ($scope.clientId.trim().length == 0) {
            $scope.clientId = $window.localStorage.getItem("contactclientIdNew");
        }
    }
    $scope.getScoopItemFileCount = function () {
        var id = $window.localStorage.getItem("scoopFolderRoot");

        rest.path = 'getFilestotal/' + id;
        rest.get().success(function (data) {
            if (data) {
                $scope.Filestotal = data[0].totalfile;
                $window.localStorage.setItem("scoopFolderCount", data[0].totalfile);
            }
            //angular.element('#filescount' + val.itemId).text($scope.Filestotal);
        }).error(errorCallback);
    }
    //project root get display front
    if ($routeParams.id == 'client' && $scope.clientId != "") {
        if ($window.localStorage.getItem("parentId") == undefined || $window.localStorage.getItem("parentId") == 0) {
            rest.path = 'Clientfilefront/' + $scope.clientId + '/' + 'direct';
            rest.get().success(function (data) {
                $window.localStorage.setItem("parentId", data.fmanager_id);
                $window.localStorage.setItem("rootId", data.fmanager_id + '_directclient');
                $route.reload();
            }).error(errorCallback);
        }
    } else if ($routeParams.id == 'user' && $scope.userId != "") {
        if ($window.localStorage.getItem("parentId") == undefined || $window.localStorage.getItem("parentId") == 0) {
            rest.path = 'Userfilefront/' + $scope.userId; //External
            $window.sessionStorage.setItem("ExternalUserId", $scope.userId);

            rest.get().success(function (data) {
                $window.localStorage.setItem("parentId", data.fmanager_id);
                $window.localStorage.setItem("rootId", data.fmanager_id + '_externalresource');
                $route.reload();
            }).error(errorCallback);
        }
    } else if ($routeParams.id == 'internal' && $scope.userId != "") {
        if ($window.localStorage.getItem("parentId") == undefined || $window.localStorage.getItem("parentId") == 0) {
            rest.path = 'Userfilefront/' + $scope.userIdInternal; //Internal
            rest.get().success(function (data) {
                $window.localStorage.setItem("parentId", data.fmanager_id);
                $window.localStorage.setItem("rootId", data.fmanager_id + '_internalresource');
                $route.reload();
            }).error(errorCallback);
        }
    } else if ($routeParams.id == 'IndirectClient' && $scope.IndirectClientId != "") {
        if ($window.localStorage.getItem("parentId") == undefined || $window.localStorage.getItem("parentId") == 0) {
            rest.path = 'Clientfilefront/' + $scope.IndirectClientId + '/' + 'indirect';
            rest.get().success(function (data) {
                $window.localStorage.setItem("parentId", data.fmanager_id);
                $window.localStorage.setItem("rootId", data.fmanager_id + '_indirectclient');
                $route.reload();
            }).error(errorCallback);
        }
    } else if ($routeParams.id == 'item' && $window.localStorage.ItemFolderid) {
        if ($window.localStorage.getItem("parentId") == undefined || $window.localStorage.getItem("parentId") == 0) {
            rest.path = "Itemfilefront/" + $window.localStorage.orderID + '/' + $window.localStorage.ItemFolderid;
            rest.get().success(function (data) {
                $window.localStorage.setItem("parentId", data.fmanager_id);
                $route.reload();
            }).error(errorCallback);
        }
    }

    if ($window.localStorage.ItemFolderid) {
        $window.localStorage.setItem("scoopFolderRoot", $window.localStorage.ItemFolderid);
        //$interval($scope.getScoopItemFileCount,1000);            
    }

    $scope.chkfilesize = 0;
    $scope.chkfiletotal = [];
    $scope.allFilesArr = [];
    var allFilesArr = [];

    var uploadObj;
    $timeout(function () {
        uploadObj = $("#multipleupload").uploadFile({
            url: 'filemanager-upload.php',
            multiple: true,
            dragDrop: true,
            dragDropStr: "<span class='spandragdrop'><b>Drag & Drop Files</b></span>",
            fileName: "myfile",
            acceptFiles: "png",
            showPreview: true,
            previewHeight: "35px",
            previewWidth: "35px",
            maxFileCount: 5,
            maxFileSize: 15 * 1024 * 1024,
            showDelete: true,
            autoSubmit: false,
            //serialize:false,
            uploadStr: "<span class='fa fa-upload newUpload' style='color:#FFF;font-size:30px;'> </span>",
            onLoad: function (obj) { },
            /*afterUploadAll: function(obj) {
                //debugger
                notification('Files uploaded successfully', 'success');
                $timeout(function() {
                    angular.element('.ajax-file-upload-progress').css('display', 'none');
                    //$route.reload();
                }, 100);
                $timeout(function() {
                    $route.reload();
                    $scope.is_settimeout = 1;
                }, 200);
            },*/
            onCancel: function (files, pd) {
                $timeout(function () {
                    var filenameContains = angular.element('.ajax-file-upload-filename').text();
                    var length = angular.element("[class^='upimg']").length;
                    angular.forEach(angular.element("[class^='upimg']"), function (res, i) {
                        var upClassName = angular.element("[class^='upimg']")[i].className = 'upimg' + length;
                        length--;
                    })
                }, 100);

            },
            onSuccess: function (files, datalist, xhr, pd) {
                //debugger;
                var filenameContains = $(".ajax-file-upload-filename:contains('" + files[0] + "')");
                var fileType = files[0].substring(files[0].lastIndexOf(".") + 1, files[0].length);
                var fileDivText = $(".ajax-file-upload-filename:contains('" + files[0] + "')").text();
                if (fileDivText) {
                    var dataU = $('.upimg' + fileDivText.charAt(0)).text();
                }

                var size = fileDivText.substring(fileDivText.lastIndexOf(".") - 4, fileDivText.length).trim();
                var regExp = /\(([^)]+)\)/;
                var getFileSize = regExp.exec(size);
                $scope.name = dataU;
                $scope.f_id = 1;
                $scope.parent_id = $window.localStorage.getItem("parentId");
                if ($scope.filedata == undefined || $scope.filedata == " " || $scope.filedata == null) {
                    $scope.filedata = {};
                }
                $scope.role_id = $scope.userRight;
                $scope.filedata.role_id = $scope.role_id;
                $scope.filedata.name = $scope.name;
                $scope.filedata.f_id = $scope.f_id;
                $scope.filedata.parent_id = $scope.parent_id;
                $scope.filedata.filename = files[0];
                $scope.filedata.filetype = fileType;
                $scope.filedata.size = getFileSize[1];
                $scope.chkfilesize = getFileSize[1];

                //rest.path = 'fileAdd';
                /*var allFiles = {
                    role_id: $scope.role_id,
                    name: $scope.filedata.name,
                    f_id: 1,
                    parent_id: $scope.filedata.parent_id,
                    filename: $scope.filedata.filename,
                    filetype: $scope.filedata.filetype,
                    size: $scope.filedata.size
                };*/
                //$scope.allFilesArr.push(allFiles);
                var filelength = angular.element('.ajax-file-upload-statusbar').length;

                if (datalist) {
                    var alldata = JSON.parse(datalist);
                    var allFiles = {
                        role_id: $scope.role_id,
                        name: alldata["name"],
                        f_id: 1,
                        parent_id: $scope.filedata.parent_id,
                        ext: alldata["ext"],
                        size: alldata["size"]
                    };
                    $scope.allFilesArr.push(allFiles);

                    rest.path = 'fileAddScoop';
                    if (filelength == $scope.allFilesArr.length) {
                        rest.post($scope.allFilesArr).success(function (data) {
                            if (data.status == 200) {
                                notification('Files uploaded successfully', 'success');
                                $timeout(function () {
                                    $route.reload();

                                }, 100);
                            } else {
                                notification('Some files not uploaded!', 'success');
                                $timeout(function () {
                                    $route.reload();
                                }, 100);
                            }
                        }).error(errorCallback);
                    }
                }
                // previous code
                /*rest.post($scope.filedata).success(function(data) {

                }).error(errorCallback);*/
                jQuery('.ajax-file-upload-red').html('<i class="fa fa-close"></i>');

            },
            onSelect: function (files) {
                var isFilesAvailable = angular.element('.ajax-file-upload-container').css('border', '1px dotted #ddd');
                angular.forEach(files, function (val, i) {
                    fileReader.readAsDataUrl(files[i], $scope).then(function (result) {
                        var data = result;
                        var txt = $(".ajax-file-upload-filename:contains('" + files[i].name + "')");
                        var fileExtension = files[i].name.substr((files[i].name.lastIndexOf('.') + 1));
                        if (txt) {
                            var fullTxt = $(".ajax-file-upload-filename:contains('" + files[i].name + "')").text();
                            $('<div class="upimg' + fullTxt.charAt(0).toString() + '" style="display:none">' + data + '</div>').insertAfter(".ajax-file-upload-filename:contains('" + files[i].name + "')");
                        }
                        if (fileExtension != 'jpg' && fileExtension != 'png' && fileExtension != 'gif' && fileExtension != 'svg') {
                            var previewContainer = $('.upimg' + fullTxt.charAt(0).toString()).parent().children(':first-child');
                            previewContainer.css('display', 'block', 'margin-left', '40px');
                            previewContainer.css('margin-left', '55px');
                            var DefaultImgPath = "assets/img/file_icon/fileicon.png";
                            if (fileExtension == 'docx' || fileExtension == 'doc') {
                                DefaultImgPath = "assets/img/file_icon/doc.png";
                            }
                            if (fileExtension == 'xlsx' || fileExtension == 'xlsm' || fileExtension == 'xls' || fileExtension == 'csv') {
                                DefaultImgPath = "assets/img/file_icon/xls.png";
                            }
                            if (fileExtension == 'pdf') {
                                DefaultImgPath = "assets/img/file_icon/pdf.png";
                            }
                            if (fileExtension == 'msg') {
                                DefaultImgPath = "assets/img/file_icon/fileicon.png";
                            }
                            if (fileExtension == 'ppt') {
                                DefaultImgPath = "assets/img/file_icon/ppt.png";
                            }
                            if (fileExtension == 'zip' || fileExtension == 'gz' || fileExtension == 'rar') {
                                DefaultImgPath = "assets/img/file_icon/zip.png";
                            }
                            if (fileExtension == 'mp3' || fileExtension == 'wav' || fileExtension == 'wma') {
                                DefaultImgPath = "assets/img/file_icon/mp3.png";
                            }
                            if (fileExtension == 'mp4' || fileExtension == 'wmv' || fileExtension == 'avi' || fileExtension == '3gp' || fileExtension == 'mov' || fileExtension == 'vob') {
                                DefaultImgPath = "assets/img/file_icon/video.png";
                            }
                            if (fileExtension == 'txt' || fileExtension == 'html' || fileExtension == 'htm' || fileExtension == 'js' || fileExtension == 'css' || fileExtension == 'vob' || fileExtension == 'sql' || fileExtension == 'tiff' || fileExtension == 'ttf') {
                                DefaultImgPath = "assets/img/file_icon/video.txt";
                            }
                            previewContainer.attr('src', DefaultImgPath);
                        }
                        jQuery('.ajax-file-upload-cancel').html('<i class="fa fa-close"></i>');

                    });
                });

                return true; //to allow file submission.
            },
        });
        $('.ajax-upload-dragdrop:eq(1)').hide();
        jQuery('.ajax-file-upload-cancel').html('<i class="fa fa-close"></i>');
        jQuery('.ajax-file-upload-red').html('<i class="fa fa-close"></i>');

        //angular.element('.ajax-file-upload-cancel').html('test')
        $scope.IsVisible = false;
        $scope.foldertree = function (id, parent_id) {
            //angular.element('.ftr'+id).toggleClass('hideShowClass');
            var isopenFolder = 0;
            //if($('.ftr'+id).is(":hidden")){
            if ($('.ft' + parent_id + id).is(":hidden")) {
                //$('.ftr'+id).show();
                $('.ft' + parent_id + id).show();
                isopenFolder = 1;
            }
            if (isopenFolder == 0) {
                //$('.ftr'+id).hide();
                $('.ft' + parent_id + id).hide();
            }
        }
        $scope.foldertreeChild = function (id, parent_id) {

            var isopenFolderChld = 0;
            if ($('.nch' + parent_id + id).is(":hidden")) {
                $('.nch' + parent_id + id).show();
                isopenFolderChld = 1;
            }
            if (isopenFolderChld == 0) {
                $('.nch' + parent_id + id).hide();
            }
        }

    }, 1000);

    $timeout(function () {
        $('.ajax-upload-dragdrop:eq(1)').hide();
    }, 500);

    $timeout(function () {
        $scope.addToDownload = function (fimg) {
            const a = document.createElement('a');
            a.download = fimg;
            a.href = 'uploads/fileupload/' + fimg;
            a.click();
        }
    }, 500);


    $scope.addToCopy = function (fid) {
        var chkForClass = angular.element('#' + fid).hasClass('activeselect');
        var alreadyInCopy = false;
        if (chkForClass == false) {
            angular.forEach($scope.copyfile, function (value, key) {
                if (value.id == fid) {
                    alreadyInCopy = true;

                }
            });
            if (alreadyInCopy) {
                alert('File already copied');
                angular.element('#' + fid).addClass('activeselect');
            } else {
                angular.element('#' + fid).addClass('activeselect');
                $scope.copyfile.push({
                    id: fid
                });
                //angular.element('#files_count').text($scope.copyfile.length);

            }
        } else if (chkForClass == true) {
            angular.element('#' + fid).removeClass('activeselect');
            angular.forEach($scope.copyfile, function (value, key) {
                if (value.id == fid) {
                    $scope.copyfile.splice(key, 1);
                    angular.element('#' + fid).removeClass('activeselect');
                }
            });
            //angular.element('#files_count').text($scope.copyfile.length);
        }
        angular.element('#files_count').text($scope.copyfile.length);
        $scope.is_setint = 1;
    }
    $scope.clearCopy = function () {
        if ($scope.copyfile.length == 0) {
            $.each($('file'), function () {
                if (angular.element('#' + this.id).hasClass('activeselect')) {
                    angular.element('#' + this.id).removeClass('activeselect')
                }
            });
            angular.element('#files_count').text('0');
            $scope.copyfile = [];
        } else {
            angular.forEach($scope.copyfile, function (value, key) {
                angular.element('#' + value.id).removeClass('activeselect');
            });
            $scope.copyfile = [];
            angular.element('#files_count').text('0');
        }

    }

    // Keyboard keypress Event fo File Manager
    $(window).keydown(function (event) {
        if (event.ctrlKey && event.keyCode == 86) { //CTRL + V
            if ($scope.copyfile.length > 0 && angular.element('#files_count').text() != 0) {
                angular.forEach($scope.copyfile, function (value, key) {
                    value.parent = $window.localStorage.getItem("parentId");
                });
                $scope.showLoder = true;
                $scope.copyfile = JSON.stringify($scope.copyfile);
                $routeParams.id = JSON.parse($scope.copyfile)[0].id;
                rest.path = 'fileManagerPaste';
                rest.put($scope.copyfile).success(function (data) {
                    $scope.copyfile = [];
                    $route.reload();
                }).error(errorCallback);
            } else {
                notification('No selected Files', 'warning');
            }
            event.preventDefault();
            event.stopImmediatePropagation();
        } else if (event.ctrlKey && event.keyCode == 65) { //CTRL + A Key Event
            FilesLength = angular.element('file').length;
            if (FilesLength > 0) {
                $scope.copyfile = [];
                $.each($('file'), function () {
                    angular.element('#' + this.id).addClass('activeselect');
                    $scope.copyfile.push({
                        id: this.id
                    });
                });
                angular.element('#files_count').text($scope.copyfile.length);
            }
            event.preventDefault();
            event.stopImmediatePropagation();
        } else if (event.ctrlKey && event.keyCode == 67) { //CTRL + C Key Event
            FilesLength = angular.element('file').length;
            $scope.copyfile = [];
            if (FilesLength > 0) {
                $.each($('file'), function () {
                    if (angular.element('#' + this.id).hasClass('activeselect')) {
                        $scope.copyfile.push({
                            id: this.id
                        });
                    }
                });
                angular.element('#files_count').text($scope.copyfile.length);
                //notification('Files copied.','warning');
            }
            event.preventDefault();
            event.stopPropagation();
        } else if (event.keyCode == 46) { //Delete Key Event
            FilesLength = angular.element('file').length;
            if (FilesLength > 0) {
                $.each($('file'), function () {
                    if (angular.element('#' + this.id).hasClass('activeselect')) {
                        $scope.showLoder = true;
                        angular.element('#' + this.id).removeClass('activeselect');
                        var folderId = this.id;
                        var image = angular.element('#' + this.id).text();
                        rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                        rest.delete().success(function (data) {
                            $scope.copyfile = [];
                            $timeout(function () {
                                $route.reload();
                            }, 100);
                        })
                    }
                });
            }
            event.preventDefault();
            event.stopImmediatePropagation();
        } //else if(event.keyCode == 8){//Backspace Key event
        //     var eventElement = $(event.target)[0].id;
        //     if(eventElement == 'fileSearchBox'){

        //     }else{
        //         $scope.higherlevelFolder($window.localStorage.getItem("parentId"));
        //         event.preventDefault();
        //         event.stopImmediatePropagation();
        //     }
        // }
    });


    $scope.showLoder = false;

    // Delete all selected files
    $scope.deleteSelected = function () {
        FilesLength = angular.element('file').hasClass('activeselect');
        if (FilesLength) {
            bootbox.confirm("Are you sure you want to delete?", function (result) {
                if (result == true) {
                    $scope.copyfile = [];
                    FilesLength = angular.element('file').hasClass('activeselect');
                    if (FilesLength) {
                        $.each($('file'), function () {
                            if (angular.element('#' + this.id).hasClass('activeselect')) {
                                $scope.copyfile.push({
                                    id: this.id
                                });
                            }
                        });
                        $scope.copyfile = JSON.stringify($scope.copyfile);
                        $routeParams.id = JSON.parse($scope.copyfile)[0].id
                        $scope.showLoder = true;
                        rest.path = 'filemanagerfolderDeleteMultiple';
                        rest.put($scope.copyfile).success(function (data) {
                            $route.reload();
                        })
                    }
                } else {
                    $.each($('file'), function () {
                        if (angular.element('#' + this.id).hasClass('activeselect')) {
                            angular.element('#' + this.id).removeClass('activeselect');
                        }
                    });
                    $scope.copyfile = [];
                    angular.element('#files_count').text($scope.copyfile.length);
                }
            });
        } else {
            notification('No files selected', 'warning');
        }
    }

    // Upload button click will start uploading uploadObj 
    $scope.uploadClick = function () { //uploadObj
        var isFilesAvailable = angular.element('.ajax-file-upload-container').html().toString().length;
        if (isFilesAvailable > 0) {
            uploadObj.startUpload();
        } else {
            notification('No Files Selected.', 'warning');
        }
    }
    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope).then(function (result) {
            if (file.size > 15000000) {
                notification('Please select file less than 15 MB.', 'warning');
                return false;
            } else {
                $scope.filesize = bytesToSize(file.size);
                $scope.filename = file.name;

                $scope.filetype = file.type;
                var t = $scope.filename.split('.');
                var type = t.pop();
                $scope.typefile = type;
                $scope.imgshow = false;
                $scope.imageSrc = result;
            }
        });
    };

    //file insert
    $scope.uploadFile = function (data) {
        if (data) {
            $scope.name = data;

            $scope.filename = angular.element('#filename').text();
            $scope.filetype = angular.element('#filetype').text();
            $scope.size = angular.element('#filesize').text();
            $scope.f_id = 1;
            $scope.parent_id = $window.localStorage.getItem("parentId");
            if ($scope.filedata == undefined || $scope.filedata == " " || $scope.filedata == null) {
                $scope.filedata = {};
            }
            $scope.role_id = $scope.userRight;
            $scope.filedata.role_id = $scope.role_id;
            $scope.filedata.name = $scope.name;
            $scope.filedata.f_id = $scope.f_id;
            $scope.filedata.parent_id = $scope.parent_id;
            $scope.filedata.filename = $scope.filename;
            $scope.filedata.filetype = $scope.filetype;
            $scope.filedata.size = $scope.size;
            rest.path = 'fileAdd';


        } else {
            notification('Please Select filedata', 'information');
        }
    }
    $scope.rootfolder = $window.localStorage.getItem("parentId");
    //file root parent and high levelset
    if ($window.localStorage.getItem("parentId") != 0 && $window.localStorage.getItem("parentId") != undefined) {
        var id = $window.localStorage.getItem("parentId");
        rest.path = 'fileparentNameGet/' + id;
        rest.get().success(function (data) {
            if (data.parent_id == 0) {
                $scope.roothigher = false;
            } else {
                $scope.roothigher = true;
            }
            $scope.parentName = data.name;
        }).error(errorCallback);
    }
    var is_setint = 0;
    $timeout(function () {

        //var setintrvl = setInterval(function() {
        if ($window.localStorage.getItem("parentId") != " " && $window.localStorage.getItem("parentId") != undefined) {
            var id = $window.localStorage.getItem("parentId");
            var externalResourceUserId = null;
            if ($window.sessionStorage.getItem("ExternalUserId") != null) {
                var externalResourceUserId = $window.sessionStorage.getItem("ExternalUserId");
            }

            rest.path = 'filefolderGet/' + id + '/' + $routeParams.id + '/' + externalResourceUserId;
            rest.get().success(function (data) {
                $timeout(function () {
                    $scope.displayfolder = data;
                    //Change ItemFolder Name to item001 -> Files-001
                    angular.forEach($scope.displayfolder, function (val, i) {
                        $scope.displayfolder[i].countchild = val.categories.length;
                        $scope.displayfolder[i].name = val.name.toString();
                        if (val.item_id != 0) {
                            var ItemNo;
                            ItemNo = val.name.match(/\d+$/);
                            if (ItemNo) {
                                $scope.displayfolder[i].name = 'Files-' + ItemNo[0];
                            }
                        }
                    })

                    // $timeout(function() {
                    //  var exProjectFolderId = '';
                    //  var keepGoing = true;
                    //  angular.forEach($scope.displayfolder,function(val,i){
                    //      if(keepGoing){
                    //          if(val.is_ex_project_folder == 1){
                    //        exProjectFolderId = val.fmanager_id;
                    //    }
                    //    if(val.is_project_folder == 1){

                    //        
                    //        val.parent_id = exProjectFolderId;
                    //        
                    //    }
                    //    keepGoing = false;
                    //      }
                    //  })
                    // },100);

                    $scope.headerfilename(id);

                    // context-menu for file paste
                    $scope.menuOptionsPaste = [
                        ['Paste', function ($itemScope) {
                            angular.forEach($scope.copyfile, function (value, key) {
                                value.parent = $window.localStorage.getItem("parentId");
                            });
                            $scope.copyfile = JSON.stringify($scope.copyfile);
                            $routeParams.id = JSON.parse($scope.copyfile)[0].id;
                            rest.path = 'fileManagerPaste';
                            rest.put($scope.copyfile).success(function (data) {
                                $route.reload();
                            }).error(errorCallback);

                        }, function ($itemScope, $event, modelValue) {
                            if ($itemScope.copyfile.length > 0) {
                                return true;
                            } else {
                                return false
                            }
                        }],

                        ['Refresh', function ($itemScope) {
                            $route.reload();
                        }],
                    ];

                    $timeout(function () {
                        var smenu = 0;
                        $scope.menuRclkID = '';

                        var setintrvlMenu = setInterval(function () {
                            $("folder, file").contextmenu(function (e) {
                                //alert($(this).attr('menuoptionIdName'));
                                $scope.menuRclkID = '';
                                var ele = $(this).attr('menuoptionIdName');
                                if (ele) {
                                    var eleProperty = ele.substring(
                                        ele.lastIndexOf(",[") + 2,
                                        ele.lastIndexOf("],")
                                    );
                                    var filename = ele.substring(
                                        ele.lastIndexOf("],") + 2
                                    );
                                    $scope.menuRclkID = ele.split(',')[0];
                                    $scope.menuRclkfileExt = eleProperty.split(',')[0];
                                    $scope.menuRclkfileDate = eleProperty.split(',')[1];
                                    $scope.menuRclkfileSize = eleProperty.split(',')[2];
                                    $scope.menuRclkName = filename;
                                }
                                if (ele == 0) {
                                    $scope.menuRclkID = '';
                                }
                                //alert($scope.menuRclkID);
                                if (smenu == 100) {
                                    clearInterval(setintrvlMenu);
                                }
                                ++smenu;
                                //event.preventDefault();
                                //event.stopImmediatePropagation();  
                            });
                        }, 200);
                    }, 1000);

                    // context-menu for folder
                    $scope.menuOptionsFolder = [
                        ['Open', function ($itemScope) {
                            $scope.findfile($itemScope.display.fmanager_id, $itemScope.display.name);
                        }],

                        ['Download', function ($itemScope) {
                            var ItemcodeNumber = $window.localStorage.ItemcodeNumber;
                            var ItemClient = $window.localStorage.ItemClient;
                            ItemcodeNumber = (ItemcodeNumber == undefined) ? "" : ItemcodeNumber + '_';
                            ItemClient = (ItemClient == undefined) ? "" : ItemClient + '_';

                            var preFolderName = ItemcodeNumber + ItemClient;
                            if ($scope.menuRclkID) {
                                var folderId = $scope.menuRclkID;
                                var tmsfolder = preFolderName + $scope.menuRclkName;
                            } else {
                                var folderId = $itemScope.display.fmanager_id;
                                var tmsfolder = preFolderName + $itemScope.display.name;
                            }

                            if (!tmsfolder) {
                                tmsfolder = 'TMS_';
                            }
                            if (folderId != undefined) {
                                $scope.showLoder = true;
                                rest.path = 'filemanagerfolderDownload/' + folderId;
                                rest.get().success(function (data) {
                                    $scope.downloadAllfile = data;
                                    var zipdwnld = new JSZip();
                                    var fileUrls = [];
                                    var folderArr = [];
                                    var parentFolderArr = [];
                                    var fileIndex = 0;
                                    angular.forEach($scope.downloadAllfile, function (val, i) {
                                        if (val.ext != '') {
                                            var fimg = val.name;
                                            //zipdwnld.file(fimg, "uploads/fileupload/"+fimg);
                                            //fileList.push("uploads/fileupload/"+fimg);
                                            var fimgUrl = "uploads/fileupload/" + fimg;
                                            if (fileUrlExists(fimgUrl)) {
                                                fileUrls.push({
                                                    'parent_id': val.parent_id,
                                                    'full_url': fimgUrl,
                                                    'file_name': fimg,
                                                    'folderurl_dir': val.folderurl,
                                                });
                                            }
                                        }
                                        var fmid = 0;
                                        if (val.ext == '') {
                                            var foldername = val.name;
                                            var fmid = val.fmanager_id;
                                            folderArr.push({
                                                'fmanager_id': val.fmanager_id,
                                                'folder_name': val.name,
                                                'folderurl_dir': val.folderurl,
                                            });

                                            //zipdwnld.folder(foldername);
                                        }

                                        /*if(val.childfile){
                                            angular.forEach(val.childfile,function(val2,i2){
                                                var prntId = 1;
                                                if(fmid == val2.fmanager_id){
                                                }
                                                if(val2.ext!=''){
                                                    var fimg2 = val2.name;
                                                    //fileList.push("uploads/fileupload/"+fimg2);
                                                    var fimgUrl2 = "uploads/fileupload/"+fimg2;
                                                    if(fileUrlExists(fimgUrl2)){
                                                        fileUrls.push(
                                                            {
                                                                'parent_id':val2.parent_id,
                                                                'full_url':fimgUrl2,
                                                                'file_name':val2.name,
                                                                'folderurl_dir':val2.folderurl
                                                            });
                                                    }
                                                }
                                                if(fimg2){
                                                    //zipdwnld.file(fimg2, "uploads/fileupload/"+fimg2);
                                                }
                                                if(val2.ext==''){
                                                    var foldername2 = val2.name;
                                                    //zipdwnld.folder(foldername2);
                                                    folderArr.push({
                                                        'fmanager_id':val2.fmanager_id,
                                                        'folder_name':val2.name,
                                                        'folderurl_dir':val2.folderurl
                                                    });
                                                }
                                            });
                                            //$scope.childData = val2;
                                        }*/

                                    })

                                    // files download
                                    var file_count = 0;
                                    fileUrls.forEach(function (url) {
                                        JSZipUtils.getBinaryContent(url.full_url, function (err, data) {
                                            if (err) {
                                                throw err;
                                                $scope.showLoder = false;
                                            }

                                            var folderName = '';
                                            folderArr.forEach(function (folders) {
                                                /*if(folders.fmanager_id == url.parent_id){
                                                    folderName = folders.folder_name+'/';
                                                }else{
                                                    zipdwnld.folder(folders.folder_name);
                                                }*/
                                                zipdwnld.folder(folders.folderurl_dir);
                                            });
                                            file_count++;
                                            if (data != null) {
                                                zipdwnld.file(url.folderurl_dir + url.file_name, data, { binary: true });

                                                if (file_count == fileUrls.length) {
                                                    zipdwnld.generateAsync({ type: 'blob' }).then(function (content) {
                                                        saveAs(content, tmsfolder + ".zip");
                                                    }).then(function () {
                                                        $scope.showLoder = false;
                                                        $route.reload();
                                                    });
                                                    $timeout(function () {
                                                        $scope.showLoder = false;
                                                        //$route.reload();
                                                    }, 10000);
                                                }
                                            }

                                        });
                                    });

                                    $timeout(function () {
                                        if (fileUrls.length == 0 && folderArr.length > 0) {
                                            folderArr.forEach(function (folders) {
                                                zipdwnld.folder(folders.folderurl_dir);
                                            });
                                            zipdwnld.generateAsync({ type: 'blob' }).then(function (content) {
                                                saveAs(content, tmsfolder + ".zip");
                                            }).then(function () {
                                                $scope.showLoder = false;
                                                $route.reload();
                                            });
                                            //$scope.showLoder = false;
                                        }
                                    }, 1000);
                                })
                                $timeout(function () {
                                    $scope.showLoder = false;
                                }, 10000);
                            }

                        }],

                        ['Delete', function ($itemScope) {
                            if ($itemScope.display.is_default_folder == 1) {
                                notification('You can not delete default folders', 'warning');
                            } else {
                                bootbox.confirm("Are you sure you want to delete this folder?", function (result) {
                                    //var folderId = $itemScope.display.fmanager_id;
                                    //var image = $itemScope.display.name;
                                    if ($scope.menuRclkID) {
                                        var folderId = $scope.menuRclkID;
                                        var image = $scope.menuRclkName;
                                    } else {
                                        var folderId = $itemScope.display.fmanager_id;
                                        var image = $itemScope.display.name;
                                    }
                                    if (folderId != undefined) {
                                        $scope.showLoder = true;
                                        if (result == true) {
                                            rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                                            rest.delete().success(function (data) {
                                                $scope.copyfile = [];
                                                $route.reload();
                                            })
                                        } else {
                                            $scope.showLoder = false;
                                        }
                                    }
                                });
                            }
                        }],

                        ['Rename', function ($itemScope) {
                            if ($itemScope.display.is_default_folder == 1) {
                                notification('You can rename default folders', 'warning');
                            } else {
                                var newName = prompt("Please enter name");
                                if (newName) {
                                    if ($scope.menuRclkID) {
                                        var folderId = $scope.menuRclkID;
                                        var image = $scope.menuRclkName;
                                    } else {
                                        var folderId = $itemScope.display.fmanager_id;
                                        var image = $itemScope.display.name;
                                    }
                                    if (folderId != undefined) {
                                        if ($scope.folderData == undefined || $scope.folderData == null || $scope.folderData == "") {
                                            $scope.folderData = {};
                                        }
                                        $scope.name = newName;
                                        $scope.image = image;
                                        $scope.folderData.name = $scope.name;
                                        $scope.folderData.image = $scope.image;
                                        $routeParams.id = folderId;

                                        rest.path = 'fileManagerUpdate';
                                        rest.put($scope.folderData).success(function (data) {
                                            $route.reload();
                                        }).error(errorCallback);
                                    }
                                }
                            }

                        }],
                    ];

                    // context-menu for files
                    $scope.menuOptionsFiles = [
                        ['Download', function ($itemScope) {
                            if ($scope.menuRclkID) {
                                var fileID = $scope.menuRclkID;
                                var fileName = $scope.menuRclkName;
                            } else {
                                var fileID = $itemScope.display.fmanager_id;
                                var fileName = $itemScope.display.name;
                            }
                            /*var a = document.createElement('a');
                            document.body.appendChild(a);
                            
                            a.download = fileName;
                            a.href = $("#download" + fileID).attr('href');
                            a.click();*/
                            const a = document.createElement('a');
                            a.download = fileName;
                            a.href = 'uploads/fileupload/' + fileName;
                            a.click();
                            $timeout(function () {
                                $scope.menuRclkID = '';
                                $scope.menuRclkName = '';
                            }, 500);
                        }],

                        ['Delete', function ($itemScope) {
                            bootbox.confirm("Are you sure you want to delete?", function (result) {
                                if (result == true) {
                                    $scope.copyfile = [];
                                    FilesLength = angular.element('file').hasClass('activeselect');

                                    if (FilesLength) {
                                        $.each($('file'), function () {
                                            if (angular.element('#' + this.id).hasClass('activeselect')) {
                                                $scope.copyfile.push({
                                                    id: this.id
                                                });
                                            }
                                        });
                                        $scope.copyfile = JSON.stringify($scope.copyfile);
                                        $routeParams.id = JSON.parse($scope.copyfile)[0].id
                                        $scope.showLoder = true;
                                        rest.path = 'filemanagerfolderDeleteMultiple';
                                        rest.put($scope.copyfile).success(function (data) {
                                            $scope.copyfile = [];
                                            $route.reload();
                                        })
                                    } else {
                                        if ($scope.menuRclkID) {
                                            var folderId = $scope.menuRclkID;
                                            var image = $scope.menuRclkName;
                                        } else {
                                            var folderId = $itemScope.display.fmanager_id;
                                            var image = $itemScope.display.name;
                                        }
                                        if (folderId != undefined) {
                                            $scope.showLoder = false;
                                            if (result == true) {
                                                rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                                                rest.delete().success(function (data) {
                                                    $scope.copyfile = [];
                                                    $route.reload();
                                                })
                                            }
                                        }
                                    }
                                } else {
                                    $.each($('file'), function () {
                                        if (angular.element('#' + this.id).hasClass('activeselect')) {
                                            angular.element('#' + this.id).removeClass('activeselect');
                                        }
                                    });
                                    $scope.copyfile = [];
                                }
                            });
                        }],

                        ['Rename', function ($itemScope) {
                            $.each($('file'), function () {
                                if (angular.element('#' + this.id).hasClass('activeselect')) {
                                    angular.element('#' + this.id).removeClass('activeselect');
                                }
                            });
                            $timeout(function () {
                                var newName = prompt("Please enter name");
                                if (newName) {
                                    if ($scope.menuRclkID) {
                                        var folderId = $scope.menuRclkID;
                                        var image = $scope.menuRclkName;
                                    } else {
                                        var folderId = $itemScope.display.fmanager_id;
                                        var image = $itemScope.display.name;
                                    }
                                    if (folderId != undefined) {
                                        if ($scope.folderData == undefined || $scope.folderData == null || $scope.folderData == "") {
                                            $scope.folderData = {};
                                        }
                                        $scope.name = newName;
                                        $scope.image = image;
                                        $scope.folderData.name = $scope.name;
                                        $scope.folderData.image = $scope.image;
                                        $routeParams.id = folderId;

                                        rest.path = 'fileManagerUpdate';
                                        rest.put($scope.folderData).success(function (data) {
                                            $route.reload();
                                        }).error(errorCallback);
                                    }
                                } //else{
                                // notification('Please enter Name', 'information');
                                //}
                            }, 100);
                        }],

                        ['Copy', function ($itemScope) {
                            angular.forEach($scope.copyfile, function (value, key) {
                                angular.element('#' + value.id).removeClass('activeselect');
                            });
                            FilesLength = angular.element('file').hasClass('activeselect');
                            if (FilesLength) {
                                $.each($('file'), function () {
                                    if (angular.element('#' + this.id).hasClass('activeselect')) {
                                        $scope.copyfile.push({
                                            id: this.id
                                        });
                                        angular.element('#' + this.id).addClass('activeselect');
                                        angular.element('#files_count').text($scope.copyfile.length);
                                    }
                                });
                                angular.forEach($scope.copyfile, function (value, key) {
                                    angular.element('#' + value.id).addClass('activeselect');
                                });
                            } else {
                                if ($scope.menuRclkID) {
                                    var folderId2 = $scope.menuRclkID;
                                } else {
                                    var folderId2 = $itemScope.display.fmanager_id;
                                }
                                var alreadyInCopy = false;
                                angular.forEach($scope.copyfile, function (value, key) {
                                    if (value.id == folderId2) {
                                        alreadyInCopy = true;
                                    }
                                });
                                if (alreadyInCopy) {

                                    angular.forEach($scope.copyfile, function (value, key) {
                                        angular.element('#' + value.id).addClass('activeselect');
                                    });
                                    alert('File already copied');
                                    angular.element('#' + $itemScope.display.fmanager_id).addClass('activeselect');
                                } else {

                                    if ($scope.menuRclkID) {
                                        var folderId = $scope.menuRclkID;
                                        var image = $scope.menuRclkName;
                                    } else {
                                        var folderId = $itemScope.display.fmanager_id;
                                        var image = $itemScope.display.name;
                                    }
                                    $scope.copyfile = [];
                                    angular.element('#' + folderId).addClass('activeselect');
                                    $scope.copyfile.push({
                                        id: folderId
                                    });
                                    angular.element('#files_count').text($scope.copyfile.length);
                                    $timeout(function () {
                                        $scope.menuRclkID = '';
                                    }, 500);
                                }
                            }
                        }],

                        ['Properties', function ($itemScope) {
                            if ($scope.menuRclkID) {
                                var fileName = $scope.menuRclkName;
                                var fileSize = $scope.menuRclkfileSize;
                                var fileExt = $scope.menuRclkfileExt;
                                var FileCreatedDate = $scope.menuRclkfileDate;

                            } else {
                                var fileName = $itemScope.display.name;
                                var fileSize = $itemScope.display.size;
                                var fileExt = $itemScope.display.ext;
                                var FileCreatedDate = $itemScope.display.created_date;
                            }
                            var propertyHtml = '<div class="alert" style="word-wrap: break-word;">' +
                                '<strong>Name&nbsp;:&nbsp;</strong>&nbsp;' + fileName + '<br><br>' +
                                '<strong>Size&nbsp;:&nbsp;</strong>' + fileSize + '<br><br>' +
                                '<strong>Extention&nbsp;:&nbsp;</strong>' + fileExt + '<br><br>' +
                                '<strong>Created Date&nbsp;:&nbsp;</strong>' + moment(FileCreatedDate).format($window.localStorage.getItem('global_dateFormat') + ' ' + 'HH:mm:ss') +
                                '</div>';
                            $('#propertyModal').find('.modal-body').html(propertyHtml);
                            $('#propertyModal').modal('show');

                            $timeout(function () {
                                $scope.menuRclkID = '';
                            });
                        }],
                    ];
                }, 200);
            }).error(errorCallback);
        } else {
            rest.path = 'fileManagerGet';
            rest.get().success(function (data) {
                $scope.displayfolder = data;
                //Change ItemFolder Name to item001 -> Files-001
                angular.forEach($scope.displayfolder, function (val, i) {
                    if (val.categories) {
                        $scope.displayfolder[i].countchild = val.categories.length;
                    }
                    $scope.displayfolder[i].name = val.name.toString();

                    if (val.item_id != 0) {
                        var ItemNo;
                        ItemNo = val.name.match(/\d+$/);
                        if (ItemNo) {
                            $scope.displayfolder[i].name = 'Files-' + ItemNo[0];

                        }
                    }
                })

                $window.localStorage.setItem("parentId", $scope.displayfolder[0].parent_id);
            }).error(errorCallback);
        }

        ++is_setint;
        if (is_setint == 2) {
            //clearInterval(setintrvl);    
        }

        //},3000);

    }, 1000);

    //nested file
    $scope.findfile = function (id, name) {
        var externalResourceUserId = null;
        if ($window.sessionStorage.getItem("ExternalUserId") != null) {
            var externalResourceUserId = $window.sessionStorage.getItem("ExternalUserId");
        }
        rest.path = 'filefolderGet/' + id + '/' + $routeParams.id + '/' + externalResourceUserId;
        rest.get().success(function (data) {
            $scope.displayfolder = data;

            //Change ItemFolder Name to item001 -> Files-001
            angular.forEach($scope.displayfolder, function (val, i) {
                $scope.displayfolder[i].countchild = val.categories.length;
                $scope.displayfolder[i].name = val.name.toString();

                if (val.item_id != 0) {
                    var ItemNo;
                    ItemNo = val.name.match(/\d+$/);
                    if (ItemNo) {
                        $scope.displayfolder[i].name = 'Files-' + ItemNo[0];

                    }
                }
            })
            $scope.headerfilename(id);
        }).error(errorCallback);
    }

    $scope.headerfilename = function (id, name) {
        if (id == 0 || id == 'null' || id == 'undefined') {
            $scope.rootshow = false;
        } else {
            $scope.rootshow = true;
        };
        $scope.folid = id;
        $window.localStorage.setItem("parentId", $scope.folid);
    }

    // redirect to higher level directiory or file

    $scope.GetRootFolderName = function () {
        var rootId = $window.localStorage.getItem("rootId");
        $routeParams.id = rootId;

        rest.path = 'getRootFolder';
        rest.put(rootId).success(function (data) {
            $scope.rootFolderName = '';
            if (data != null) {
                $scope.rootFolderName = data.name;
            }

        }).error(errorCallback);
    }
    $scope.GetRootFolderName();
    // redirect to higher level directiory or file
    $scope.higherlevelFolder = function (id) {
        var externalResourceId = null;
        if ($window.sessionStorage.getItem("ExternalUserId") != null) {
            var externalResourceId = $window.sessionStorage.getItem("ExternalUserId");
        }

        $scope.rootInfo = $window.localStorage.getItem("parentId");
        $routeParams.id = id;
        rest.path = 'isParent';
        rest.put($scope.rootInfo).success(function (data) {
            if (data.client_id == 0 && data.in_client_id == 0 && data.user_id == 0) {
                rest.path = 'higherfolderGet/' + id + '/' + externalResourceId;
                rest.get().success(function (data) {
                    $scope.showLoder = true;
                    $scope.displayfolder = data.data;
                    var fid = [];
                    var fname = [];
                    if (data.info.parent_id == 0) {
                        $scope.rootshow = false;
                    }
                    angular.forEach(data.data, function (val, i) {

                        fid = val.parent_id;
                        fname = val.name;
                    })

                    //Change ItemFolder Name to item001 -> Files-001
                    angular.forEach($scope.displayfolder, function (val, i) {
                        $scope.displayfolder[i].countchild = val.categories.length;
                        $scope.displayfolder[i].name = val.name.toString();

                        if (val.item_id != 0) {
                            var ItemNo;
                            ItemNo = val.name.match(/\d+$/);
                            if (ItemNo) {
                                $scope.displayfolder[i].name = 'Files-' + ItemNo[0];
                            }
                        }
                    })

                    // if (externalResourceId != 'null') {
                    //     rest.path = 'checkRootFromFiles/' + fid + '/' + externalResourceId;
                    //     rest.get().success(function(data) {
                    //         if (data == 404) {
                    //             $scope.headerfilename(fid);
                    //             $window.localStorage.setItem("parentId", fid);
                    //             $window.localStorage.setItem("ProjectParent",false);
                    //         } else {
                    //             $scope.headerfilename(data[0].fmanager_id);
                    //             $window.localStorage.setItem("parentId", data[0].fmanager_id);
                    //             $window.localStorage.setItem("ProjectParent",'true');
                    //         }
                    //     }).error(errorCallback);
                    // }
                    $scope.headerfilename(fid);
                    $window.localStorage.setItem("parentId", fid);
                    $scope.showLoder = false;
                }).error(errorCallback);
            } else {
                // if($window.localStorage.getItem("ProjectParent") == 'true' && externalResourceUserId){
                //     rest.path = 'filefolderGet/' + $window.localStorage.getItem("parentId") + '/' + $routeParams.id + '/' + externalResourceUserId;
                //     rest.get().success(function(data) {
                //         $scope.displayfolder = data;
                //         $scope.headerfilename(id);
                //         $window.localStorage.setItem("ProjectParent",false);
                //     }).error(errorCallback);
                // }else{
                notification('You are in root directory.', 'warning');
                //}
            }
        }).error(errorCallback);

    }

    //change file manager action
    $scope.changefolderAction = function (action) {
        switch (action) {
            case "Rename as":
                $scope.renameshow = true;
                break;
            case "New folder":
                $scope.renameshow = false;
                break;
            case "Delete":
                $scope.renameshow = false;
                break;
        }
    }
    $scope.mkdir = function () {
        var id = $window.localStorage.getItem("parentId");
        if ($window.sessionStorage.getItem("ExternalUserId") != null) {
            rest.path = 'checkDefaultFolderProjectExternal/' + id;
            rest.get().success(function (data) {
                if (data == 200) {
                    notification('You can not create folder here.', 'error');
                } else {
                    var folderName = prompt("Please enter folder name");
                    if (folderName) {
                        var id = $window.localStorage.getItem("parentId");
                        var role = $scope.userRight;
                        rest.path = 'Newfoldermake/' + id + '/' + folderName + '/' + role;
                        rest.get().success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
            }).error(errorCallback);
        } else {
            var folderName = prompt("Please enter folder name");
            if (folderName) {
                var id = $window.localStorage.getItem("parentId");
                var role = $scope.userRight;
                rest.path = 'Newfoldermake/' + id + '/' + folderName + '/' + role;
                rest.get().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    // file manager action rename,delete,cut etc.
    $scope.folderAction = function (action, name) {
        switch (action) {
            case "Rename as":
                for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
                    var folderId = angular.element('#folderCheckdata' + i).val();
                    var image = angular.element('#folderCheckfile' + i).val();
                    if (folderId != undefined) {
                        if ($scope.folderData == undefined || $scope.folderData == null || $scope.folderData == "") {
                            $scope.folderData = {};
                        }
                        $scope.name = name;
                        $scope.image = image;
                        $scope.folderData.name = $scope.name;
                        $scope.folderData.image = $scope.image;
                        $routeParams.id = folderId;
                        rest.path = 'fileManagerUpdate';
                        rest.put($scope.folderData).success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
                break;
            case "New folder":
                if (name) {
                    var id = $window.localStorage.getItem("parentId");
                    var role = $scope.userRight;
                    rest.path = 'Newfoldermake/' + id + '/' + name + '/' + role;
                    rest.get().success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                } else {
                    notification('Enter Folder Name', 'information');
                }
                break;
            case "Delete":
                bootbox.confirm("Are you sure you want to delete this row?", function (result) {
                    for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
                        var folderId = angular.element('#folderCheckdata' + i).val();
                        var image = angular.element('#folderCheckfile' + i).val();
                        if (folderId != undefined) {
                            if (result == true) {
                                rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                                rest.delete().success(function (data) {
                                    $route.reload();
                                }).error(errorCallback);
                            }
                        }
                    }
                });
                break;
        }
    }

    //file or directory paste
    $scope.folderCopy = function () {
        for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
            var folderId = angular.element('#folderCheckdata' + i).val();
            if (folderId != undefined) {
                $scope.copyfile.push({
                    id: folderId
                });
            }
        }
    }

    //copy directory or file paste
    $scope.folderPaste = function () {

        for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
            var folderId = angular.element('#folderCheckdata' + i).val();
            if (folderId != undefined) {
                $scope.copyfiles = JSON.stringify($scope.copyfile);
                $routeParams.id = folderId;
                rest.path = 'fileManagerPaste';
                rest.put($scope.copyfiles).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    //All and selected directory delete
    $scope.folderDelete = function () {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
                var folderId = angular.element('#folderCheckdata' + i).val();
                var image = angular.element('#folderCheckfile' + i).val();
                if (folderId != undefined) {
                    if (result == true) {
                        rest.path = 'filemanagerfolderDelete/' + folderId + '/' + image;
                        rest.delete().success(function (data) {
                            $route.reload();
                        })
                    }
                }
            }
        });
    }

    $scope.folderAct = false;

    //folder check on action display
    $scope.folderSelect = function () {
        var bool = 0;
        for (var i = 0; i < angular.element('[id^=fcheck]').length; i++) {
            if (angular.element('#fcheck' + i).is(':checked') == true) {
                bool += 1;
            }
        }
        if (bool > 0) {
            $scope.folderAct = true;
        } else {
            $scope.folderAct = false;
        }
    }

}).controller('orderstatusReportController', function ($scope, $rootScope, $log, $location, $route, rest, $routeParams, $window, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.iUserId = "";

    var Dateobject = [];
    for (var i = 11; i >= 0; i--) {
        var now = new Date();
        var date = new Date(now.setMonth(now.getMonth() - i));
        var datex = ("0" + date.getDate()).slice(-2) + "-" + ("0" + (date.getMonth() + 1)).slice(-2) + "-" + date.getFullYear();
        var str = pad(date.getMonth() + 1, 2) + "-" + date.getFullYear();
        Dateobject.push({
            id: str
        });
    }

    //export to excel
    $scope.exportData = function (action) {
        switch (action) {
            case "result":
                var blob = new Blob([document.getElementById('exportable').innerHTML], {
                    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                });
                saveAs(blob, "Order-status-report.xls");
                break;
            case "month":
                var blob = new Blob([document.getElementById('itemExport').innerHTML], {
                    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                });
                saveAs(blob, "Order-month-status-report.xls");
                break;
            case "projectType":
                var blob = new Blob([document.getElementById('ProjectTypeexport').innerHTML], {
                    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                });
                saveAs(blob, "Order-Project-Type-status-report.xls");
                break;
            case "customers":
                var blob = new Blob([document.getElementById('customersExports').innerHTML], {
                    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                });
                saveAs(blob, "Order-customers-status-report.xls");
                break;
        }
    };

    //current year get
    $scope.date = new Date();
    var year = $scope.date.getFullYear();
    $scope.Currentyear = year.toString().substr(2, 2);
    //get contact person by customers
    $scope.getContact = function (id, element) {
        if(id && id != undefined){
            $routeParams.id = id;
            rest.path = 'contact';
            rest.model().success(function (data) {
                var cont = [];
                angular.forEach(data.data, function (val, i) {
                    var obj = {
                        'id': val.iContactId,
                        'text': val.vFirstName + ' ' + val.vLastName
                    };
                    cont.push(obj);
                });
                angular.element('#' + element).select2({
                    allowClear: true,
                    data: cont
                });
            }).error(errorCallback);
        }    
    };

    $scope.clReportTotal = 0;
    $scope.setTotals = function (item) {
        if (item) {
            const jobTotalPrice = item.jobTotalPrice ? item.jobTotalPrice : 0;
            const itemtotalAmount = item.totalAmount ? item.totalAmount : 0;
            $scope.clReportTotal += itemtotalAmount - jobTotalPrice;
        }
    }


   
    // $scope.$on('$routeChangeStart', function (scope, next, current) {
    //     console.log('current', current)
    //     console.log('next', next)
    //     if (next.$$route.controller != "orderstatusReportController") {
    //         // Show here for your model, and do what you need**
    //     }
    // });
    $scope.storeScoopOrders = function(){
        $window.localStorage.scoopReport = JSON.stringify($scope.orderReport);
    }
    $rootScope.$on('$locationChangeSuccess', function() {
        $rootScope.actualLocation = $location.path();
    });        
    $rootScope.$watch(function () {return $location.path()}, function (newLocation, oldLocation) {
        if($rootScope.actualLocation === newLocation && $rootScope.actualLocation == '/Order-status-report') {
            //alert('Why did you use history back?');
            if($window.localStorage.scoopReport){
                $scope.orderReport = JSON.parse($window.localStorage.scoopReport);
                console.log('$scope.scoopReport', $scope.orderReport)
                $scope.statusReportsearch('order-status-report','middle') 
            }    
        }
    });

    //status oreder report find
    $scope.statusReportsearch = function (frmId, eID) {
        if ($scope.orderReport == undefined || $scope.orderReport == null || $scope.orderReport == "") {
            notification('Please Select option', 'information');
        } else {

            $scope.clReportTotal = 0;
            if ($scope.orderReport.startCreateDate) {
                $scope.orderReport.createDateFrom = originalDateFormatNew($scope.orderReport.startCreateDate);
            }
            if ($scope.orderReport.endCreateDate) {
                $scope.orderReport.createDateTo = originalDateFormatNew($scope.orderReport.endCreateDate);
            }
            if ($scope.orderReport.startDeliveryDate) {
                $scope.orderReport.deliveryDateFrom = originalDateFormatNew($scope.orderReport.startDeliveryDate);
            }
            if ($scope.orderReport.endDeliveryDate) {
                $scope.orderReport.deliveryDateTo = originalDateFormatNew($scope.orderReport.endDeliveryDate);
            }
            if ($scope.orderReport.itemDuedate) {
                $scope.orderReport.itemDuedateStart = originalDateFormatNew($scope.orderReport.itemDuedate);
            }
            if ($scope.orderReport.endItemDuedate) {
                $scope.orderReport.itemDuedateEnd = originalDateFormatNew($scope.orderReport.endItemDuedate);
            }

            // rest.path = 'statusorderReportFind';
            // rest.get().success(function(data) {
            rest.path = 'statusorderReportFilter';
            rest.post($scope.orderReport).success(function (data) {
                $scope.statusResult = data['data'];
                console.log('$scope.statusResult', $scope.statusResult)
                $scope.Dateobject = Dateobject;
                //$scope.statusInfo = data['info'];
                //$scope.statusProjectType = data['Typeinfo'];
                //$scope.statusCustomerType = data['customerType'];
                $scope.totalItemAmout = 0;

                let newStatusResult = $scope.statusResult;
                var newResult = [];
                function groupByData(dataArray, property) {
                    return dataArray.reduce(function (res, dvalue) {
                        if (!res[dvalue[property]]) {
                            res[dvalue[property]] = { item_number: dvalue.item_number, projectType: dvalue.projectType, QuentityDate: dvalue.QuentityDate, totalAmount: 0 };
                            newResult.push(res[dvalue[property]])
                        }
                        res[dvalue[property]].totalAmount += dvalue.totalAmount;
                        return res;
                    }, []);
                }
                let statusInfo = groupByData(newStatusResult, 'QuentityDate');
                $scope.statusInfo = newResult;

                // Project type
                var resultProjectType = [];
                function groupByDataProjType(dataArray, property) {
                    return dataArray.reduce(function (res, dvalue) {
                        if (!res[dvalue[property]]) {
                            res[dvalue[property]] = { item_number: dvalue.item_number, projectType: dvalue.projectType, projectTypeName: dvalue.projectTypeName, contactName: dvalue.contactName, QuentityDate: dvalue.QuentityDate, TotalAmount: 0 };
                            resultProjectType.push(res[dvalue[property]])
                        }
                        res[dvalue[property]].TotalAmount += dvalue.totalAmount;
                        return res;
                    }, []);
                }
                let statusProjectType = groupByDataProjType(newStatusResult, 'projectType');
                $scope.statusProjectType = resultProjectType;

                // customer type
                var resultCustomerType = [];
                function groupByDataCustomer(dataArray, property) {
                    return dataArray.reduce(function (res, dvalue) {
                        if (!res[dvalue[property]]) {
                            res[dvalue[property]] = { item_number: dvalue.item_number, projectType: dvalue.projectType, contactName: dvalue.contactName, QuentityDate: dvalue.QuentityDate, TotalAmount: 0 };
                            resultCustomerType.push(res[dvalue[property]])
                        }
                        res[dvalue[property]].TotalAmount += dvalue.totalAmount;
                        return res;
                    }, []);
                }
                let statusCustomerType = groupByDataCustomer(newStatusResult, 'iClientId');
                $scope.statusCustomerType = resultCustomerType;

                //set
                //Month Chart start
                angular.forEach($scope.Dateobject, function (val, i) {
                    angular.forEach($scope.statusInfo, function (value, j) {
                        $timeout(function () {
                            for (var k = 0; k < angular.element('[id^=masterQDate]').length; k++) {
                                var QuentityDate = angular.element('#masterQDate' + k).text();
                                var obj = [];
                                obj.push(QuentityDate);
                                if (value.QuentityDate == QuentityDate) {
                                    if (val.id == value.QuentityDate) {
                                        $scope.totalItemAmout += value.totalAmount;
                                        //$scope.dtItemAmout += value.totalAmount;
                                        var prn = $scope.totalItemAmout * 12 / 100;
                                        $scope.totalItemAvg = prn;
                                        angular.element('#itemAmount' + i).text(value.totalAmount);
                                        //angular.element('#itemAmount' + i).text(value.TotalAmount);
                                    }
                                }
                            }
                        }, 100);
                    })
                })

                var obj = [];
                $timeout(function () {
                    var dupQuentity = [];
                    for (var k = 0; k < angular.element('[id^=masterQDate]').length; k++) {
                        var QuentityDate = angular.element('#masterQDate' + k).text();
                        dupQuentity.push(QuentityDate);
                    }

                    for (var i = 0; i < 12; i++) {
                        var itemDate = angular.element('#itemDate' + i).text();
                        if (jQuery.inArray(itemDate, dupQuentity) == -1) {
                            angular.element('#itemAmount' + i).text(0);
                        }
                    }

                    $scope.checkOrderItem = angular.element('.orderRClass').length;
                    for (var i = 0; i < angular.element('[id^=itemAmount]').length; i++) {
                        var item = angular.element('#itemAmount' + i).text();
                        var itemTotal = angular.element('#totalItemAmout').text();
                        if (item != "") {
                            obj.push(parseInt(item));
                            var total = parseFloat(item) * 100 / parseFloat(itemTotal);
                            total.toFixed(2) == 'NaN' ? angular.element('#itemShare' + i).text('0.0%') : angular.element('#itemShare' + i).text(total.toFixed(2) + '%');
                        } else {
                            obj.push(0);
                            angular.element('#itemAmount' + i).text(0);
                            angular.element('#itemShare' + i).text('0.0%');
                        }
                    }
                    $scope.addItemGraph(obj);
                }, 500);
                //Month Chart end

                //project type chart start
                $scope.ProjectTypetotal = 0;
                $timeout(function () {
                    for (var i = 0; i < angular.element('[id^=projectTypeName]').length; i++) {
                        var amount = angular.element('#projectTypeAmount' + i).text();
                        var totalType = angular.element('[id^=projectTypeName]').length;
                        $scope.projectAverage = totalType;
                        $scope.ProjectTypetotal += parseInt(amount);
                        $scope.ProjectTypeAverage = $scope.ProjectTypetotal * totalType / 100;
                    }
                    var type = [];
                    for (var i = 0; i < angular.element('[id^=projectTypeName]').length; i++) {
                        var amount = angular.element('#projectTypeAmount' + i).text();
                        var total = parseFloat(amount) * 100 / $scope.ProjectTypetotal;
                        var projectTypeName = angular.element('#projectTypeName' + i).text();
                        angular.element('#projectTypeShare' + i).text(total.toFixed(2) + '%');
                        type.push([projectTypeName, parseFloat(total)]);
                    }
                    $scope.projectTypeGraph(type);
                }, 500);
                //project type chart end

                //customers chart start
                $scope.CustomersTypeTotal = 0;
                $timeout(function () {
                    for (var i = 0; i < angular.element('[id^=CustomersName]').length; i++) {
                        var amount = angular.element('#CustomersAmount' + i).text();
                        $scope.CustomersTypeTotal += parseFloat(amount);
                        $scope.TotalCustomer = angular.element('[id^=CustomersName]').length;
                        $scope.customersAverage = parseFloat($scope.CustomersTypeTotal) * parseFloat($scope.TotalCustomer) / 100;
                        if (isNaN($scope.customersAverage)) {
                            $scope.customersAverage = 0;
                        }
                    }

                    var custType = [];
                    for (var i = 0; i < angular.element('[id^=CustomersName]').length; i++) {
                        var amount = angular.element('#CustomersAmount' + i).text();
                        if (isNaN($scope.CustomersTypeTotal)) {
                            $scope.CustomersTypeTotal = 0;
                        }
                        var total = parseFloat(amount) * 100 / parseFloat($scope.CustomersTypeTotal);
                        if (isNaN(total)) {
                            total = 0;
                        }
                        var customerTypeName = angular.element('#CustomersName' + i).text();
                        angular.element('#customersShare' + i).text(total.toFixed(2) + '%');
                        custType.push([customerTypeName, parseFloat(total.toFixed(2))]);
                    }
                    $scope.CustomerTypeChart(custType);
                }, 500)
            })
            //scrollToId(eID);
            scrollToId(eID)
        }
    }

    //items total graph
    var chart;
    $scope.addItemGraph = function (statInfo) {
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'monthChart',
                type: 'column',
                height: 400,
                options3d: {
                    enabled: true,
                    alpha: 15,
                    beta: 15,
                    viewDistance: 25,
                    depth: 40,
                },
                marginTop: 80,
                marginRight: 40
            },
            plotOptions: {
                column: {
                    depth: 40,
                    stacking: true,
                    grouping: false
                }
            },
            title: {
                text: 'Total (Orders)/Month (' + $scope.Dateobject[0].id + ' - ' + $scope.Dateobject[11].id + ') '
            },
            xAxis: {
                categories: [$scope.Dateobject[0].id, $scope.Dateobject[1].id, $scope.Dateobject[2].id, $scope.Dateobject[3].id, $scope.Dateobject[4].id, $scope.Dateobject[5].id, $scope.Dateobject[6].id, $scope.Dateobject[7].id, $scope.Dateobject[8].id, $scope.Dateobject[9].id, $scope.Dateobject[10].id, $scope.Dateobject[11].id]
            },
            yAxis: {
                allowDecimals: false,
                min: 0,
                title: {
                    text: 'Month (' + $scope.Dateobject[0].id + ' - ' + $scope.Dateobject[11].id + ')'
                }
            },
            tooltip: {
                headerFormat: '<b>{point.key}</b><br>',
                pointFormat: '<span style="color:{series.color}">\u25CF</span> {series.name}: {point.y} / {point.stackTotal}'
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    depth: 40
                }
            },
            series: []
        });

        var odata = [{
            data: statInfo,
            stack: 0
        }];

        angular.forEach(odata, function (item, itemNo) {
            chart.addSeries({
                data: item.data,
                stack: item.stack
            }, false);
        });
        chart.redraw();
    }

    //project type graph
    $scope.projectTypeGraph = function (type) {
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'projectTyp',
                type: 'pie',
                height: 300,
                options3d: {
                    enabled: true,
                    alpha: 45,
                    beta: 0
                },
            },
            title: {
                text: 'Total (Orders)/Project Types (' + $scope.Dateobject[0].id + ' - ' + $scope.Dateobject[11].id + ') '
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    depth: 35,
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}'
                    }
                }
            },
            series: [{
                type: 'pie',
                name: 'Browser share',
                data: type
            }]
        });
    }

    //customers Chart
    $scope.CustomerTypeChart = function (cType) {
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'CustomerType',
                type: 'pie',
                height: 300,
                options3d: {
                    enabled: true,
                    alpha: 45
                }
            },
            title: {
                text: 'Total (Orders)/Customers (' + $scope.Dateobject[0].id + ' - ' + $scope.Dateobject[11].id + ') '
            },
            plotOptions: {
                pie: {
                    innerSize: 100,
                    depth: 45
                }
            },
            series: [{
                name: 'Customers',
                data: cType
            }]
        });
    }

    //Display serach remove
    $scope.reseteSearch = function () {
        $window.localStorage.scoopReport = '';
        $route.reload();
    }

    //redirect to customer page
    $scope.customerOrder = function (id) {
        rest.path = 'order/' + id;
        rest.get().success(function (data) {
            // debugger;
            $scope.orderdata = data;
            $window.localStorage.orderNo = $scope.orderdata.order_number;
            $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
            $window.localStorage.orderID = id;
            $window.localStorage.iUserId = id;
            $window.localStorage.userType = 3;
            $window.localStorage.currentUserName = data.vClientName;
            $location.path('/project-customer');
        }).error(errorCallback);
    };

    //serch data action
    $scope.statucOrderAction = function (action) {
        switch (action) {
            case "Change project status":
                $scope.projectStatus = true;
                $scope.itemStatus = false;
                break;
            case "Change item status":
                $scope.itemStatus = true;
                $scope.projectStatus = false;
                break;
            case "Export to excel":
                $scope.projectStatus = false;
                $scope.itemStatus = false;
                break;
            case "Remove selection":
                $scope.projectStatus = false;
                $scope.itemStatus = false;
                //$scope.checkdata = false;
                break;
            case "Select all":
                $scope.projectStatus = false;
                $scope.itemStatus = false;
                break;
        }
    }

    //search data action
    $scope.statusAction = function (action) {
        switch (action) {
            case "Change project status":
                var projectStatus = angular.element('#projectStatusdata').val();
                for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                    var orderselect = $('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                    if (orderselect == 'true') {
                        var orderId = angular.element('#orderCheckData' + i).val();
                        $routeParams.id = orderId;
                        rest.path = 'ordersearchProjectStatusUpdate/' + $routeParams.id + '/' + projectStatus;
                        rest.get().success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
                break;
            case "Change item status":
                var itemStatus = angular.element('#itemStatusdata').val();
                for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                    var orderselect = $('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                    if (orderselect == 'true') {
                        var orderId = angular.element('#orderCheckData' + i).val();
                        $routeParams.id = orderId;
                        rest.path = 'ordersearchItemStatusUpdate/' + $routeParams.id + '/' + itemStatus;
                        rest.get().success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
                break;
            case "Remove selection":
                $scope.checkdata = false;
                for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                    var itemselect = angular.element('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                    if (itemselect == 'true') {
                        var jobId = angular.element('#orderCheckData' + i).val();
                        $("#orderCheck" + i).prop("checked", false);
                    }
                }
                break;
            case "Export to excel":
                for (var i = 0; i <= angular.element('[id^=orderCheckData]').length; i++) {
                    if ($("#orderCheck" + i).prop('checked') == true) {
                        $("#Export_" + i).show()
                    } else {
                        $("#Export_" + i).hide();
                        $("#Export_" + i).remove();
                    }
                }
                var blob = new Blob([document.getElementById('exportable').innerHTML], {
                    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                });
                saveAs(blob, "Order-status-report.xls");
                $route.reload();
                break;
            case "Select all":
                $scope.checkdata = "ordercheck";
                break;
        }
    }

    //select field clear
    $scope.clearCode = function (frmId, action) {
        switch (action) {
            case "companyCode":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.companyCode = '';
                    angular.element('#companyCode1').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "pm_name":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.pm_name = '';
                    angular.element('#pm_name').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "customer":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.customer = '';
                    angular.element('#customer1').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "contactPerson":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.contactPerson = '';
                    angular.element('#conatct-person').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "itemStatus":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.itemStatus = '';
                    angular.element('#itemStatus').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "projectStatus":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.projectStatus = '';
                    angular.element('#projectStatus').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "indirect_customer":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.indirect_customer = '';
                    angular.element('#indirect_customer1').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "projectType":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.projectType = '';
                    angular.element('#projectType').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "emailSubject":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.emailSubject = '';
                    angular.element('#emailSubject').text;
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "itemPonumber":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.itemPonumber = '';
                    angular.element('#itemPonumber').text;
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "itemDuedate":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.itemDuedate = '';
                    angular.element('#itemDuedate').text;
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "endItemDuedate":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.endItemDuedate = '';
                    angular.element('#endItemDuedate').text;
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "startCreateDate":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.startCreateDate = '';
                    angular.element('#startCreateDate').text;
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "endCreateDate":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.endCreateDate = '';
                    angular.element('#endCreateDate').text;
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "sourceLanguage":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.sourceLanguage = '';
                    angular.element('#sourceLanguage').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "targetLanguage":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.targetLanguage = '';
                    angular.element('#targetLanguage').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "currency":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.currency = '';
                    angular.element('#currency').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
        }
    }
}).controller('projectStatisticsController', function ($scope, $rootScope, $log, $location, $route, rest, $routeParams, $window, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.iUserId = "";

    var Dateobject = [];
    for (var i = 11; i >= 0; i--) {
        var now = new Date();
        var date = new Date(now.setMonth(now.getMonth() - i));
        var datex = ("0" + date.getDate()).slice(-2) + "-" + ("0" + (date.getMonth() + 1)).slice(-2) + "-" + date.getFullYear();
        var str = pad(date.getMonth() + 1, 2) + "-" + date.getFullYear();
        Dateobject.push({
            id: str
        });
    }

    //export to excel
    $scope.exportData = function (action) {
        switch (action) {
            case "result":
                var blob = new Blob([document.getElementById('exportable').innerHTML], {
                    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                });
                saveAs(blob, "Order-status-report.xls");
                break;
        }
    };

    //current year get
    $scope.date = new Date();
    var year = $scope.date.getFullYear();
    $scope.Currentyear = year.toString().substr(2, 2);
    //get contact person by customers
    $scope.getContact = function (id, element) {
        $routeParams.id = id;
        rest.path = 'contact';
        rest.model().success(function (data) {
            var cont = [];
            angular.forEach(data.data, function (val, i) {
                var obj = {
                    'id': val.iContactId,
                    'text': val.vFirstName + ' ' + val.vLastName
                };
                cont.push(obj);
            });
            angular.element('#' + element).select2({
                allowClear: true,
                data: cont
            });
        }).error(errorCallback);
    };

    $scope.clReportTotal = 0;
    $scope.setTotals = function (item) {
        if (item) {
            const jobTotalPrice = item.jobTotalPrice ? item.jobTotalPrice : 0;
            const itemtotalAmount = item.totalAmount ? item.totalAmount : 0;
            $scope.clReportTotal += itemtotalAmount - jobTotalPrice;
        }
    }

    //status oreder report find
    $scope.statusReportsearch = function (frmId, eID) {
        if ($scope.orderReport == undefined || $scope.orderReport == null || $scope.orderReport == "") {
            notification('Please Select option', 'information');
        } else {
            $scope.clReportTotal = 0;
            $rootScope.reportInternalStatics = $scope.orderReport;
            // rest.path = 'statusorderReportFind';
            // rest.get().success(function(data) {
            rest.path = 'projectStatistics';
            rest.post($scope.orderReport).success(function (data) {
                $scope.statusResult = data['data'];
                $scope.Dateobject = Dateobject;
                

            })
            //scrollToId(eID);
            scrollToId(eID)
        }
    }

    //Display serach remove
    $scope.reseteSearch = function () {
        $scope.statusReportsearch = '';
        $route.reload();
    }

    // call fn when back to page
    if($rootScope.reportInternalStatics){
        $scope.orderReport = $rootScope.reportInternalStatics;
        $scope.statusReportsearch('order-status-report','middle')
    }
    
    //Display serach remove
    $scope.linguistReseteSearch = function () {
        $rootScope.reportStaticsLinguist = '';
        $route.reload();
    }

    //redirect to customer page
    $scope.customerOrder = function (id) {
        rest.path = 'order/' + id;
        rest.get().success(function (data) {
            // debugger;
            $scope.orderdata = data;
            $window.localStorage.orderNo = $scope.orderdata.order_number;
            $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
            $window.localStorage.orderID = id;
            $window.localStorage.iUserId = id;
            $window.localStorage.userType = 3;
            $window.localStorage.currentUserName = data.vClientName;
            $location.path('/project-customer');
        }).error(errorCallback);
    };

    //serch data action
    $scope.statucOrderAction = function (action) {
        switch (action) {
            case "Export to excel":
                $scope.projectStatus = false;
                $scope.itemStatus = false;
                break;
            case "Remove selection":
                $scope.projectStatus = false;
                $scope.itemStatus = false;
                //$scope.checkdata = false;
                break;
            case "Select all":
                $scope.projectStatus = false;
                $scope.itemStatus = false;
                break;
        }
    }

    //search data action
    $scope.statusAction = function (action) {
        switch (action) {
            case "Export to excel":
                for (var i = 0; i <= angular.element('[id^=orderCheckData]').length; i++) {
                    if ($("#orderCheck" + i).prop('checked') == true) {
                        $("#Export_" + i).show()
                    } else {
                        $("#Export_" + i).hide();
                        $("#Export_" + i).remove();
                    }
                }
                var blob = new Blob([document.getElementById('exportable').innerHTML], {
                    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                });
                saveAs(blob, "Order-status-report.xls");
                $route.reload();
                break;
            case "Select all":
                $scope.checkdata = "ordercheck";
                break;
        }
    }

    //select field clear
    $scope.clearCode = function (frmId, action) {
        switch (action) {
            case "projectManager":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.pm_id = '';
                    angular.element('#projectManager').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "projectCoordinator":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.cordinator_id = '';
                    angular.element('#projectCoordinator').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "qaSpecialist":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.qa_id = '';
                    angular.element('#qaSpecialist').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;                

        }
    }

    //Linguist report find
    $scope.linguistReportsearch = function (frmId, eID) {
        
        if ($scope.linguistReport == undefined || $scope.linguistReport == null || $scope.linguistReport == "") {
            notification('Please Select option', 'information');
        } else {
            $scope.clReportTotal = 0;
            $rootScope.reportStaticsLinguist = $scope.linguistReport;
            
            rest.path = 'projectStatisticsLinguist';
            rest.post($scope.linguistReport).success(function (data) {
                $scope.linguistResult = data['data'];
                
            })
            //scrollToId(eID)
        }
    }

    // back keep input selected when back to page
    if($rootScope.reportStaticsLinguist){
        $scope.linguistReport = $rootScope.reportStaticsLinguist;
        $scope.linguistReportsearch('order-linguist-report','middle')
    }

    //select field clear
    $scope.clearCodeLinguist = function (frmId, action) {
        switch (action) {
            case "externalresource":
                if ($scope.linguistReport != undefined) {
                    $scope.linguistReport.resource_id = '';
                    angular.element('#externalresource').select2('val', '');
                    angular.forEach($scope.linguistReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.linguistReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.linguistReport)) {
                        $scope.linguistResult = '';
                        $scope.linguistReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
        }
    }

}).controller('overviewReportController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $timeout, $cookieStore, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.iUserId = "";
    var session_iUserId = $cookieStore.get('session_iUserId') ? $cookieStore.get('session_iUserId') : 0;

    var Dateobject = [];
    for (var i = 11; i >= 0; i--) {
        var now = new Date();
        var date = new Date(now.setMonth(now.getMonth() - i));
        var datex = ("0" + date.getDate()).slice(-2) + "-" + ("0" + (date.getMonth() + 1)).slice(-2) + "-" + date.getFullYear();
        var str = pad(date.getMonth() + 1, 2) + "-" + date.getFullYear();
        Dateobject.push({
            id: str
        });
    }


    //current year get
    $scope.date = new Date();
    var year = $scope.date.getFullYear();
    $scope.Currentyear = year.toString().substr(2, 2);
    //get contact person by customers
    $scope.getContact = function (id, element) {
        $routeParams.id = id;
        rest.path = 'contact';
        rest.model().success(function (data) {
            var cont = [];
            angular.forEach(data.data, function (val, i) {
                var obj = {
                    'id': val.iContactId,
                    'text': val.vFirstName + ' ' + val.vLastName
                };
                cont.push(obj);
            });
            angular.element('#' + element).select2({
                allowClear: true,
                data: cont
            });
        }).error(errorCallback);
    };

    // Overview Report Project Amount Total
    $scope.currentDayAmt = 0;
    $scope.allProjectAmt = 0;
    $scope.tobeAssignAmt = 0;
    $scope.inProgressAmt = 0;
    $scope.qaReadyAmt = 0;
    $scope.tobeDeliveredAmt = 0;
    $scope.deliveredAmt = 0;
    $scope.approvedAmt = 0;
    $scope.dueTodayAmt = 0;
    $scope.dueTomorrowAmt = 0;
    rest.path = "dashboardProjectsOrderGet/" + $window.localStorage.getItem("session_iUserId");
    rest.get().success(function (data) {
        $scope.ProjreportsData = data;
        angular.forEach(data, function (val, i) {
            if (val.totalAmount) {
                $scope.allProjectAmt += val.totalAmount;
                if (val.itemStatus == 'To be Assigned') {
                    $scope.tobeAssignAmt += val.totalAmount;
                }
                if (val.itemStatus == 'In Progress') {
                    $scope.inProgressAmt += val.totalAmount;
                }
                if (val.itemStatus == 'QA Ready') {
                    $scope.qaReadyAmt += val.totalAmount;
                }
                if (val.itemStatus == 'To be Delivered') {
                    $scope.tobeDeliveredAmt += val.totalAmount;
                }
                if (val.itemStatus == 'Delivered') {
                    $scope.deliveredAmt += val.totalAmount;
                }
                if (val.itemStatus == 'Approved') {
                    $scope.approvedAmt += val.totalAmount;
                }
                if (val.DueDate.split(' ')[0] == dateFormat(new Date()).split(".").reverse().join("-")) {
                    $scope.dueTodayAmt += val.totalAmount;
                }
                if (val.DueDate.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 1)) {
                    $scope.dueTomorrowAmt += val.totalAmount;
                }
                // Project/scoop added for today
                if (val.orderDate.split(' ')[0] == dateFormat(new Date()).split(".").reverse().join("-")) {
                    $scope.currentDayAmt += val.totalAmount;
                }

            }
        })
    });

    //status oreder report find
    $scope.statusResult = [];
    $scope.totalProjectHide = false;
    $scope.statusReportsearch = function (frmId, eID) {
        if ($scope.orderReport == undefined || $scope.orderReport == null || $scope.orderReport == "") {
            notification('Please Select option', 'information');
        } else {
            if($scope.orderReport.itemStatusId)
                $scope.orderReport.itemStatusId = parseInt($scope.orderReport.itemStatusId);

            rest.path = "dashboardProjectsOrderGet/" + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                $scope.statusResult = data;
                console.log('$scope.statusResult', $scope.statusResult)
                // angular.forEach(data, function(val, i) {
                // })
            });

            $scope.totalProjectHide = true;
            $scope.projSearchTotal = function (statusResult) {
                if (statusResult)
                    return statusResult.reduce(function (totalStatusamt, statusDt) {
                        return totalStatusamt + statusDt.totalAmount
                    }, 0);
            }

            rest.path = 'statusorderReportFind';
            rest.get().success(function (data) {
                //$scope.statusResult = data['data'];
                $scope.Dateobject = Dateobject;
                $scope.statusInfo = data['projectScoopInfo'];
                $scope.statusProjectType = data['Typeinfo'];
                $scope.statusCustomerType = data['customerType'];
                $scope.totalItemAmout = 0;
                var result = [];

                //Month Chart start
                angular.forEach($scope.Dateobject, function (val, i) {
                    angular.forEach($scope.statusInfo, function (value, j) {
                        $timeout(function () {
                            for (var k = 0; k < angular.element('[id^=masterQDate]').length; k++) {
                                var QuentityDate = angular.element('#masterQDate' + k).text();
                                var obj = [];
                                obj.push(QuentityDate);
                                if (value.QuentityDate == QuentityDate) {
                                    if (val.id == value.QuentityDate) {
                                        $scope.totalItemAmout += value.TotalAmount;
                                        var prn = $scope.totalItemAmout * 12 / 100;
                                        $scope.totalItemAvg = prn;
                                        angular.element('#itemAmount' + i).text(value.TotalAmount);
                                    } else {

                                    }
                                }
                            }
                        }, 100);
                    })
                })
            })
            //scrollToId(eID);
        }
    }

    //items total graph
    var chart;
    $scope.addItemGraph = function (statInfo) {
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'monthChart',
                type: 'column',
                height: 400,
                options3d: {
                    enabled: true,
                    alpha: 15,
                    beta: 15,
                    viewDistance: 25,
                    depth: 40,
                },
                marginTop: 80,
                marginRight: 40
            },
            plotOptions: {
                column: {
                    depth: 40,
                    stacking: true,
                    grouping: false
                }
            },
            title: {
                text: 'Total (Orders)/Month (' + $scope.Dateobject[0].id + ' - ' + $scope.Dateobject[11].id + ') '
            },
            xAxis: {
                categories: [$scope.Dateobject[0].id, $scope.Dateobject[1].id, $scope.Dateobject[2].id, $scope.Dateobject[3].id, $scope.Dateobject[4].id, $scope.Dateobject[5].id, $scope.Dateobject[6].id, $scope.Dateobject[7].id, $scope.Dateobject[8].id, $scope.Dateobject[9].id, $scope.Dateobject[10].id, $scope.Dateobject[11].id]
            },
            yAxis: {
                allowDecimals: false,
                min: 0,
                title: {
                    text: 'Month (' + $scope.Dateobject[0].id + ' - ' + $scope.Dateobject[11].id + ')'
                }
            },
            tooltip: {
                headerFormat: '<b>{point.key}</b><br>',
                pointFormat: '<span style="color:{series.color}">\u25CF</span> {series.name}: {point.y} / {point.stackTotal}'
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    depth: 40
                }
            },
            series: []
        });

        var odata = [{
            data: statInfo,
            stack: 0
        }];

        angular.forEach(odata, function (item, itemNo) {
            chart.addSeries({
                data: item.data,
                stack: item.stack
            }, false);
        });
        chart.redraw();
    }

    //Display serach remove
    $scope.reseteSearch = function () {
        $route.reload();
    }

    //redirect to customer page
    $scope.customerOrder = function (id) {
        rest.path = 'order/' + id;
        rest.get().success(function (data) {
            // debugger;
            $scope.orderdata = data;
            $window.localStorage.orderNo = $scope.orderdata.order_number;
            $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
            $window.localStorage.orderID = id;
            $window.localStorage.iUserId = id;
            $window.localStorage.userType = 3;
            $window.localStorage.currentUserName = data.vClientName;
            $location.path('/project-customer');
        }).error(errorCallback);
    };

    //search data action
    $scope.statusAction = function (action) {
        switch (action) {
            case "Change project status":
                var projectStatus = angular.element('#projectStatusdata').val();
                for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                    var orderselect = $('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                    if (orderselect == 'true') {
                        var orderId = angular.element('#orderCheckData' + i).val();
                        $routeParams.id = orderId;
                        rest.path = 'ordersearchProjectStatusUpdate/' + $routeParams.id + '/' + projectStatus;
                        rest.get().success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
                break;
            case "Change item status":
                var itemStatus = angular.element('#itemStatusdata').val();
                for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                    var orderselect = $('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                    if (orderselect == 'true') {
                        var orderId = angular.element('#orderCheckData' + i).val();
                        $routeParams.id = orderId;
                        rest.path = 'ordersearchItemStatusUpdate/' + $routeParams.id + '/' + itemStatus;
                        rest.get().success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
                break;
            case "Remove selection":
                break;
            case "Export to excel":
                var blob = new Blob([document.getElementById('exportable').innerHTML], {
                    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                });
                saveAs(blob, "Order-status-report.xls");
                $route.reload();
                break;
            case "Select all":
                $scope.checkdata = "ordercheck";
                break;
        }
    }

    // Start Job data search
    // Overview Report Amount Total - Job
    $scope.requestedJobAmt = 0;
    $scope.inProgressJobAmt = 0;
    $scope.preparationJobAmt = 0;
    $scope.deliveredJobAmt = 0;
    $scope.approvedJobAmt = 0;
    $scope.dueTodayJobAmt = 0;
    $scope.dueTomorrowJobAmt = 0;
    $scope.overdueJobAmt = 0;
    $scope.completedJobAmt = 0;

    rest.path = 'getJobsFromTmsSummeryView';
    rest.get().success(function (data) {
        $scope.jobReportdata = data;
        
        angular.forEach(data, function (val, i) {
            if (val.total_price) {
                //$scope.preparationJobAmt += val.totalAmount;            
                if (val.item_status == 'Requested') {
                    $scope.requestedJobAmt += val.total_price;
                }
                if (val.item_status == 'In-progress' || val.item_status == 'Ongoing') {
                    $scope.inProgressJobAmt += val.total_price;
                }
                if (val.item_status == 'In preparation') {
                    $scope.preparationJobAmt += val.total_price;
                }
                if (val.item_status == 'Overdue') {
                    $scope.overdueJobAmt += val.total_price;
                }
                if (val.item_status == 'Delivered' || val.item_status == 'Completed') {
                    $scope.deliveredJobAmt += val.total_price;
                }
                if (val.item_status == 'Approved' || val.item_status == 'Invoice Ready') {
                    $scope.approvedJobAmt += val.total_price;
                }
                // if (val.item_status == 'Completed') {
                //     $scope.completedJobAmt += val.total_price;
                // }
                if (val.due_date.split(' ')[0] == dateFormat(new Date()).split(".").reverse().join("-")) {
                    $scope.dueTodayJobAmt += val.total_price;
                }
                if (val.due_date.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 1)) {
                    $scope.dueTomorrowJobAmt += val.total_price;
                }
            }
        })
    });

    //Job report search start
    $scope.jobstatusResult = [];
    $scope.totalJobHide = false;
    $scope.jobstatusReportsearch = function (frmId, eID) {

        if ($scope.jobReport == undefined || $scope.jobReport == null || $scope.jobReport == "") {
            notification('Please Select option', 'information');
        } else if (jQuery.isEmptyObject($scope.jobReport) == true) {
            notification('Please Select option', 'information');
            $route.reload();
        } else {
            //rest.path = 'statusJobReportFind';
            rest.path = 'getJobsFromTmsSummeryView';
            rest.get().success(function (data) {
                $scope.jobstatusResult = data;
                // Search amount Total Job
                $scope.totalJobHide = true;
                $scope.jobSearchTotal = function (jobstatusResult) {
                    if (jobstatusResult)
                        return jobstatusResult.reduce(function (totaljobStatusamt, jobstatusDt) {
                            return totaljobStatusamt + jobstatusDt.total_price
                        }, 0);
                }
            })
            //scrollToId(eID);
        }
    }
    // End Job search data

    //select field clear
    $scope.clearCode = function (frmId, action) {
        switch (action) {
            case "itemStatus":
                $scope.totalJobtHide = false;
                if ($scope.orderReport != undefined) {
                    $scope.totalProjectHide = false;
                    //$scope.orderReport.itemStatus = '';
                    $scope.orderReport.itemStatusId = '';
                    angular.element('#itemStatus').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "projectStatus":
                if ($scope.orderReport != undefined) {
                    $scope.orderReport.projectStatus = '';
                    angular.element('#projectStatus').select2('val', '');
                    angular.forEach($scope.orderReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.orderReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.orderReport)) {
                        $scope.statusResult = '';
                        $scope.orderReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
        }
    }

    // test
    //remove job search 
    $scope.jobclearCode = function (frmId, action) {
        switch (action) {
            case "jobStatus":
                if ($scope.jobReport != undefined) {
                    $scope.totalJobHide = false;
                    $scope.jobReport.item_status = '';
                    angular.element('#jobStatus1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.jobstatusResult = '';
                    }
                }
                break;
            case "itemStatus":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.itemStatus = '';
                    angular.element('#itemStatus1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
        }
    }

    //get of invoice due period
    $scope.invoicePeriodDays = 30;
    $scope.getDataInvoicePeriod = function () {
        rest.path = "getAllInvoicePeriod";
        rest.get().success(function (data) {
            $scope.dueperiodList = data;
            if ($scope.dueperiodList.length > 0) {
                $scope.invoicePeriodDays = $scope.dueperiodList[0].number_of_days;
            }
            //$scope.getOne(data[0].invoice_due_id);
        }).error(errorCallback);
    }
    $scope.getDataInvoicePeriod();

    //---- Payable Invoice Calculation ---//
    $scope.allpayableAmt = 0;
    $scope.submitPayable = 0;
    $scope.approvedPayable = 0;
    $scope.overduePayable = 0;
    $scope.outstandingPayable = 0;
    $scope.outstandRmndrPayable = 0;
    $scope.todayPayable = 0;
    $scope.paidPayable = 0;
    $scope.cancelPayable = 0;

    var allPaidAmt = 0;
    var allPayCostAmt = 0;
    var outstandingCostAmt = 0;
    var outstandingPaidAmt = 0;
    var overdueCostAmt = 0;
    var overduePaidAmt = 0;
    var todayCostAmt = 0;
    var todayPaidAmt = 0;
    $scope.getinvoiceData = function () {
        rest.path = "viewAllInvoice1/save";
        rest.get().success(function (data) {
            $scope.invoiceList = data;
            angular.forEach(data, function (val, i) {
                allPayCostAmt += val.Invoice_cost;
                if (val.paid_amount)
                    allPaidAmt += val.paid_amount;

                if (val.invoice_status == "Open") {
                    $scope.submitPayable += val.Invoice_cost;
                }
                if (val.is_approved == 1 && val.invoice_status == 'Open') {
                    $scope.approvedPayable += val.Invoice_cost;
                }
                if (val.is_approved == 1 && val.reminder_sent == 1 && val.invoice_status != 'Complete' && val.invoice_status != 'Cancel' && val.invoice_status != 'Paid') {
                    $scope.outstandRmndrPayable += val.Invoice_cost;
                }
                if (val.invoice_status == 'Part Paid' || val.invoice_status == 'Paid' || val.invoice_status == 'Complete') {
                    $scope.paidPayable += val.Invoice_cost;
                }
                if (val.invoice_status == 'Cancel') {
                    $scope.cancelPayable += val.Invoice_cost;
                }

                var newPaydueDate = TodayAfterNumberOfDays(val.created_date, $scope.invoicePeriodDays)
                if ((val.invoice_type != 'draft' && val.is_approved == 1)) {
                    //if (val.invoice_date.split(' ')[0] < dateFormat(new Date()).split(".").reverse().join("-")) {
                    if (newPaydueDate > dateFormat(new Date()).split(".").reverse().join("-")) {
                        outstandingCostAmt += val.Invoice_cost;
                        outstandingPaidAmt += val.paid_amount;
                    }
                    if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
                        overdueCostAmt += val.Invoice_cost;
                        overduePaidAmt += val.paid_amount;
                    }
                    if (newPaydueDate == dateFormat(new Date()).split(".").reverse().join("-")) {
                        todayCostAmt += val.Invoice_cost;
                        todayPaidAmt += val.paid_amount;
                    }
                }

            });
            //$scope.allpayableAmt =  allPayCostAmt - allPaidAmt;   
            $scope.allpayableAmt = allPayCostAmt;
            $scope.outstandingPayable = outstandingCostAmt - outstandingPaidAmt;
            $scope.overduePayable = overdueCostAmt - overduePaidAmt;
            $scope.todayPayable = todayCostAmt - todayPaidAmt;
        }).error(errorCallback);

        // In Preparation invoice amount
        $scope.inPreparationPayable = 0;
        rest.path = "viewAllInvoice1/draft";
        rest.get().success(function (data) {
            $scope.invoiceListDraft = data;
            angular.forEach(data, function (val, i) {
                $scope.inPreparationPayable += val.Invoice_cost;
            });
        }).error(errorCallback);
    }

    $scope.getinvoiceData();

    // Receiveable Payments (Invoice sent to clients) 
    $scope.allReceivablesAmt = 0;
    $scope.outstandingReceivables = 0;
    $scope.overdueReceivables = 0;
    $scope.todayReceivables = 0;
    $scope.toBesentReceivables = 0;
    $scope.outstandRmndrReceivables = 0;
    $scope.cancelReceivables = 0;
    $scope.paidReceivables = 0;
    $scope.irRecoverableReceivables = 0;

    var allPaidRecvbl = 0;
    var allPayCostRecvbl = 0;
    var outstandingCostRecvbl = 0;
    var outstandingPaidRecvbl = 0;
    var overdueCostRecvbl = 0;
    var overduePaidRecvbl = 0;
    var todayCostRecvbl = 0;
    var todayPaidRecvbl = 0;
    $scope.getClientinvoiceData = function () {
        rest.path = "viewAllClientInvoice/save/" + session_iUserId;
        rest.get().success(function (data) {
            $scope.invoiceList = data;
            angular.forEach(data, function (val, i) {
                allPayCostRecvbl += val.Invoice_cost;
                if (val.paid_amount)
                    allPaidRecvbl += val.paid_amount;

                if (val.invoice_status == "Open") {
                    $scope.toBesentReceivables += val.Invoice_cost;
                }
                //if(val.reminder_sent == 1 && val.invoice_status != 'Complete'){
                if (val.reminder_sent == 1 && val.invoice_status != 'Complete' && val.invoice_status != 'Cancel' && val.invoice_status != 'Paid') {
                    $scope.outstandRmndrReceivables += val.Invoice_cost;
                }
                if (val.invoice_status == 'Part Paid' || val.invoice_status == 'Paid' || val.invoice_status == 'Complete') {
                    $scope.paidReceivables += val.Invoice_cost;
                }
                if (val.invoice_status == 'Cancel') {
                    $scope.cancelReceivables += val.Invoice_cost;
                }
                if (val.invoice_status == 'Irrecoverable') {
                    $scope.irRecoverableReceivables += val.Invoice_cost;
                }

                var newPaydueDate = TodayAfterNumberOfDays(val.created_date, $scope.invoicePeriodDays)
                if (val.invoice_type != 'draft') {
                    // if (val.invoice_date.split(' ')[0] < dateFormat(new Date()).split(".").reverse().join("-")) {
                    if (newPaydueDate > dateFormat(new Date()).split(".").reverse().join("-")) {
                        outstandingCostRecvbl += val.Invoice_cost;
                        outstandingPaidRecvbl += val.paid_amount;
                    }
                    if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
                        overdueCostRecvbl += val.Invoice_cost;
                        overduePaidRecvbl += val.paid_amount;
                    }
                    if (newPaydueDate == dateFormat(new Date()).split(".").reverse().join("-")) {
                        todayCostRecvbl += val.Invoice_cost;
                        todayPaidRecvbl += val.paid_amount;
                    }
                }

            });
            //$scope.allReceivablesAmt =  allPayCostRecvbl - allPaidRecvbl;   
            $scope.allReceivablesAmt = allPayCostRecvbl;
            $scope.outstandingReceivables = outstandingCostRecvbl - outstandingPaidRecvbl;
            $scope.overdueReceivables = overdueCostRecvbl - overduePaidRecvbl;
            $scope.todayReceivables = todayCostRecvbl - todayPaidRecvbl;

        }).error(errorCallback);

        // In Preparation Client invoice amount
        $scope.inPreparationReceivables = 0;
        rest.path = "viewAllClientInvoice/draft/" + session_iUserId;
        rest.get().success(function (data) {
            $scope.invoiceListDraft = data;
            angular.forEach(data, function (val, i) {
                $scope.inPreparationReceivables += val.Invoice_cost;
            });
        }).error(errorCallback);

    }

    $scope.getClientinvoiceData();

}).controller('resourcesController', function ($scope, $log, $location, $route, fileReader, rest, $uibModal, $window, $rootScope, $routeParams, $cookieStore, $timeout, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    //country holiday get
    $scope.countryHolidayGet = function (country) {
        //National Holiay List current date to higher date get
        var currentYear = new Date().getFullYear();
        rest.path = "holidayGet/" + country;
        rest.get().success(function (data) {
            var upcomming = [];
            var ongoing = [];

            angular.forEach(data, function (val, i) {
                var currentDate = new Date;
                var holiday = new Date(val[0] + ' ' + currentYear);
                if (currentDate <= holiday) {
                    var dayMon = val[0].split(' ');
                    var fullDate = dayMon[1] + ' ' + dayMon[0] + ' ' + currentYear;
                    upcomming.push({
                        'date': fullDate,
                        'holidayName': val[2],
                        'holidayStatus': val[3]
                    });
                } else {
                    var dayMon = val[0].split(' ');
                    var fullDate = dayMon[1] + ' ' + dayMon[0] + ' ' + currentYear;
                    ongoing.push({
                        'date': fullDate,
                        'holidayName': val[2],
                        'holidayStatus': val[3]
                    });
                }
            });

            $scope.upcommingList = upcomming;
            $scope.ongoingList = ongoing.reverse();
            $scope.upLength = $scope.upcommingList.length;
            $scope.onLength = $scope.ongoingList.length;
        }).error(errorCallback);
    }

    if (!$cookieStore.get('session_holidayCountry')) {
        $scope.countryHolidayGet("Bulgaria");
    } else {
        $scope.countryHolidayGet($cookieStore.get('session_holidayCountry'));
    }

    //holiday Status wise show
    $scope.holidayStatus = function (status) {
        if (status == "Upcoming") {
            $timeout(function () {
                angular.element('.holidayTab2').removeClass('holidayTabActive');
                angular.element('.holidayTab1').addClass('holidayTabActive');
            }, 100);
            $scope.holidayShow = false;
        } else {
            angular.element('.holidayTab2').addClass('holidayTabActive');
            angular.element('.holidayTab1').removeClass('holidayTabActive');
            $scope.holidayShow = true;
        }
    }

    $scope.holidayStatus("Upcoming");



    // Resource Type Start
    rest.path = 'usertype';
    rest.get().success(function (data) {
        $scope.usertype = data;
        $scope.usertypeEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.saveType = function (formId) {
        if (angular.element("#" + formId).valid()) {
            rest.path = 'saveusertype';
            rest.post($scope.type).success(function (data) {
                notification('Record inserted successfully', 'success');
                $route.reload();
            }).error(errorCallback);
        }
    };

    $scope.updateType = function (formId, id) {
        if (angular.element("#" + formId).valid()) {
            rest.path = 'updateusertype/' + id;
            rest.post($scope.type).success(function (data) {
                notification('Record updeted successfully', 'success');
                $route.reload();
            }).error(errorCallback);
        };
    }

    $scope.getType = function (id, eID) {
        rest.path = 'usertype/' + id;
        rest.get().success(function (data) {
            $scope.type = data;
            $scope.type.iResourceType = $scope.type.iResourceType.toString();
        }).error(errorCallback);
        var eleHeight = elmYPosition(eID)
        $('.md-content').animate({ scrollTop: eleHeight }, 200);
        //scrollToId(eID);
    }

    $scope.deleteType = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteType/' + id;
                rest.delete().success(function (data) {
                    notification('Record updeted deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };
    // Resource Type END

    // Resource Status START

    rest.path = 'statustype/1';
    rest.get().success(function (data) {
        $scope.userStatus = data;
        $scope.userstatusEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getStatus = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'userstatus';
        rest.model().success(function (data) {
            $scope.status = data;
        }).error(errorCallback);

        var eleHeight = elmYPosition(eID)
        $('.md-content').animate({ scrollTop: eleHeight }, 200);
        //scrollToId(eID);
    }

    $scope.saveStatus = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.status.status_id) {
                $routeParams.id = $scope.status.status_id;
                rest.path = 'userstatus';
                rest.put($scope.status).success(function () {
                    notification('Record updeted successfully', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                $scope.status.status_type = 1;
                rest.path = 'userstatus';
                rest.post($scope.status).success(function (data) {
                    notification('Record inserted successfully', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteStatusModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'userstatus/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };
    // Resource Status END

    // Resource position START
    rest.path = 'GetuserPosition';
    rest.get().success(function (data) {
        $scope.userPosition = data;
    }).error(errorCallback);

    $scope.getPosition = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'GetuserPosition';
        rest.model().success(function (data) {
            $scope.position = data;
        }).error(errorCallback);


        var eleHeight = elmYPosition(eID)
        $('.md-content').animate({ scrollTop: eleHeight }, 200);
        //scrollToId(eID);
    }

    $scope.savePosition = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.position.position_id) {
                $routeParams.id = $scope.position.position_id;
                rest.path = 'userPosition';
                rest.put($scope.position).success(function () {
                    notification('Record updated successfully', 'success');
                    $route.reload();
                    $timeout(function () {
                        var eleHeight = elmYPosition('position');
                        $('.md-content').animate({ scrollTop: eleHeight }, 500);
                    }, 500);
                }).error(errorCallback);
            } else {
                if ($scope.position.status == undefined) {
                    $scope.position.status = '0';
                }

                rest.path = 'userPosition';
                rest.post($scope.position).success(function (data) {
                    notification('Record inserted successfully', 'success');
                    $route.reload();
                    $timeout(function () {
                        var eleHeight = elmYPosition('position');
                        $('.md-content').animate({ scrollTop: eleHeight }, 500);
                    }, 500);
                }).error(errorCallback);
            }
        }
    };

    $scope.deletePositionModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'userPosition/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };
    // Resource position END


}).controller('userController', function ($scope, $log, $location, $route, fileReader, rest, $uibModal, $window, $rootScope, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.setItem("contactUserId", " ");
    $window.localStorage.setItem("contactPersonId", " ");
    $window.localStorage.setItem("priceListClientId", " ");
    $window.localStorage.setItem("useriResourceType", " ");


    $scope.addUser = function (id) {
        if (id == 2) {
            $window.localStorage.setItem("externalPricelistId", " ");
            $window.localStorage.setItem("ShowuserName", " ");
            $window.localStorage.setItem("contactPersonId", " ");
            $window.localStorage.setItem("useriResourceType", 2);
            $location.path('/user-profile');
        } else {
            $window.localStorage.setItem("useriResourceType", 1);
            $location.path('/internal');
        }
    }
    rest.path = 'user/' + $routeParams.id;
    rest.get().success(function (data) {
        $scope.userlist = data.data;
    }).error(errorCallback);

    $window.localStorage.iUserId = "";
    $window.localStorage.resourceType = "";
    $window.localStorage.currentUserName = ""
    $window.localStorage.userType = 1;
    $window.localStorage.resourceType = $routeParams.id;
    $window.localStorage.priority = "resource";
    $rootScope.uType = 1;

    if ($routeParams.id == '1') {
        $scope.updatedBy = $window.localStorage.getItem("session_iUserId");
        rest.path = 'userUpdate_Byid';
        rest.put($scope.updatedBy).success(function (data) { }).error(errorCallback);
    } else {
        $scope.updatedBy = $window.localStorage.getItem("session_iUserId");
        rest.path = 'userUpdate_Byid';
        rest.put($scope.updatedBy).success(function (data) { }).error(errorCallback);
    }

    if ($routeParams.id == '1')
        $scope.btn_resource_add = false;
    else
        $scope.btn_resource_add = true;

    $scope.deleteUser = function (id, image, userName, iFkUserTypeId) {
        bootbox.confirm("Are you sure you want to delete this resource.?<br/><strong>Please note that all information in this resource profile will be deleted.</strong>", function (result) {
            if (result == true) {
                rest.path = 'deleteUser/' + id + '/' + image;
                rest.delete().success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = id;
                    $scope.logMaster.log_title = userName;
                    $scope.logMaster.log_type = "delete";
                    if (iFkUserTypeId == 1) {
                        $scope.logMaster.log_status = "internal_res";
                    } else {
                        $scope.logMaster.log_status = "external_res";
                    }
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    $scope.workingHour = function (id, table, type) {
        $routeParams.messageId = id;
        $window.localStorage.setItem("messageId", id);
        $routeParams.messageTable = table;
        $routeParams.messageType = type;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/message.html',
            controller: 'messageController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            // debugger;
            $scope.selected = selectedItem;
            $route.reload();
        });
    };
}).controller('viewInternaldetailController', function ($scope, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.loginUserId = $window.localStorage.getItem("session_iUserId");
    $scope.viewFileManagerInternal = function (id) {
        closeWindows();
        $window.localStorage.setItem("internal", id);
        var userFilePopupInternal = $window.open('#/filemanage/internal', "popup", "width=2000,height=750");
        userFilePopupInternal.addEventListener("beforeunload", function () {
            localStorage['parentId'] = ' ';
            return false;
        }, false);
        openWindows.push(userFilePopupInternal);
    };


    $scope.changeUserStatus = function (currentStatus) {
        
        if (currentStatus == 3) {
            currentStatus = 4;
        } else if (currentStatus != 3) {
            currentStatus = 3;
        }
        //return false;

        var data = {
            eUserStatus: currentStatus
        }
        rest.path = 'changeUserStatus';
        rest.put(data).success(function (res) {
            if (res.status == 200) {
                $scope.userprofiledata.eUserStatus = currentStatus;
                notification(res.msg, 'success');
            }
        }).error(errorCallback);
    }


    if ($routeParams.id) {
        rest.path = 'viewExternalget/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.userprofiledata = data;
            
            var CountryCode = JSON.parse(data.iMobile).countryTitle;
            var displayCode = '(+' + CountryCode.split('+')[1] + ')';
            $scope.userprofiledata.iMobile = displayCode + ' ' + JSON.parse(data.iMobile).mobileNumber;
            console.log('$scope.userprofiledata.dtBirthDate', $scope.userprofiledata.dtBirthDate)
            $scope.Age = '';
            if(! ['0000-00-00', ''].includes($scope.userprofiledata.dtBirthDate))
                $scope.Age = getAge($scope.userprofiledata.dtBirthDate.split('-')[0],
                    $scope.userprofiledata.dtBirthDate.split('-')[1],
                    $scope.userprofiledata.dtBirthDate.split('-')[2]
                );
            $scope.userprofiledata.dtBirthDate = (!['0000-00-00', ''].includes($scope.userprofiledata.dtBirthDate)) ? moment($scope.userprofiledata.dtBirthDate).format($window.localStorage.getItem('global_dateFormat')) : '';
        }).error(errorCallback);
    }
    $scope.deleteUser = function (id, image, userName, iFkUserTypeId) {
        image = image ? image : 'blank.png'; 
        bootbox.confirm("Are you sure you want to delete this resource.?<br/><strong>Please note that all information in this resource profile will be deleted.</strong>", function (result) {
            if (result == true) {
                rest.path = 'deleteUser/' + id + '/' + image;
                rest.delete().success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = id;
                    $scope.logMaster.log_title = userName;
                    $scope.logMaster.log_type = "delete";
                    if (iFkUserTypeId == 1) {
                        $scope.logMaster.log_status = "internal_res";
                    } else {
                        $scope.logMaster.log_status = "external_res";
                    }
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $location.path('user/' + iFkUserTypeId);
                }).error(errorCallback);
            }
        });
    };
    $scope.emailSent = function (id, table, type) {
        $routeParams.messageId = id;
        $window.localStorage.setItem("messageId", id);
        $routeParams.messageTable = table;
        $routeParams.messageType = type;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/message.html',
            controller: 'messageController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            // debugger;
            $scope.selected = selectedItem;
            $route.reload();
        });
    };

    $scope.sendAcountActivationlink = function (id) {
        if(id && $scope.userprofiledata){
            if($scope.userprofiledata.vEmailAddress){
                rest.path = 'sendAcountActivationlink'
                rest.post($scope.userprofiledata).success(function (result) {
                    if(result.status == 200){
                        notification('Activation link has been sent successfully!','success')
                    }else{
                        notification('Activation link has not been sent!','warning')
                    }
                }).error(errorCallback);
            }else{
                notification('Email not available!','warning')
            }    
        }
    }

}).controller('messageController', function ($scope, $log, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.bccShow = function () {
        $scope.bccshow = true;
    }
    $scope.ccHideShow = function () {
        angular.element('#ccHideShow').toggleClass('none');
    }
    $scope.bccHideShow = function () {
        angular.element('#bccHideShow').toggleClass('none');
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $timeout(function () {
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(2)').remove();
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(3)').remove();
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(4)').remove();
    }, 500);

    rest.path = 'emailSigngetdata';
    rest.get().success(function (data) {
        angular.element('.selected-items-box').bind('click', function (e) {
            e.stopPropagation();
            angular.element('.multiple-select-wrapper .list').toggle('slideDown');
        });
        angular.element('.multiple-select-wrapper .list').bind('click', function (e) {
            e.stopPropagation();
        });
        angular.element(document).bind('click', function () {
            angular.element('.multiple-select-wrapper .list').slideUp();
        });
        $scope.Airlines = data;
        $scope.getSelectedItemsOnly = function (item) {
            return item.selected;
        };
    });
    $scope.mailToSecondaryEmail = $routeParams.toSecondaryEmail;
    if ($routeParams.messageId && $routeParams.messageTable == "internal" || $routeParams.messageTable == "External") {
        rest.path = 'messageUserOneget/' + $routeParams.messageId;
        rest.get().success(function (data) {
            $scope.message = data.data;
            $scope.messageEmailSign = data.info;
            //$scope.message.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.info.sign_detail + '</br><img src="' + data.info.sign_image + '" width="100px"></div>';
            $scope.message.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.info.sign_detail + '</div>';
        }).error(errorCallback);
    }

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope).then(function (result) {
            $scope.fileAttatchName = file.name;
            $scope.attachementfile = result;
        });
    };

    if ($routeParams.messageId && $routeParams.messageTable == 'direct') {
        rest.path = 'clientMessageGet/' + $routeParams.messageId;
        rest.get().success(function (data) {
            $scope.message = data;
        }).error(errorCallback);
    }

    if ($routeParams.messageId && $routeParams.messageTable == 'indirect') {
        rest.path = 'clientIndirectMessageGet/' + $routeParams.messageId;
        rest.get().success(function (data) {
            $scope.message = data;
        }).error(errorCallback);
    }

    if ($window.localStorage.getItem("messageClientTable") == 'direct') {
        rest.path = 'clients';
        rest.get().success(function (data) {
            /*var valueData = [];
            $scope.clientlist = data;

            angular.forEach(data, function(value, key) {
                var obj = {
                    'id': value.vEmailAddress,
                    'text': value.vEmailAddress
                };
                valueData.push(obj);
            });
            angular.element('#message-cc').select2({
                allowClear: true,
                data: valueData,
                multiple: true
            });
            angular.element('#message-bcc').select2({
                allowClear: true,
                data: valueData,
                multiple: true
            });*/
            if (data) {
                rest.path = 'clientDirectMessageEmailIdGet';
                rest.get().success(function (data) {
                    $scope.message.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.sign_detail + '</div>';
                    //$scope.message.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.sign_detail + '</br><img src="' + data.sign_image + '" width="100px"></div>';
                }).error(errorCallback);
            }
        }).error(errorCallback);

        $scope.ok = function (formid, message) {
            
            var data = {
                "file": $scope.attachementfile,
                "data": message
            };
            
            if (angular.element("#" + formid).valid()) {
                angular.element('.signimgdata').remove();
                $routeParams.id = $window.localStorage.getItem("messageClientId");
                var a = angular.element("#emailSignId").val();
                rest.path = 'sendClientMessage';
                rest.put(data).success(function (data) {
                    notification('Mail send successfully', 'success');
                }).error(errorCallback);
                $timeout(function () {
                    $uibModalInstance.close(data);
                    $route.reload();
                }, 1000)
            }
        };
    }

    if ($window.localStorage.getItem("messageClientTable") == 'indirect') {
        rest.path = 'clientlistindirect_show';
        rest.get().success(function (data) {
            var valueData = [];
            $scope.clientlist = data;
            angular.forEach(data, function (value, key) {
                var obj = {
                    'id': value.vEmailAddress,
                    'text': value.vEmailAddress
                };
                valueData.push(obj);
            });

            angular.element('#message-cc').select2({
                allowClear: true,
                data: valueData,
                multiple: true
            });

            angular.element('#message-bcc').select2({
                allowClear: true,
                data: valueData,
                multiple: true
            });
        }).error(errorCallback);
    }

    if ($window.localStorage.getItem("messageClientTable") == 'indirect') {
        $scope.ok = function (formid, message) {
            var data = {
                "file": $scope.attachementfile,
                "data": message
            };
            if (angular.element("#" + formid).valid()) {
                $routeParams.id = $window.localStorage.getItem("messageClientId");
                rest.path = 'sendClientIndirectMessage';
                rest.put(data).success(function (data) {
                    notification('Mail send successfully', 'success');
                }).error(errorCallback);
                $timeout(function () {
                    $uibModalInstance.close(data);
                    $route.reload();
                }, 1000)
            }
        };
    }

    if ($routeParams.messageTable == 'internal' || $routeParams.messageTable == 'External') {
        if ($routeParams.messageType == '1') {
            rest.path = 'clientlistindirectGet/' + $routeParams.messageType;
            rest.get().success(function (data) {
                var valueData = [];
                $scope.clientlist = data.data;
                angular.forEach(data.data, function (value, key) {
                    var obj = {
                        'id': value.vEmailAddress,
                        'text': value.vEmailAddress
                    };
                    valueData.push(obj);
                });
                angular.element('#message-cc').select2({
                    allowClear: true,
                    data: valueData,
                    multiple: true
                });
                angular.element('#message-bcc').select2({
                    allowClear: true,
                    data: valueData,
                    multiple: true
                });
            }).error(errorCallback);
        }

        if ($routeParams.messageType == '2') {
            rest.path = 'userExternalGet/' + $routeParams.messageType;
            rest.get().success(function (data) {
                var valueData = [];
                $scope.clientlist = data.data;
                angular.forEach(data.data, function (value, key) {
                    var obj = {
                        'id': value.vEmailAddress,
                        'text': value.vEmailAddress
                    };
                    valueData.push(obj);
                });
                angular.element('#message-cc').select2({
                    allowClear: true,
                    data: valueData,
                    multiple: true
                });
                angular.element('#message-bcc').select2({
                    allowClear: true,
                    data: valueData,
                    multiple: true
                });
            }).error(errorCallback);
        }

        $scope.ok = function (formid, message) {
            var data = {
                "file": $scope.attachementfile,
                "data": message
            };
            if ($routeParams.toSecondaryEmail != undefined) {
                data.data.vEmailAddress = data.data.vSecondaryEmailAddress;
            }

            if (angular.element("#" + formid).valid()) {
                $routeParams.id = $window.localStorage.getItem("messageId");
                rest.path = 'sendMessage';
                rest.put(data).success(function (data) {
                    notification('Mail send successfully', 'success');
                }).error(errorCallback);
                $timeout(function () {
                    $uibModalInstance.close(data);
                    $route.reload();
                }, 1000);
            }
        };
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}).controller('viewExternaldetailController', function ($cookieStore, $scope, $window, $compile, $timeout, $uibModal, $log, rest, $route, $rootScope, $routeParams, $location) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.loginUserId = $window.localStorage.getItem("session_iUserId");
    $routeParams.userTypeId = 1;
    $window.localStorage.iUserId = $routeParams.id;
    $scope.ContactPersonName = $window.localStorage.getItem("contactPersonId");
    $scope.user_Id = $window.localStorage.getItem("ShowuserId");
    $scope.uType = $window.localStorage.userType;
    $scope.currentUserName = $window.localStorage.currentUserName;
    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    $scope.overAllshow = true;

    $scope.changeUserStatus = function (currentStatus) {
        
        if (currentStatus == 3) {
            currentStatus = 4;
        } else if (currentStatus != 3) {
            currentStatus = 3;
        }
        //return false;

        var data = {
            eUserStatus: currentStatus
        }
        rest.path = 'changeUserStatus';
        rest.put(data).success(function (res) {
            if (res.status == 200) {
                $scope.viewExternalCommunicational.eUserStatus = currentStatus;
                notification(res.msg, 'success');
            }
        }).error(errorCallback);
    }

    //new rating
    $scope.newfeedback = function (scrollToNew) {
        $scope.overAllshow = false;
        $scope.newFeedBack = false;
        $scope.rate = {};
        angular.element('#job_id').select2('val', " ");
        $scope.totalRate = "";
        $scope.rate.carryOut = "";
        $timeout(function () {
            scrollToId(scrollToNew);
        }, 100);
    }

    //view rating
    $scope.viewfeedback = function (scrollToView) {
        $scope.overAllshow = false;
        $scope.newFeedBack = true;
        $scope.rate = {};
        angular.element('#job_id').select2('val', " ");
        $scope.totalRate = "";
        $scope.rate.carryOut = "";
        $timeout(function () {
            scrollToId(scrollToView);
        }, 100);
    }

    $scope.overallFeedback = function () {
        $scope.overAllshow = true;
        $scope.getOverAllRate();
    }

    //overall rating
    $scope.getOverAllRate = function () {
        rest.path = "resourceAssets/" + $window.localStorage.iUserId;
        rest.get().success(function (data) {
            var language = 0;
            var specialist = 0;
            var technical = 0;
            var deadlines = 0;
            var flexibility = 0;

            angular.forEach(data, function (val, key) {
                if (val.language)
                    language += parseInt(val.language);
                if (val.specialist)
                    specialist += parseInt(val.specialist);
                if (val.technical)
                    technical += parseInt(val.technical);
                if (val.deadlines)
                    deadlines += parseInt(val.deadlines);
                if (val.flexibility)
                    flexibility += parseInt(val.flexibility);
            });

            var totalRate = parseInt(language) + parseInt(specialist) + parseInt(technical) + parseInt(deadlines) + parseInt(flexibility);

            $scope.overAllRate = {
                "language": Math.ceil(parseInt(language) * 5 / totalRate),
                "specialist": Math.ceil(parseInt(specialist) * 5 / totalRate),
                "technical": Math.ceil(parseInt(technical) * 5 / totalRate),
                "deadlines": Math.ceil(parseInt(deadlines) * 5 / totalRate),
                "flexibility": Math.ceil(parseInt(flexibility) * 5 / totalRate)
            }

            var Total = 0;
            var count = 0;

            angular.forEach($scope.overAllRate, function (val, key) {
                if (val) {
                    Total += parseInt(val) * 20;
                    count++;
                }
            });

            $scope.overAlltotalRate = Math.ceil(Total / count);
            $scope.displayRate = parseInt($scope.overAlltotalRate);
            $window.localStorage.UseroverallRate = $scope.displayRate;
            if ($scope.displayRate > 0) {
                angular.element('#overAllRateDisplay').attr('data-percent', $scope.displayRate);
                $(".progress-bar1").loading();
            } else {
                angular.element('#overAllRateDisplay').attr('data-percent', '0');
                $(".progress-bar1").loading();
            }

        });
    }

    $scope.getOverAllRate();

    //$scope.currentDate = Date();
    $scope.model = {
        basic: 0,
        readonly: 2.5,
        readonly_enables: true,
        minMaxStep: 0,
        pristine: 3,
        resetable: 1,
        heightWidth: 1.5,
        callbacks: 5,
        custom: 4,
    };

    $scope.calculateRate = function () {
        var Total = 0;
        var count = 0;
        angular.forEach($scope.rate, function (val, i) {
            if (i == 'language' || i == 'specialist' || i == 'technical' || i == 'deadlines' || i == 'flexibility') {
                if (val != 0 && val != "") {
                    Total += val * 20;
                    count++;
                }
            }
        });
        $scope.totalRate = Math.ceil(Total / count);
    }

    $scope.resetResource = function () {
        $route.reload();
        $timeout(function () {
            $("ul.nav-tabs").find(`[index='8']`).find('a:first').triggerHandler('click');
        }, 1000);
    }

    if ($window.localStorage.iUserId) {
        rest.path = "resourceAssets/" + $window.localStorage.iUserId;
        rest.get().success(function (data) {
            $scope.setactive = true;
            $scope.assetsOpt = data;
        });
    }

    $scope.selectAsset = function (id, jobid) {
        var assetId = id.split(',')[1];
        $scope.totalRate = "";
        if (assetId != undefined) {
            if (jobid) {
                rest.path = "resourceAssetsGetOne/" + assetId + "/" + jobid;
                rest.get().success(function (data) {
                    $scope.rate = data;
                    if (data) {
                        angular.element('#job_id').select2('val', data.job_id);
                        $scope.rate.period = data.period + ',' + data.resourceId;
                        $scope.totalRate = data.totalRate;
                        $scope.rate.carryOut = data.vUserName;
                    } else {
                        notification("No rating", 'warning');
                    }
                }).error(errorCallback);
            } else {
                notification("Please select job", "warning");
            }
        } else {
            $scope.rate = {};
            $scope.rate.period = id;
            $scope.totalRate = '0.0';
            $scope.setactive = true;
        }
    }
    $scope.loginUserName = $window.localStorage.getItem("session_vUserName");
    $scope.newResource = function (frmId, jobID) {
        
        var fromDate = $('#StartDate').val();
        var toDate = $('#endDate').val();
        if (!fromDate || !toDate) {
            notification('Please select date range', 'warning')
            return false;
        }

        fromDate = moment(originalDateFormatNew(fromDate)).format('YYYY-MM-DD');
        toDate = moment(originalDateFormatNew(toDate)).format('YYYY-MM-DD');
        $scope.rate.period = fromDate + '^' + toDate;
        if ($window.localStorage.iUserId) {
            if (angular.element('#' + frmId).valid()) {
                if ($scope.rate.period != undefined) {
                    if ($scope.totalRate) {
                        $scope.iUserId = $window.localStorage.iUserId;
                        $scope.rate.iUserId = $scope.iUserId;
                        $scope.rate.carryOut = $window.localStorage.getItem("session_iUserId");
                        $scope.rate.totalRate = $scope.totalRate;
                        $scope.rate.job_id = angular.element('#job_id').val();
                        rest.path = "resourceAssets";
                        rest.post($scope.rate).success(function (data) {
                            if (data.status == 403) {
                                notification(data.msg, 'error');
                            }
                            $route.reload();
                            /*$timeout(function() {
                                $("ul.nav-tabs").find(`[index='8']`).find('a:first').triggerHandler('click');
                            }, 1000);*/
                        }).error(errorCallback);
                    }
                }
            }
        } else {
            notification('Please create user', 'warning');
        }
    }

    rest.path = 'getExternalUserJobs/' + $routeParams.id;
    rest.get().success(function (data) {

        var prType = [];
        angular.forEach(data, function (value, key) {
            var obj = {
                id: value.job_summmeryId,
                text: value.po_number
            };
            prType.push(obj);
        });
        $timeout(function () {
            $('#job_id').select2({
                allowClear: true,
                data: prType
            });
        }, 200);

    }).error(function (data, error, status) { });

    $scope.viewfeedbackPoup = function () {
        var dataObj = {
            userId: $routeParams.id,
            userName: $('.profileTitleh').text()
        };
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/viewfeedbackPoup.html',
            controller: 'viewfeedbackPoupController',
            size: '',
            resolve: {
                items: function () {
                    return dataObj;
                }
            }
        });
    }

    $scope.assetsCurrentDate = function (fromD, toD) {
        var from = moment(fromD, "DD/MM/YYYY");
        var to = moment(toD, "DD/MM/YYYY");
        if (fromD && toD) {
            if (to >= from) {
                $scope.currentDate = fromD + ' - ' + toD;
            } else {
                $scope.toDate = '';
                notification('Lowest date not allowed', "warning");
            }
        }
    }
    $scope.viewFileManager = function (id) {
        closeWindows();
        $window.localStorage.setItem("contactUserId", id);
        //var userFilePopup = $window.open('#/filemanage/user', "popup", "width=2000,height=750");
        var userFilePopup = $window.open('#/filemanage/user', "popup", "width=780,height=750");
        userFilePopup.addEventListener("beforeunload", function () {
            localStorage['parentId'] = ' ';
            return false;
        }, false);
        openWindows.push(userFilePopup);
    };
    $scope.emailSent = function (id, table, type, toSecondaryEmail) {
        $routeParams.messageId = id;
        $routeParams.toSecondaryEmail = toSecondaryEmail;
        $window.localStorage.setItem("messageId", id);
        $routeParams.messageTable = table;
        $routeParams.messageType = type;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/message.html',
            controller: 'messageController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            // debugger;
            $scope.selected = selectedItem;
            $route.reload();
        });
    };

    if ($routeParams.id) {
        rest.path = 'viewExternalget/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.viewExternalCommunicational = data;
            //Display Mobile Number
            var CountryCode = JSON.parse(data.iMobile).countryTitle;
            var displayCode = '(+' + CountryCode.split('+')[1] + ')';
            $scope.viewExternalCommunicational.iMobile = displayCode + ' ' + JSON.parse(data.iMobile).mobileNumber;

            //Count Age
            $scope.Age = getAge($scope.viewExternalCommunicational.dtBirthDate.split('-')[0],
                $scope.viewExternalCommunicational.dtBirthDate.split('-')[1],
                $scope.viewExternalCommunicational.dtBirthDate.split('-')[2]
            );

            $scope.viewExternalCommunicational.dtCreatedDate = moment($scope.viewExternalCommunicational.dtCreatedDate).format($window.localStorage.getItem('global_dateFormat'));
            $scope.viewExternalCommunicational.dtBirthDate = moment($scope.viewExternalCommunicational.dtBirthDate).format($window.localStorage.getItem('global_dateFormat'));

            var address = [];

            angular.forEach(JSON.parse(data.address1Detail), function (val, i) {
                angular.element('#' + val.id).html(val.value);
                address.push(val.value);
            });
            angular.element('#address1').text($.grep(address, Boolean).join(', '));
        }).error(errorCallback);

        rest.path = 'PriceListExternalEditgetone/' + $routeParams.id;
        rest.get().success(function (data) {
            if (data) {
                $scope.price = data;
                var currency = data.currancy_id.split(',');
                $scope.currencySymbol = currency[1];
                $scope.currencyCode = currency[0];
                $routeParams.Iuser_Id = $scope.price.iuserId;
                $scope.translate = JSON.parse(data['translation']);
                $scope.proofreading = JSON.parse(data['proofreading']);
                $scope.tep = JSON.parse(data['tep']);
            }
        })
    }

    $scope.sendAcountActivationlink = function (id) {
        if(id && $scope.viewExternalCommunicational){
            if($scope.viewExternalCommunicational.vEmailAddress){
                rest.path = 'sendAcountActivationlink'
                rest.post($scope.viewExternalCommunicational).success(function (result) {
                    if(result.status == 200){
                        notification('Activation link has been sent successfully!','success')
                    }else{
                        notification('Activation link has not been sent!','warning')
                    }
                }).error(errorCallback);
            }else{
                notification('Email not available!','warning')
            }    
        }
    }    

    if ($routeParams.id && $routeParams.userTypeId) {
        rest.path = 'getUserProperty/' + $routeParams.id + '/' + $routeParams.userTypeId;
        rest.get().success(function (data) {
            $scope.propList = data;
        }).error(errorCallback);
    }

    if ($routeParams.id) {
        rest.path = 'contactExternalget/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.contactList1 = data;
        }).error(errorCallback);
    }

    if ($routeParams.id) {
        rest.path = 'getuserpaymentdata/' + $routeParams.id;
        rest.get().success(function (data) {
            if (data) {
                $scope.payment = JSON.parse(data.vPaymentInfo);
                $scope.bank = (data.vBankInfo) ? JSON.parse(data.vBankInfo) : '';
            }

        }).error(errorCallback);
    }

    $scope.ContactPersonName = $window.localStorage.getItem("contactPersonId");
    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    $scope.user_Id = $window.localStorage.setItem("ShowuserId", $scope.user_cId);
    $scope.uType = $window.localStorage.userType;
    $scope.currentUserName = $window.localStorage.currentUserName;
    $scope.animationsEnabled = true;
    $scope.toggleAnimation = function () {
        $scope.animationsEnabled = !$scope.animationsEnabled;
    };

    $scope.deleteUser = function (id, image, userName, iFkUserTypeId) {
        var image = image ? image : 'blank.png'; 
        bootbox.confirm("Are you sure you want to delete this resource.?<br/><strong>Please note that all information in this resource profile will be deleted.</strong>", function (result) {
            if (result == true) {
                rest.path = 'deleteUser/' + id + '/' + image;
                rest.delete().success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = id;
                    $scope.logMaster.log_title = userName;
                    $scope.logMaster.log_type = "delete";
                    if (iFkUserTypeId == 1) {
                        $scope.logMaster.log_status = "internal_res";
                    } else {
                        $scope.logMaster.log_status = "external_res";
                    }
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $location.path('user/' + iFkUserTypeId);
                }).error(errorCallback);
            }
        });
    };
    $scope.Calender = function () {
        $scope.calender = false;
        $scope.workinghours = false;
    }

    $scope.Working = function () {
        $scope.calender = true;
        $scope.workinghours = true;
    }

    $scope.deleteEvent = function (id) {
        bootbox.confirm("Are you sure you want to delete this Leave?<br/>", function (result) {
            if (result == true) {
                rest.path = 'deleteEvent/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    $scope.init = function () {
        // debugger;
        if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
            rest.path = 'events/' + $window.localStorage.iUserId;
            rest.get().success(function (data) { }).error(errorCallback);
        }
    };

    $scope.init();
    $scope.init = function () {
        if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
            rest.path = 'workinghour/' + $window.localStorage.iUserId;
            rest.get().success(function (data) {
                $scope.data = data;
                if (data) {
                    $scope.wh_data_forfront = JSON.parse(data.wh_data);
                }
            }).error(errorCallback);
        }
    };

    $scope.init();
    var date = new Date();
    var d = date.getDate();
    var m = date.getMonth();
    var y = date.getFullYear();

    /* event source that calls a function on every view switch */
    $scope.eventsF = function (start, end, timezone, callback) {
        callback($scope.eventsList);
    };

    /* alert on eventClick */
    $scope.alertOnEventClick = function (date, jsEvent, view, size) {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/addEvent.html',
            controller: 'addEventController',
            size: size,
            resolve: {
                items: function () {
                    return date;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            $route.reload();
        });
    };

    /* alert on Drop */
    $scope.alertOnDrop = function (event, delta, revertFunc, jsEvent, ui, view) {
        var start_date = dateOnresize(event.start._i, delta);
        var end_date = dateOnresize(event.end._i, delta);
        $scope.eventData = {
            start: start_date,
            end: end_date,
            title: event.title,
            user_id: event.user_id,
            updated_by: $window.localStorage.session_iUserId
        };
        $routeParams.id = event.event_id;
        rest.path = 'events';
        rest.put($scope.eventData).success(function (data) {

        }).error(errorCallback);
    };

    /* alert on Resize */
    $scope.alertOnResize = function (event, delta, revertFunc, jsEvent, ui, view) {
        var sr = dateToformat(event.start._i);
        var start_date = dateTostring(sr);
        var end_date = dateOnresize(event.end._i, delta);
        $scope.eventData = {
            start: start_date,
            end: end_date,
            title: event.title,
            user_id: event.user_id,
            updated_by: $window.localStorage.session_iUserId
        };
        $routeParams.id = event.event_id;
        rest.path = 'events';
        rest.put($scope.eventData).success(function (data) {
            $route.reload();
        }).error(errorCallback);
    };

    /* add and removes an event source of choice */
    $scope.addRemoveEventSource = function (sources, source) {
        var canAdd = 0;
        angular.forEach(sources, function (value, key) {
            if (sources[key] === source) {
                sources.splice(key, 1);
                canAdd = 1;
            }
        });
        if (canAdd === 0) {
            sources.push(source);
        }
    };

    /* remove event */
    $scope.remove = function (index) {
        $scope.events.splice(index, 1);
    };
    /* Change View */
    $scope.changeView = function (view, calendar) {
        uiCalendarConfig.calendars[calendar].fullCalendar('changeView', view);
    };
    /* Change View */
    $scope.renderCalender = function (calendar) {
        $timeout(function () {
            if (uiCalendarConfig.calendars[calendar]) {
                uiCalendarConfig.calendars[calendar].fullCalendar('render');
                uiCalendarConfig.calendars[calendar].fullCalendar('rerenderEvents');
            }
        });
    };
    /* Render Tooltip */
    $scope.eventRender = function (event, element, view) {
        element.attr({
            'tooltip': event.title,
            'tooltip-append-to-body': true
        });
        $compile(element)($scope);
    };

    /* day click */
    $scope.dayClick = function (event, element, view) {
        if ($window.localStorage.iUserId != '' && $window.localStorage.iUserId != undefined) {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/addEvent.html',
                controller: 'addEventController',
                size: '',
                resolve: {
                    items: function () {
                        return event;
                    }
                }
            });
            modalInstance.result.then(function (selectedItem) {
                $scope.selected = selectedItem;
                $route.reload();
            });
        } else {
            notification('Please Create User', 'warning');
        }
    };
    /* add working hour */
    $scope.workingHour = function () {
        if ($window.localStorage.iUserId != '' && $window.localStorage.iUserId != undefined) {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/addWorkinghour.html',
                controller: 'workingHourController',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.data;
                    }
                }
            });
            modalInstance.result.then(function (selectedItem) {
                // debugger;
                $scope.selected = selectedItem;
                $route.reload();
            });
        } else {
            notification('Please Create User', 'warning');
        }
    };

    $scope.cellColor = function (date, cell) {
        $(cell).removeClass('ui-widget-content');
        $(cell).addClass('normal-day');
        $timeout(function () {
            displayRendom(date, cell, $scope.data);
        }, 800);
    };

    /* config object */
    $scope.uiConfig = {
        calendar: {
            height: 450,
            editable: true,
            header: {
                left: '',
                center: 'prev title next',
                right: 'today month,agendaWeek,agendaDay'
            },
            buttonIcons: {
                prev: 'left-single-arrow',
                next: 'right-single-arrow'
            },
            eventClick: $scope.alertOnEventClick,
            eventDrop: $scope.alertOnDrop,
            eventResize: $scope.alertOnResize,
            dayClick: $scope.dayClick,
            dayRender: $scope.cellColor,
        }
    };
    $scope.calEventsExt = [];
    $scope.eventsList = [];
    if ($window.localStorage.iUserId != '' && $window.localStorage.iUserId != undefined) {
        $routeParams.id = $window.localStorage.iUserId;
        rest.path = 'userevents';
        rest.model().success(function (data) {
            angular.forEach(data, function (val, i) {
                $scope.eventsList.push({
                    event_id: val.event_id,
                    title: val.title,
                    start: stringTodate(val.start),
                    end: stringTodate(val.end)
                });
            });
        }).error(errorCallback);
    }
    /* event sources array */
    $scope.eventSources = [$scope.events, $scope.eventSource, $scope.eventsF];
    $scope.eventSources2 = [$scope.calEventsExt, $scope.eventsF, $scope.eventsList];
    $scope.saveCalendarExternal = function (id) {

    }

    rest.path = 'customerpriceAll/' + 2;
    rest.get().success(function (data) {
        $scope.priceListAll = data;
        
        $scope.lngstPriceList = data.filter( function (data) {
            if(data.price_currency)
                data.price_currency = (data.price_currency.toString()).split(',')[0];     
            return data.resource_id == $window.localStorage.iUserId;  
        });
        
    }).error(function () {});

    $scope.goToPricelist = function(id){
        if(id){
            $rootScope.parentPriceId = id;
            let extUserName = $scope.viewExternalCommunicational ? $scope.viewExternalCommunicational.vFirstName + ' ' + $scope.viewExternalCommunicational.vLastName : '';
            $rootScope.parentCurrentUserName = extUserName;
            $rootScope.parentExternalUserId = $window.localStorage.iUserId;
            $rootScope.parentUserId = $window.localStorage.iUserId;
            
            $location.path('price-list1');
        }
    
    }    

}).controller('communicationController', function ($scope, $log, $location, $route, fileReader, rest, $window, $rootScope, $routeParams, $uibModal, $cookieStore, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.superAdmin = $window.localStorage.getItem("session_superAdmin");
  
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.setItem("contactUserId", $routeParams.id);
    angular.element('.help-block').css('display', 'none');
    $scope.dateFormatGlobal = $window.localStorage.getItem('global_dateFormat');
    
    $scope.dtSeparator = $window.localStorage.getItem('dtSeparator');
    $scope.dateFormatD = moment($scope.toDayDate).format($window.localStorage.getItem('global_dateFormat'));
    $scope.existMenu = [];
    $scope.isValidMobileNumber = false;
    $scope.multipleDateArr = [];
    $scope.abscentDateArr = [];
    
            
    /* Mobile Validation START */
    var telInput = $("#iMobile"),
        errorMsg = $("#error-msg"),
        validMsg = $("#valid-msg");


    var reset = function () {
        telInput.removeClass("error");
        errorMsg.addClass("hide");
        validMsg.addClass("hide");
    };

    telInput.blur(function () {
        reset();
        $timeout(function () {
            if ($.trim(telInput.val())) {
                if (telInput.intlTelInput("isValidNumber")) {
                    
                    $scope.isValidMobileNumber = true;
                    validMsg.removeClass("hide");
                    $('#error-msg').addClass('hide');
                } else {
                    
                    $scope.isValidMobileNumber = false;
                    $('#error-msg').removeClass('hide');
                }
            }
        }, 200);
    });

    telInput.on("keyup change", reset);
    /* Mobile Validation END */

    // START Validation DOB
    // var dtDobInput = $("#dtBirthDate"),
    //     errorMsgDOB = $("#error-msg-dob");
    // var resetDOB = function () {
    //     dtDobInput.removeClass("error");
    //     errorMsgDOB.addClass("hide");
    // };
    $scope.isValidDob = true;
    // function dobIsValid(dateStr) {
    //     //const regex = /^\d{2}\/\d{2}\/\d{4}$/;
    //     const dtSeparator = $scope.dtSeparator;
    //     const regex = new RegExp("^\\d{2}\\" + dtSeparator + "\\d{2}\\" + dtSeparator + "\\d{4}$");
    //     if (dateStr.match(regex) === null) {
    //         return false;
    //     }
    //     const [day, month, year] = dateStr.split($scope.dtSeparator);
    //     // 👇️ format Date string as `yyyy-mm-dd`
    //     const isoFormattedStr = `${year}-${month}-${day}`;
    //     const date = new Date(isoFormattedStr);
    //     const timestamp = date.getTime();
    //     if (typeof timestamp !== 'number' || Number.isNaN(timestamp)) {
    //         return false;
    //     }
    //     return date.toISOString().startsWith(isoFormattedStr);
    // }
    // dtDobInput.blur(function () {
    //     resetDOB();
    //         const dobVal = $.trim(dtDobInput.val());
    //         if(dobVal.length > 0){
    //             var dobValid = dobIsValid(dobVal)
    //             
    //             if(dobValid){
    //             
    //                 $('#error-msg-dob').addClass('hide');
    //             }else{
    //                 $('#error-msg-dob').removeClass('hide');
    //             }
    //         }    
    // });    
    // dtDobInput.on("keyup change", reset);
    // END Validation DOB


    $timeout(function () {
        $scope.redirectToUserViewId = $routeParams.id;
    }, 100);

    // margin Css for datepicker
    $('#endDate').click(function () {
        var d = $('.bootstrap-datetimepicker-widget');
        if (d) {
            $('.bootstrap-datetimepicker-widget').css("bottom", "auto");
        }
    });

    //RandomPassword Generate
    $scope.getRandomPassword = function () {
        $scope.userprofiledata.vPassword = randomPassword(10)
        // Internal user
        var vPass = angular.element('#vPass').attr('type');
        if(vPass)    
            angular.element('#vPass').attr('type', 'text');
    }

    //Change Input Type
    $scope.changeInputType = function () {
        var type = angular.element('#vPassword').attr('type');
        if (type == 'password') {
            angular.element('#vPassword').attr('type', 'text');
        } else {
            angular.element('#vPassword').attr('type', 'password');
        }
    }

    //Change Input Type Internal user
    $scope.changeInputTypeInternal = function () {
        var vPass = angular.element('#vPass').attr('type');
        if (vPass == 'password') {
            angular.element('#vPass').attr('type', 'text');
        } else {
            angular.element('#vPass').attr('type', 'password');
        }
    }


    $scope.cityTimezone = function (id) {
        
        if(id){
            var city = id.split(',')[0];
            rest.path = "cityTimeZoneget/" + city;
            rest.get().success(function (data) {
                
                if (data != false) {
                    if ($scope.userprofiledata == undefined || $scope.userprofiledata == null || $scope.userprofiledata == "") {
                        $scope.userprofiledata = {};
                    }
                    //$scope.userprofiledata.vTimeZoneCity = data.timeZoneCity;
                    $scope.userprofiledata.vTimeZone = data.timeZone;
                    //    $timeout(function () {
                    //     $scope.$apply(function () {
                    //         $scope.userprofiledata.vTimeZone = data;
                    //     });
                    // }, 100);
                }
            });
        }    
    }

    $scope.getLocationdetail = function (id) {
        fetch('https://api.geoapify.com/v1/geocode/search?text=' + id + '&format=json&apiKey=52e8e340f8af4936bfb46512c9dbc3b5', {
            method: 'GET'
        })
            .then(function (response) {
                return response.json();
            })
            .then(function (data) {
                
                if (data.results && data.results.length > 0) {
                    /* $scope.vCity1 = data.results[0].city;
                    $scope.vState1 = data.results[0].state;
                    $scope.vCountry1 = data.results[0].country;
                    $scope.vZipcode1 = data.results[0].postcode; */
                }
            });
    }

    $scope.checkfirstname = function () {
        if ($scope.userprofiledata.iUserId) {
            var checkd = $scope.userprofiledata.vFirstName + ' ' + $scope.userprofiledata.vLastName
            if ($window.localStorage.admminusername != checkd) {
                notification('Username Successfully changed', 'success');
            }
        }
    }

    $scope.checklastname = function () {
        if ($scope.userprofiledata.iUserId) {
            var checkd = $scope.userprofiledata.vFirstName + ' ' + $scope.userprofiledata.vLastName;
            if ($window.localStorage.admminusername != checkd) {
                notification('Username Successfully changed', 'success');
            }
        }
    }

    $scope.notesWarning = function () {
        var checkNotes = $scope.userprofiledata.tMemo;
        if ($window.localStorage.notewarning != checkNotes && checkNotes != " ") {
            notification(checkNotes, 'information');
        }
    }

    $scope.contactAddExternal = function (id) {
        var contactA = [];
        angular.element("[id^=contact_]").each(function (i, val) {
            contactA.push({
                id: val.id,
                value: val.value
            });
        });
        $scope.info = JSON.stringify(contactA);
        rest.path = 'ContactAdd/' + $scope.contactUserId;
        rest.put($scope.info).success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }
    $scope.clearAbsentDate = function () {
        //$scope.userprofiledata.is_available = '';
        $scope.abscentDateArr = [];
        $scope.abDate = '';
        $scope.abDateTo = '';
        $scope.checkFromDate();
        //$('#multidatePick').multiDatesPicker('resetDates', 'picked');
    }
    $scope.clearJobDate = function () {
        $scope.userprofiledata.dtLast_job = '';
    }
    var userLastJob = '';
    if ($routeParams.id != undefined) {
        rest.path = 'getExternalUserJobs/' + $routeParams.id;
        rest.get().success(function (data) {
            let resDate = new Date(Math.max.apply(null, data.map(function(e) {
                if(e.created_date)
                    return new Date(e.created_date);
              })));
            if(resDate)
                userLastJob = moment(resDate).format($scope.dateFormatGlobal);
            
        });    
    }    

    // Europe country form json file
    // api - https://restcountries.com/v3.1/region/europe
    $scope.europeCountry = [];
    fetch('country-europe.json', { method: 'GET'}).then(function (response) {
        return response.json();
    })
    .then(function (data) {
        $scope.europeCountry = data;
    });
    $scope.stateOptional = '';

    if ($routeParams.id != undefined) {
        rest.path = 'getProfile';
        rest.model().success(function (data) {
            $scope.userprofiledata = data;
            $window.localStorage.iUserId = data.iUserId;
            $window.localStorage.setItem("externalPricelistId", data.iUserId);
            $window.localStorage.currentUserName = data.vFirstName + " " + data.vLastName;
            $scope.currentUserName = $window.localStorage.currentUserName;
            $scope.imgshow = true;

            $scope.isValidMobileNumber = true;
            if (data.dtBirthDate) {
                var dob = data.dtBirthDate.split("-");
            }
            var flagTitle = JSON.parse(data.iMobile).countryTitle;
            var flagClass = JSON.parse(data.iMobile).countryFlagClass;
            var Ccode = flagClass.split(' ')[1];
            var CcodeNum = flagTitle.split(':')[1].trim();

            var FinalMobileNum = CcodeNum + JSON.parse(data.iMobile).mobileNumber;

            $timeout(function () {
                $('#iMobile').intlTelInput("setNumber", FinalMobileNum);
                $scope.userprofiledata.iMobile = JSON.parse(data.iMobile).mobileNumber;
                
                if(data.tabPermission){
                    const tabPermission = Object.keys(JSON.parse(data.tabPermission))
                    angular.element('#tabPermission').val(tabPermission).trigger('change');
                }    
                if(data.menu_access){
                    const menu_access = Object.keys(JSON.parse(data.menu_access))
                    angular.element('#menu_access').val(menu_access).trigger('change');
                }    
            }, 100);

            //$scope.userprofiledata.menu_access = $scope.userprofiledata.menu_access ? JSON.parse($scope.userprofiledata.menu_access) : []; 
            //$scope.existMenu = $scope.userprofiledata.menu_access;
            
            $window.localStorage.admminusername = $scope.userprofiledata.vUserName;
            $window.localStorage.notewarning = $scope.userprofiledata.tMemo;

            $('#iGender').select2('val', data.iGender);

            if ($scope.userprofiledata.freelancer == 'translation') {
                $window.localStorage.setItem("contactPersonId", 'translation');
            }
            
            //if ($scope.userprofiledata.dtBirthDate == 'Invalid date' || $scope.userprofiledata.dtBirthDate == '1970-01-01 00:00:00' || $scope.userprofiledata.dtBirthDate == '0000-00-00 00:00:00' || $scope.userprofiledata.dtBirthDate == '0000-00-00')
            if( ['Invalid date','1970-01-01 00:00:00', '1970-01-01', '0000-00-00 00:00:00', '0000-00-00'].includes($scope.userprofiledata.dtBirthDate) )
                $scope.userprofiledata.dtBirthDate = '';
            else
                $scope.userprofiledata.dtBirthDate = moment($scope.userprofiledata.dtBirthDate).format($scope.dateFormatGlobal);

                console.log('$scope.userprofiledata.dtBirthDate', $scope.userprofiledata.dtBirthDate)
            
            $scope.userprofiledata.dtLast_job = userLastJob;
            if ($scope.userprofiledata.dtLast_job == 'Invalid date')
                $scope.userprofiledata.dtLast_job = '';
                
            if($scope.userprofiledata.is_available && $scope.userprofiledata.is_available != '["Invalid date"]'){    
                let is_available =  JSON.parse($scope.userprofiledata.is_available);
                $scope.multipleDateArr = is_available;
                if(is_available.length){
                    let abscentArr = is_available.filter(function(item) {
                        
                        if(item.dateFrom.split('-').length > 2){
                            //const abFormatDate = moment(item).format($scope.dateFormatGlobal + ' HH:mm');
                            item.dateFrom = moment(item.dateFrom).format($scope.dateFormatGlobal);
                            item.dateTo = moment(item.dateTo).format($scope.dateFormatGlobal);
                            
                            $scope.abscentDateArr.push(item)
                            return item;
                        }
                        //return datestring;
                    });
                        
                    //$scope.userprofiledata.is_available = abscentArr.toString();    
                    
                    //abscentDateArr
                }    
            }

            // if (data.address1Detail) {
            //     angular.forEach(JSON.parse(data.address1Detail), function (val, i) {
            //         angular.element('#' + val.id).val(val.value);
            //     });
            // }
            if (data.address1Detail) {
                angular.forEach(JSON.parse(data.address1Detail), function (val, i) {
                    angular.element('#' + val.id).val(val.value);
                    if(val.id == "address1_country"){
                        setTimeout(() => {
                            let euCountryEdt = $scope.europeCountry.filter(e => e.name.toLowerCase() === val.value.toLowerCase()).length > 0 ? true :false;
                            if(euCountryEdt){
                                $scope.stateOptional = '(Optional)';
                                $('#address1_administrative_area_level_1').removeAttr('required');
                            } 
                        }, 500);
                    }    
                });
            }
            if (data.address2Detail) {
                angular.forEach(JSON.parse(data.address2Detail), function (val, i) {
                    angular.element('#' + val.id).val(val.value);
                });
            }

            if(data.freelance_currency && data.freelance_currency.includes(','))
                angular.element('#freelanceCurrency').select2('data', { text: data.freelance_currency.split(',')[0] });
            
            $cookieStore.put('editInternalUser', $scope.userprofiledata);
            rest.path = 'getProfile/' + data.created_by;
            rest.get().success(function (result) {
                $scope.CreatedBy = result.vFirstName + ' ' + result.vLastName;
            }).error(errorCallback);

        }).error(errorCallback);
    } else {
        rest.path = 'getProfile/' + $window.localStorage.session_iUserId;
        rest.get().success(function (result) {
            $scope.CreatedBy = result.vFirstName + ' ' + result.vLastName;
        }).error(errorCallback);
        $scope.userprofiledata = {};

        rest.path = 'userProfileNumber/' + $window.localStorage.getItem("useriResourceType");
        rest.get().success(function (data) {
            $scope.userprofiledata.iResourceNumber = pad(data, 4);
        });

        //$scope.userprofiledata.vPassword = makeid();

        var currentdate = new Date();
        $scope.userprofiledata.dtCreationDate = getDatetime(currentdate);
    }
    if ($routeParams.id) {
        $scope.info = {};
        $scope.info.updatedBy_id = $window.localStorage.getItem("session_iUserId");
        $scope.info.updated_id = $routeParams.id;
        rest.path = 'internalResourceCheck'
        rest.post($scope.info).success(function (data) {
            $scope.UpdateUserName = data.UserName;
            $scope.user_Id = $routeParams.id;
            $window.localStorage.setItem("ShowuserId", $scope.user_Id);

            //var a = $window.localStorage.setItem("ShowuserName", data.UserName);
            var a = $window.localStorage.setItem("ShowuserName", 'you');
            $window.localStorage.setItem("session_internalResourceUpdatedId", data.UserId);
        }).error(errorCallback);
    }

    setInterval(function () {
        if ($scope.user_name == null) {
            $scope.user_name = $window.localStorage.getItem("ShowuserName");
        }
    }, 100);

    $scope.uType = $window.localStorage.userType;
    $scope.resourceType = $window.localStorage.resourceType;

    if ($scope.resourceType == '1') {
        $scope.externalResource = true;
        $scope.iresource = false;
    } else {
        $scope.iresource = true;
    }
    
    $scope.checkusername = function () {
        if(!$routeParams.id){
            rest.path = 'checkusername';
            rest.post($scope.userprofiledata.vUserName).success(function (data) { console.LOG }).error(errorCallback);
        }    
    };
    $scope.checkusernameExist = function () {
        let objUsernm = { 
            'username':$scope.userprofiledata.vUserName ? $scope.userprofiledata.vUserName : '',
                'id': $routeParams.id ? $routeParams.id : 0  
        }
        rest.path = 'checkusernameExist';
        rest.post(objUsernm).success(function (data) { 
            if(data && data.userExist ==1)
                $scope.userprofiledata.vUserName =  $scope.userprofiledata.vUserName +' '+ $scope.userprofiledata.iResourceNumber 
        }).error(errorCallback);
        
    };

    $scope.checkemailaddress = function () {
        if(!$routeParams.id){
            rest.path = 'checkemailaddress';
            rest.post($scope.userprofiledata.vEmailAddress).success(function (data) { }).error(errorCallback);
        }
    };

    $scope.userTypes = true;
    $scope.sourceType = function (type, element) {
        rest.path = 'typebyresource/' + type;
        rest.get().success(function (data) {
            $scope.userTypes = false;
            var userType = [];
            angular.forEach(data, function (val, i) {
                userType.push({
                    id: val.iTypeId,
                    text: val.vType
                });
            });
            angular.element('#' + element).select2({
                allowClear: true,
                data: userType
            });
        }).error(errorCallback);
    };

    $scope.setUsername = function (value) {
        if ($scope.userprofiledata.vLastName) {
            if (value != undefined) {
                $scope.userprofiledata.vUserName = value + ' ' + $scope.userprofiledata.vLastName;
            } else {
                $scope.userprofiledata.vUserName = $scope.userprofiledata.vLastName;
            }
        } else {
            $scope.userprofiledata.vUserName = value;
        }
    };

    $scope.setUsername2 = function (value) {
        if ($scope.userprofiledata.vFirstName) {
            if (value != undefined) {
                $scope.userprofiledata.vUserName = $scope.userprofiledata.vFirstName + ' ' + value;
            } else {
                $scope.userprofiledata.vUserName = $scope.userprofiledata.vFirstName;
            }
        } else {
            $scope.userprofiledata.vUserName = value;
        }
    };
    $scope.ConfirmPass = function (pwd1, pwd2) {
        if (!pwd1) {
            angular.element('#vPass').focus();
            angular.element('#cPass').val('');
        }
        if (pwd1 != undefined && pwd2 != undefined) {
            if (pwd2 != pwd1) {
                angular.element('#passNotMatch').show();
                angular.element('#passMatch').hide();
            } else {
                angular.element('#passMatch').show();
                angular.element('#passNotMatch').hide();
                $timeout(function () {
                    angular.element('#passMatch').fadeOut(3000);
                }, 500);
            }
        }
    }

    $scope.abDateToflg = true; 
    $scope.checkFromDate = function(fromdate){
       let frmDate = moment(fromdate,$scope.dateFormatGlobal).format('YYYY-MM-DD');
       //$scope.abDateToflg = ! isNaN(Date.parse(fromdate)) ? false : true;
       $scope.abDateToflg = ! isNaN(Date.parse(frmDate)) ? false : true;
       
    }
    // Add abscent Dates
    //$scope.abscentDateArr = [];
    $scope.abDate = '';
    $scope.addAbsDate = function(abDate, abDateTo){
        if(abDate){
            var abDateTo =  abDateTo ? abDateTo : abDate;
            //let date1 = moment(abDate).format('YYYY-MM-DD')
            let date1 = moment(abDate,$scope.dateFormatGlobal).format('YYYY-MM-DD');
            //let date2 = moment(abDateTo).format('YYYY-MM-DD')
            let date2 = moment(abDateTo,$scope.dateFormatGlobal).format('YYYY-MM-DD');
            
            let multiDay = (Date.parse(date1) < Date.parse(date2)) ? 1 : 0;
                abDateTo = (Date.parse(date1) > Date.parse(date2)) ? abDate :  abDateTo;
            
            var obj = {
                dateFrom : abDate,
                dateTo : abDateTo,
                multiDay : multiDay,
            }
            $scope.abscentDateArr.push(obj);
        }
        $scope.abDate = '';
        $scope.abDateTo = '';
        $scope.checkFromDate();
    }
    $scope.removeAbscentDateArr = function (id,dtItem) {
        const index = $scope.abscentDateArr.indexOf(dtItem);
        if (index > -1) { // only splice array when item is found
            $scope.abscentDateArr.splice(index, 1); // 2nd parameter means remove one item only
        }    
    } 

    rest.path = 'usertype';
    rest.get().success(function (data) {
        $scope.userTypes = data;
    }).error(errorCallback);

    if ($window.localStorage.iUserId != '' && $window.localStorage.iUserId != undefined) {
        $routeParams.id = $window.localStorage.iUserId;
    }

    // ----------------save image section ------------------//
    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                if (file.type == 'image/jpeg' || file.type == 'image/jpg' || file.type == 'image/png' || file.type == 'image/gif') {
                    $scope.imgshow = false;
                    $scope.imageSrc = result;
                } else {
                    notification("Please select image", "error");
                }
            });
    };

    $scope.saveUserProfileExternal = function (formId, ContactPersonId, noNext) {
        //$scope.isDobValid = dobIsValid($.trim(dtDobInput.val()))
        if (ContactPersonId == 'translation') {
            $window.localStorage.setItem("contactPersonId", 'translation');
        } else {
            $window.localStorage.setItem("contactPersonId", 'freelancer');
        }
        
        if (angular.element("#" + formId).valid()) {
            var $oldUser_id = $window.localStorage.getItem("session_internalResourceUpdatedId");
            var $recentUser_id = $window.localStorage.getItem("session_iUserId");

            if ($recentUser_id != $oldUser_id) {
                $scope.userprofiledata.iEditedBy = $window.localStorage.getItem("session_internalResourceUpdatedId");
            } else {
                $scope.userprofiledata.iEditedBy = 0;
            }
            var abscentArr = '';
            if($scope.abscentDateArr.length > 0){
                var abscentDateArr = $scope.abscentDateArr;
                var abscentArr = abscentDateArr.map(function(item) {
                    item.dateFrom = moment(item.dateFrom, $scope.dateFormatGlobal).format('YYYY-MM-DD')
                    item.dateTo = moment(item.dateTo, $scope.dateFormatGlobal).format('YYYY-MM-DD')
                    
                    return item;
                });
            }    
            
            if ($scope.userprofiledata.iUserId) {
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];

                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                $scope.userprofiledata.address1Detail = JSON.stringify(address1);
                $scope.userprofiledata.address2Detail = JSON.stringify(address2);
                $scope.userprofiledata.vTimeZoneCity = angular.element('#address1_locality').val();

                // ---------address over -----------------//
                var countryCodeData = angular.element('#iMobile').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#iMobile').parent().find('.selected-flag').find('.iti-flag').attr('class');


                var mobile = angular.element('#iMobile').val();
                var phone = angular.element('#iphone').val();

                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }

                $scope.modified_by = $cookieStore.get('session_iUserId');
                $scope.userprofiledata.modified_by = $scope.modified_by;

                $scope.userprofiledata.dtBirthDate = $('#dtBirthDate').val();
                $scope.userprofiledata.dtBirthDate = originalDateFormatNew($scope.userprofiledata.dtBirthDate);
                $scope.userprofiledata.dtBirthDate = moment($scope.userprofiledata.dtBirthDate).format('YYYY-MM-DD');

                $scope.userprofiledata.is_available = abscentArr ? JSON.stringify(abscentArr) : '';
                
                $scope.userprofiledata.iMobile = JSON.stringify(countryObj);
                $scope.userprofiledata.vPhoneNumber = phone;
                $scope.userprofiledata.image = $scope.imageSrc;

                rest.path = 'saveuserprofileexternel';
                rest.put($scope.userprofiledata).success(function (data) {
                    $window.localStorage.currentUserName = data.userData.vFirstName + " " + data.userData.vLastName;

                    if ($window.localStorage.session_iUserId == data.userData.iUserId) {
                        $window.localStorage.session_vProfilePic = data.userData.vProfilePic;
                        var picUrlAfterUpdate = 'uploads/profilePic/' + data.userData.vProfilePic;
                        $('#profileImgLogin').attr('src', picUrlAfterUpdate);
                    }
                    //log file start
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = $routeParams.id;
                    $scope.logMaster.log_title = $scope.userprofiledata.vUserName;
                    $scope.logMaster.log_type = "update";
                    $scope.logMaster.log_status = "external_res";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end

                    var frell = data.userData.freelancer;
                    $window.localStorage.setItem("contactUserId", data.userData.iUserId);
                    if(!noNext){
                        if (frell == 'freelancer') {
                            //$location.path('/calender');
                            $location.path('/properties');
                        } else {
                            $location.path('/user-contact-person');
                        }
                    }else{
                        notification('Updated successfully...', 'success')
                        $route.reload();
                    }    
                }).error(function (data) {
                    var flagTitle = JSON.parse($scope.userprofiledata.iMobile).countryTitle;
                    var flagClass = JSON.parse($scope.userprofiledata.iMobile).countryFlagClass;
                    var Ccode = flagClass.split(' ')[1];
                    var CcodeNum = flagTitle.split(':')[1].trim();

                    var FinalMobileNum = CcodeNum + JSON.parse($scope.userprofiledata.iMobile).mobileNumber;

                    $timeout(function () {
                        $('#iMobile').intlTelInput("setNumber", FinalMobileNum);
                    }, 100);

                    let is_available =  $scope.userprofiledata.is_available ? JSON.parse($scope.userprofiledata.is_available) : [];
                    if(is_available.length){
                        
                        let abscentArr = is_available.filter(function(item) {
                            item.dateFrom = moment(item.dateFrom).format($scope.dateFormatGlobal);
                            item.dateTo = moment(item.dateTo).format($scope.dateFormatGlobal);
                            //$scope.abscentDateArr.push(item)
                            return item;
                        });
                        $scope.abscentDateArr = abscentArr;
                    }

                    notification(data['msg'], 'error');
                });
            } else {
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });
                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });
                $scope.userprofiledata.address1Detail = JSON.stringify(address1);
                $scope.userprofiledata.address2Detail = JSON.stringify(address2);

                $scope.userprofiledata.vTimeZoneCity = angular.element('#address1_locality').val();
                // ---------address over -----------------//
                $scope.userprofiledata.image = $scope.imageSrc;
                $scope.userprofiledata.created_by = $window.localStorage.session_iUserId;
                var countryCodeData = angular.element('#iMobile').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#iMobile').parent().find('.selected-flag').find('.iti-flag').attr('class');


                var mobile = angular.element('#iMobile').val();
                
                var phone = angular.element('#iphone').val();

                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }

                var mobile = angular.element('#iMobile').val();
                var phone = angular.element('#iphone').val();
                $scope.userprofiledata.iMobile = JSON.stringify(countryObj);
                $scope.userprofiledata.vPhoneNumber = phone;
                if(!$scope.userprofiledata.vPassword)
                    $scope.userprofiledata.vPassword = randomPassword(10);
                $scope.userprofiledata.org_pass = $scope.userprofiledata.vPassword;

                $scope.userprofiledata.dtBirthDate = $('#dtBirthDate').val();
                if($scope.userprofiledata.dtBirthDate){
                    $scope.userprofiledata.dtBirthDate = originalDateFormatNew($scope.userprofiledata.dtBirthDate);
                    $scope.userprofiledata.dtBirthDate = moment($scope.userprofiledata.dtBirthDate).format('YYYY-MM-DD');
                }    
                if(!$scope.userprofiledata.vUserName)
                    $scope.userprofiledata.vUserName = $scope.userprofiledata.iResourceNumber
                    if(!$scope.userprofiledata.freelancer)    
                    $scope.userprofiledata.freelancer = 'freelancer'
                    if(!$scope.userprofiledata.eUserStatus)    
                    $scope.userprofiledata.eUserStatus = 3
                if(!$scope.userprofiledata.eUserStatus)    
                    $scope.userprofiledata.eUserStatus = 3
                if(!$scope.userprofiledata.iGender)    
                    $scope.userprofiledata.iGender = 1
                
                $scope.userprofiledata.is_available = abscentArr ? JSON.stringify(abscentArr) : '';

                rest.path = 'saveuserprofileexternelS';
                rest.post($scope.userprofiledata).success(function (data) {
                    $window.localStorage.iUserId = data.iUserId;

                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = data.iUserId;
                    $scope.logMaster.log_title = $scope.userprofiledata.vUserName;
                    $scope.logMaster.log_type = "add";
                    $scope.logMaster.log_status = "external_res";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end

                    $window.localStorage.setItem("externalPricelistId", data.iUserId);
                    $window.localStorage.currentUserName = data.userData.vFirstName + " " + data.userData.vLastName;
                    $window.localStorage.setItem("contactUserId", data.userData.iUserId);
                    $scope.UserId = $window.localStorage.setItem("priceListClientId", data.iUserId);
                    var frell = data.userData.freelancer;
                    
                    if(!noNext){
                        if (frell == 'freelancer') {
                            //$location.path('/calender');
                            $location.path('/properties');
                        } else {
                            $location.path('/user-contact-person');
                        }
                    }else{
                        $location.path('/user-profile/'+$window.localStorage.iUserId);
                    }    
                        
                }).error(function (data) {
                    var flagTitle = JSON.parse($scope.userprofiledata.iMobile).countryTitle;
                    var flagClass = JSON.parse($scope.userprofiledata.iMobile).countryFlagClass;
                    var Ccode = flagClass.split(' ')[1];
                    var CcodeNum = flagTitle.split(':')[1].trim();
                    
                    var FinalMobileNum = CcodeNum + JSON.parse($scope.userprofiledata.iMobile).mobileNumber;

                    $timeout(function () {
                        $('#iMobile').intlTelInput("setNumber", FinalMobileNum);
                    }, 100);
                    
                    //let is_available =  JSON.parse($scope.userprofiledata.is_available);
                    let is_available =  $scope.userprofiledata.is_available ? JSON.parse($scope.userprofiledata.is_available) : [];
                    if(is_available.length){
                        let abscentArr = is_available.filter(function(item) {
                            item.dateFrom = moment(item.dateFrom).format($scope.dateFormatGlobal);
                            item.dateTo = moment(item.dateTo).format($scope.dateFormatGlobal);
                            //$scope.abscentDateArr.push(item)
                            return item;
                        });
                        $scope.abscentDateArr = abscentArr;
                    }

                    notification(data['msg'], 'error');
                });
            }
        }
    };
    $scope.selectedNodes = [];
    const nestedMenuFlat = (arr) => {
        const result = arr.map(row => {
            
            if(row){
                let obj = {
                    id : row.id,
                    parent_id : row.parent_id,
                    name : row.name,
                    checked : row.checked,
                }
                $scope.selectedNodes.push(obj)  
            }
            if (row.children && row.children.length) {
            const children = nestedMenuFlat(row.children);
            return row;
            } else {
            return row;
            }

        });
        return result;
    }
    $scope.saveUserProfileInternal = function (formId, redirectWithSave) {

        $scope.selectedNodes = [];
        if (angular.element("#" + formId).valid()) {
        //if (angular.element("#" + formId).valid() && $scope.isValidMobileNumber) {
                if ($scope.userprofiledata.iUserId) {
                
                //$scope.userprofiledata.menu_access = JSON.stringify($scope.selectedNodes);
                
                //$scope.selectedNodes = nestedMap($scope.nodes);
                // $scope.nodes.forEach(function(entry){ 
                //     $scope.selectedNodes.push(entry);
                //     entry.children.forEach(function(childrenEntry) { // was missing a )
                //       $scope.selectedNodes.push(childrenEntry);
                //     })
                // })
                
                // ---------------address only -----------------//
                $scope.userprofiledata.image = $scope.imageSrc;
                var $oldUser_id = $window.localStorage.getItem("session_internalResourceUpdatedId");
                var $recentUser_id = $window.localStorage.getItem("session_iUserId");

                if ($recentUser_id != $oldUser_id) {
                    $scope.userprofiledata.iEditedBy = $window.localStorage.getItem("session_internalResourceUpdatedId");
                } else {
                    $scope.userprofiledata.iEditedBy = 0;
                }
                var countryCodeData = angular.element('#iMobile').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#iMobile').parent().find('.selected-flag').find('.iti-flag').attr('class');


                var mobile = angular.element('#iMobile').val();
                
                var phone = angular.element('#iphone').val();
                
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "placeHolder": $('#iMobile').attr('placeholder'),
                    "mobileNumber": mobile
                }

                var mobileData = JSON.stringify(countryObj);
                
                $scope.userprofiledata.iMobile = mobileData;
                
                $scope.userprofiledata.vPhoneNumber = phone;

                if($scope.superAdmin){
                    var tabInput = angular.element('#tabPermission').select2('data');
                    let tabArr = {};
                    $.each(tabInput, function(key, value) {
                        tabArr[value.id] = true;
                    });
                    $scope.userprofiledata.tabPermission = JSON.stringify(tabArr);
                }    
                
                // Flat Array for sidebar Menu
                //nestedMenuFlat($scope.nodes);
                
                if($scope.superAdmin){
                    var menuInput = angular.element('#menu_access').select2('data');
                    let menuArr = {};
                    $.each(menuInput, function(key, value) {
                        menuArr[value.id] = true;
                    });
                    $scope.userprofiledata.menu_access = JSON.stringify(menuArr);
                }
                
                if($scope.userprofiledata.iUserId == $scope.userRight )
                    $window.localStorage.setItem("session_menuAccess", $scope.userprofiledata.menu_access);
                
                
                //user start recent activity store in cookieStore
                if ($cookieStore.get('editInternalUser') != undefined) {
                    var arr1 = $.map($scope.userprofiledata, function (el) {
                        return el;
                    });
                    var arr2 = $.map($cookieStore.get('editInternalUser'), function (el) {
                        return el;
                    });

                    if (array_diff(arr1, arr2) != "") {
                        var obj = [];
                        if ($cookieStore.get('internalUserEdit') != undefined) {
                            angular.forEach($cookieStore.get('internalUserEdit'), function (val, i) {
                                obj.push(val);
                            });
                        }
                        obj.push($scope.userprofiledata.iUserId);
                        $cookieStore.put('internalUserEdit', obj);
                        $cookieStore.remove('editInternalUser')
                    }
                }
                $scope.userprofiledata.dtBirthDate = angular.element('#dtBirthDate').val();
                if($scope.userprofiledata.dtBirthDate){
                    $scope.userprofiledata.dtBirthDate = originalDateFormatNew($scope.userprofiledata.dtBirthDate);
                    $scope.userprofiledata.dtBirthDate = moment($scope.userprofiledata.dtBirthDate).format('YYYY-MM-DD');
                }
                
                rest.path = 'saveuserprofileinternal';
                rest.put($scope.userprofiledata).success(function (data) {

                    $window.localStorage.currentUserName = data.userData.vFirstName + " " + data.userData.vLastName;
                    if ($window.localStorage.session_iUserId == data.userData.iUserId) {
                        $window.localStorage.session_vProfilePic = data.userData.vProfilePic;
                        var picUrlAfterUpdate = 'uploads/profilePic/' + data.userData.vProfilePic;
                        $('#profileImgLogin').attr('src', picUrlAfterUpdate);
                    }

                    //
                    $scope.userprofiledata.dtBirthDate = $scope.userprofiledata.dtBirthDate ? moment($scope.userprofiledata.dtBirthDate).format($window.localStorage.getItem('global_dateFormat')) : '';
                    
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = $routeParams.id;
                    $scope.logMaster.log_title = $scope.userprofiledata.vUserName;
                    $scope.logMaster.log_type = "update";
                    $scope.logMaster.log_status = "internal_res";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });

                    //Setting Mobile field after saved.
                    var flagTitle = JSON.parse($scope.userprofiledata.iMobile).countryTitle;
                    var flagClass = JSON.parse($scope.userprofiledata.iMobile).countryFlagClass;
                    
                    $('#iMobile').val(JSON.parse($scope.userprofiledata.iMobile).mobileNumber)

                    var countryCodeData = angular.element('#iMobile').parent().find('.selected-flag').prop('title', flagTitle);
                    var countryClass = angular.element('#iMobile').parent().find('.selected-flag').find('.iti-flag').prop('class', flagClass);

                    if (redirectWithSave != undefined && redirectWithSave == 1) {
                        setTimeout(function () {
                            notification('Information updated successfully...', 'success')
                            $location.path('/user/1');
                        }, 500);
                    } else {
                        setTimeout(function () {
                            notification('Information updated successfully...', 'success');
                        }, 500);
                    }
                }).error(function (data, error, status) { 
                    angular.element('#iMobile').val(mobile)
                    $scope.userprofiledata.dtBirthDate = $scope.userprofiledata.dtBirthDate ? moment($scope.userprofiledata.dtBirthDate).format($window.localStorage.getItem('global_dateFormat')) : '';
                });
            } else {
                /*delete $scope.userprofiledata["cPassword"];*/
                // --------address only -----------------//
                $scope.userprofiledata.image = $scope.imageSrc;
                $scope.userprofiledata.created_by = $window.localStorage.session_iUserId;
                
                var countryCodeData = angular.element('#iMobile').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#iMobile').parent().find('.selected-flag').find('.iti-flag').attr('class');
                var mobile = angular.element('#iMobile').val();
                var phone = angular.element('#iphone').val();

                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }

                $scope.userprofiledata.iMobile = JSON.stringify(countryObj);
                $scope.userprofiledata.vPhoneNumber = phone;

                // dashboard tabs pemission object
                var tabInput = angular.element('#tabPermission').select2('data');
                let tabArr = {};
                $.each(tabInput, function(key, value) {
                    tabArr[value.id] = true;
                });
                $scope.userprofiledata.tabPermission = JSON.stringify(tabArr);

                var menuInput = angular.element('#menu_access').select2('data');
                let menuArr = {};
                $.each(menuInput, function(key, value) {
                    menuArr[value.id] = true;
                });
                $scope.userprofiledata.menu_access = JSON.stringify(menuArr);
                if($scope.userprofiledata.iUserId == $scope.userRight )
                    $window.localStorage.setItem("session_menuAccess", $scope.userprofiledata.menu_access);
                
                $scope.userprofiledata.dtBirthDate = angular.element('#dtBirthDate').val();
                if($scope.userprofiledata.dtBirthDate){
                    $scope.userprofiledata.dtBirthDate = originalDateFormatNew($scope.userprofiledata.dtBirthDate);
                    $scope.userprofiledata.dtBirthDate = moment($scope.userprofiledata.dtBirthDate).format('YYYY-MM-DD');
                }    
                rest.path = 'saveuserprofileinternal';
                rest.post($scope.userprofiledata).success(function (data) {
                    $window.localStorage.iUserId = data.iUserId;
                    $window.localStorage.setItem("internalUserFileMangerId", data.iUserId)
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = data.iUserId;
                    $scope.logMaster.log_title = $scope.userprofiledata.vUserName;
                    $scope.logMaster.log_type = "add";
                    $scope.logMaster.log_status = "internal_res";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    //$scope.userprofiledata.dtBirthDate = moment($scope.userprofiledata.dtBirthDate).format($window.localStorage.getItem('global_dateFormat'));
                    $scope.userprofiledata.dtBirthDate = $scope.userprofiledata.dtBirthDate ? moment($scope.userprofiledata.dtBirthDate).format($window.localStorage.getItem('global_dateFormat')) : '';
                    
                    var obj = [];
                    if ($cookieStore.get('internalUserEdit') != undefined) {
                        angular.forEach($cookieStore.get('internalUserEdit'), function (val, i) {
                            obj.push(val);
                        });
                    }
                    obj.push(data.iUserId);
                    $cookieStore.put('internalUserAdd', obj);
                    $window.localStorage.currentUserName = data.userData.vFirstName + " " + data.userData.vLastName;

                    //Setting Mobile field after saved.
                    var flagTitle = JSON.parse($scope.userprofiledata.iMobile).countryTitle;
                    var flagClass = JSON.parse($scope.userprofiledata.iMobile).countryFlagClass;

                    $('#iMobile').val(JSON.parse($scope.userprofiledata.iMobile).mobileNumber)

                    var countryCodeData = angular.element('#iMobile').parent().find('.selected-flag').prop('title', flagTitle);
                    var countryClass = angular.element('#iMobile').parent().find('.selected-flag').find('.iti-flag').prop('class', flagClass);

                    if (redirectWithSave != undefined && redirectWithSave == 1) {
                        setTimeout(function () {
                            notification('Information added successfully and registration email send to email.', 'success')
                            $location.path('/user/1');
                        }, 500);
                    } else {
                        setTimeout(function () {
                            notification('Information added successfully and registration email send to email.', 'success');
                            //$route.reload();
                        }, 500);
                    }
                    $location.path('/internal/' + data.iUserId);
                }).error(function (data, error, status) { 
                    angular.element('#iMobile').val(mobile)
                    $scope.userprofiledata.dtBirthDate = $scope.userprofiledata.dtBirthDate ? moment($scope.userprofiledata.dtBirthDate).format($window.localStorage.getItem('global_dateFormat')) : '';
                });
            }
        }
    };
    $scope.userInternalFileManager = function (id, formId) {
        var fmanagerInternal = $window.localStorage.getItem("internalUserFileMangerId");

        if ($routeParams.id == undefined && !fmanagerInternal) {
            notification('Please create resource.', 'warning');
        } else {
            if (fmanagerInternal != null && fmanagerInternal.trim().length != 0) {
                id = fmanagerInternal;
            } else {
                id = $routeParams.id;
            }
            rest.path = 'getUserUsingId/' + id;
            rest.get().success(function (data) {
                if (!data) {
                    notification('Please create resource.', 'warning');
                } else {
                    if (id == data.iUserId) {
                        closeWindows();
                        $window.localStorage.setItem("internal", data.iUserId);
                        var userPopupInternal = $window.open('#/filemanage/internal', "popup", "width=2000,height=750");
                        userPopupInternal.addEventListener("beforeunload", function () {
                            localStorage['parentId'] = ' ';
                            localStorage.removeItem('internalUserFileMangerId');
                            return false;
                        }, false);
                        openWindows.push(userPopupInternal);
                    } else {
                        notification('File Manager not available for this resource.', 'warning');
                    }
                }
                
            }).error(errorCallback);
        }
    };

    $scope.userExternalFilemanagter = function (id, formId) {
        if ($routeParams.id == undefined) {
            notification('Please create resource.', 'warning');
        } else {
            rest.path = 'getUserUsingId/' + id;
            rest.get().success(function (data) {
                if (id == data.iUserId) {
                    $window.localStorage.setItem("contactUserId", id);
                    closeWindows();
                    var userPopup = $window.open('#/filemanage/user', "popup", "width=2000,height=750");
                    userPopup.addEventListener("beforeunload", function () {
                        localStorage['parentId'] = ' ';
                        return false;
                    }, false);
                    openWindows.push(userPopup);
                } else {
                    notification('File Manager not available for this resource.', 'warning');
                }
            }).error(errorCallback);
        }
    }

    $scope.workingHour = function (id, table, type) {
        $routeParams.messageId = id;
        $window.localStorage.setItem("messageId", id);
        $routeParams.messageTable = table;
        $routeParams.messageType = type;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/message.html',
            controller: 'messageController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            // debugger;
            $scope.selected = selectedItem;
            $route.reload();
        });
    };

    $scope.countryChange = function (country) {
        
        let countryName =  angular.element("#address1_country").val()
        let euCountry = $scope.europeCountry.filter(e => e.name.toLowerCase() === countryName.toLowerCase()).length > 0 ? true :false;
        if(euCountry){
            $scope.stateOptional = '(Optional)';
            $('#address1_administrative_area_level_1').removeAttr('required');
        }else{
            $scope.stateOptional = '';
            //$('#address1_administrative_area_level_1').attr("required","required");
        }        
    }

    $scope.selectedNodes = [];
    const nestedMap = (arr) => {
        const result = arr.map(row => {
          var flagTrue = false;
          // check if row.children exists AND if its length exists / is greater than 0
          if (row.children && row.children.length) {
            if(row.checked == 1)
                flagTrue = true;
            const children = nestedMap(row.children);
            return { ...row, checked: flagTrue, children };
          } else {
            if(row.checked == 1)
                flagTrue = true;
            return { ...row, checked: flagTrue };
          }
        });
        // Note: You should probably return the entire result here, not result[0].children[0]
        return result;
      }

    $scope.nodes = [];
    rest.path = 'getTreeMenu';
    rest.get().success(function (data) {
        
        $scope.nodes = Object.values(data).filter( function(el) {
            return el;    
        });
        
        $scope.nodes = nestedMap($scope.nodes)

    });     
    
    
}).controller('contactController', function ($scope, $log, $location, $route, rest, $window, $routeParams, $uibModal, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    $scope.user_Id = $window.localStorage.getItem("contactUserId");
    angular.element('.help-block').css('display', 'none');
    $scope.isValidMobileNumber = false;
    $timeout(function () {
        $scope.redirectToClientViewId = $window.localStorage.iUserId;
    }, 100);

    /* Mobile Validation START */
    $timeout(function () {
        var telInput = $("#iphone"),
            errorMsg = $("#error-msg"),
            validMsg = $("#valid-msg");
        var reset = function () {
            telInput.removeClass("error");
            errorMsg.addClass("hide");
            validMsg.addClass("hide");
        };

        telInput.blur(function () {
            reset();
            $timeout(function () {
                if ($.trim(telInput.val())) {
                    if (telInput.intlTelInput("isValidNumber")) {
                        
                        $scope.isValidMobileNumber = true;
                        validMsg.removeClass("hide");
                        $('#error-msg').addClass('hide');
                    } else {
                        
                        //$scope.isValidMobileNumber = false;
                        $scope.isValidMobileNumber = true;
                        $('#error-msg').removeClass('hide');
                    }
                }
            }, 200);
        });

        telInput.on("keyup change", reset);
    }, 200);
    /* Mobile Validation END */

    $scope.saveExContact = function (formId, contact) {
        if (contact) {
            var countryCodeData = angular.element('#iphone').parent().find('.selected-flag').attr('title');
            var countryClass = angular.element('#iphone').parent().find('.selected-flag').find('.iti-flag').attr('class');
            var mobile = angular.element('#iphone').val();
            var countryObj = {
                "countryTitle": countryCodeData,
                "countryFlagClass": countryClass,
                "mobileNumber": mobile
            }

            $scope.contact.vPhone = JSON.stringify(countryObj);
            if (angular.element("#" + formId).valid() && $scope.isValidMobileNumber) {
                if ($scope.contact.iContactId) {
                    rest.path = 'contactExternalUpdate/' + $scope.contact.iContactId;
                    rest.post($scope.contact).success(function (data) {
                        $location.path('/properties');
                    }).error(errorCallback);
                } else {
                    rest.path = 'contactExternalsave/' + $window.localStorage.getItem("contactUserId");
                    rest.post(contact).success(function (data) {
                        $location.path('/properties');
                    }).error(errorCallback);
                }
            } else {
                notification('Please fill valid information', 'warning');
            }
        } else {
            //$location.path('/calender');
            $location.path('/properties');
        }
    }
    $scope.generalEmail = function (id) {
        if (id != undefined && id != " " && id != null) {
            $window.localStorage.generalMsg = id;
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/generalmsg.html',
                controller: 'generalmsgController',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.data;
                    }
                }
            });
        } else {
            notification('Please Add Email', 'warning');
        }
    }
    $scope.saveExternalContact = function (formId, contact) {

        if (angular.element("#" + formId).valid() && $scope.isValidMobileNumber) {
            var countryCodeData = angular.element('#iphone').parent().find('.selected-flag').attr('title');
            var countryClass = angular.element('#iphone').parent().find('.selected-flag').find('.iti-flag').attr('class');
            var mobile = angular.element('#iphone').val();
            var countryObj = {
                "countryTitle": countryCodeData,
                "countryFlagClass": countryClass,
                "mobileNumber": mobile
            }

            $scope.contact.vPhone = JSON.stringify(countryObj);

            if ($scope.contact.iContactId) {
                rest.path = 'contactExternalUpdate/' + $scope.contact.iContactId;
                rest.post($scope.contact).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'contactExternalsave/' + $window.localStorage.getItem("contactUserId");
                rest.post(contact).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }
        /*else{
                        notification('Please fill valid information', 'warning');
                }*/


    }

    $scope.editUserContact = function (id) {
        rest.path = 'contactExternalEdit/' + id;
        rest.get().success(function (data) {
            $scope.contact = data;

            var flagTitle = JSON.parse(data.vPhone).countryTitle;
            var flagClass = JSON.parse(data.vPhone).countryFlagClass;
            var Ccode = flagClass.split(' ')[1];
            var CcodeNum = flagTitle.split(':')[1].trim();
            var FinalMobileNum = CcodeNum + JSON.parse(data.vPhone).mobileNumber;

            $timeout(function () {
                $('#iphone').intlTelInput("setNumber", FinalMobileNum);
                $scope.isValidMobileNumber = true;
            }, 100);
            scrollToId('contact-form');
        }).error(errorCallback);
    }
    if ($window.localStorage.getItem("contactUserId")) {
        if ($window.localStorage.getItem("contactUserId").trim().length > 0) {
            rest.path = 'contactExternalget/' + $window.localStorage.getItem("contactUserId");
            rest.get().success(function (data) {
                $scope.contactList1 = data;
                $scope.contactExternalEmpty = jQuery.isEmptyObject(data);
            }).error(errorCallback);
        }
    }

    $scope.uType = $window.localStorage.userType;
    $scope.currentUserName = $window.localStorage.currentUserName;
    if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
        $routeParams.id = $window.localStorage.iUserId;
    }

    if ($routeParams.id) {
        rest.path = 'contact';
        rest.model().success(function (data) {
            $scope.contactlist = data.data;
            $scope.contactDirectEmpty = jQuery.isEmptyObject(data.data);
        }).error(errorCallback);
    }

    $scope.editContact = function (id) {
        rest.path = 'editcontact/' + id;
        rest.get().success(function (data) {
            $scope.contact = data;
            
            var flagTitle = JSON.parse(data.vPhone).countryTitle;
            var flagClass = JSON.parse(data.vPhone).countryFlagClass;
            var Ccode = flagClass.split(' ')[1];
            var CcodeNum = flagTitle.split(':')[1].trim();
            var FinalMobileNum = CcodeNum + JSON.parse(data.vPhone).mobileNumber;

            $timeout(function () {
                $('#iphone').intlTelInput("setNumber", FinalMobileNum);
                $scope.contact.vPhone = JSON.parse(data.vPhone).mobileNumber;
                $scope.isValidMobileNumber = true;
            }, 300);
            scrollToId('contact-form');
        }).error(errorCallback);
    };

    $scope.saveContact = function (formId, id) {
        
        if (angular.element("#" + formId).valid()) {
            //if (angular.element("#" + formId).valid() && $scope.isValidMobileNumber) {
            var countryCodeData = angular.element('#iphone').parent().find('.selected-flag').attr('title');
            var countryClass = angular.element('#iphone').parent().find('.selected-flag').find('.iti-flag').attr('class');
            var mobile = angular.element('#iphone').val();
            var countryObj = {
                "countryTitle": countryCodeData,
                "countryFlagClass": countryClass,
                "mobileNumber": mobile
            }
            // [_site_admin_email]
            $scope.contact.vPhone = JSON.stringify(countryObj);
            if ($scope.contact.iContactId) {
                rest.path = 'contactsave/' + $scope.contact.iContactId;
                rest.post($scope.contact).success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_title = $scope.currentUserName;
                    $scope.logMaster.log_type_id = $scope.contact.iClientId;
                    $scope.logMaster.log_type = "update";
                    $scope.logMaster.log_status = "direct_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    if (id == 2) {
                        $location.path('/price-list');
                    }
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($routeParams.id) {
                    $scope.contact.iClientId = $routeParams.id;
                    
                    rest.path = 'contactsave';
                    rest.post($scope.contact).success(function (data) {
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_title = $scope.currentUserName;
                        $scope.logMaster.log_type_id = $scope.contact.iClientId;
                        $scope.logMaster.log_type = "update";
                        $scope.logMaster.log_status = "direct_cli";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                        if (id == 2) {
                            $location.path('/price-list');
                        }
                        $route.reload();
                    }).error(errorCallback);
                } else {
                    notification('Please create User', 'warning');
                    $route.reload();
                }
            }
        } 
        // else if (id == 2) {

        //     $location.path('/price-list');
        // }
    };

    $scope.deleteContact = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'contactdelete/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    $scope.deleteExternalContact = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteExternalContact/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('propController', function ($timeout, $scope, $log, $location, $route, fileReader, rest, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.ContactPersonName = $window.localStorage.getItem("contactPersonId");
    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    $scope.uType = $window.localStorage.userType;
    $scope.currentUserName = $window.localStorage.currentUserName;

    $timeout(function () {
        $scope.redirectToCViewId = $window.localStorage.iUserId;
    }, 100);
    if ($scope.userRight == 2) {
        $window.localStorage.userType = 1;
        $scope.uType = 1;
    }
    if ($scope.currentUserName == 'undefined undefined') {
        $scope.currentUserName = 'undefined';
    }
    $scope.user_Id = $window.localStorage.getItem("contactUserId");
    if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
        $routeParams.id = $window.localStorage.iUserId;
    }

    $scope.loadValue = function (id, element) {
        $scope.propertyData.value_id = '';
        $scope.show_value = true;
        rest.path = 'searchByCreteria/' + id + '/' + $routeParams.id + '/' + $window.localStorage.userType;
        rest.get().success(function (data) {
            var valueData = [];
            angular.forEach(data, function (value, key) {
                var obj = {
                    'id': value.value_id,
                    'text': value.value_name.toString()
                };
                valueData.push(obj);
            });
            angular.element('#' + element).select2({
                allowClear: true,
                data: valueData,
                multiple: true
            });
        }).error(function (data, error, status) { });
    };

    if ($routeParams.id != '' && $routeParams.id != undefined && $window.localStorage.userType) {
        rest.path = 'getUserProperty/' + $routeParams.id + '/' + $window.localStorage.userType;
        rest.get().success(function (data) {
            $scope.propList = data;
            $scope.propLisEmpty = jQuery.isEmptyObject(data);
        }).error(errorCallback);

        rest.path = 'getAddinfo/' + $routeParams.id + '/' + $window.localStorage.userType;
        rest.get().success(function (data) {
            $scope.addtional = data;
        }).error(errorCallback);
    }

    $scope.getProperty = function (id, element) {
        $scope.show_value = true;
        rest.path = 'getUserProperty/' + id;
        rest.get().success(function (data) {
            var data2 = $.extend({}, data);
            $scope.propId = data2[0].id;
            $('#property-index').select2('val', data2[0].property_id);
            $scope.propertyData = data2[0];
            rest.path = 'propertyvalues/' + data2[0].property_id;
            rest.get().success(function (data) {
                var valueData = [];
                var arrId = [];
                angular.forEach(data, function (value, key) {
                    var obj = {
                        'id': value.value_id,
                        'text': value.value_name
                    };
                    arrId.push(value.value_id);
                    valueData.push(obj);
                });
                angular.element('#' + element).select2({
                    allowClear: true,
                    data: valueData,
                    multiple: true,
                });
            }).error(errorCallback);
        }).error(errorCallback);
    };

    $scope.deleteProperty = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteUserProperty/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    $scope.saveProperty = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.propertyData.id) {
                $routeParams.id = $scope.propertyData.id;

                rest.path = 'userProperty';
                rest.put($scope.propertyData).success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = $scope.propertyData.user_id;
                    $scope.logMaster.log_title = $window.localStorage.currentUserName;
                    $scope.logMaster.log_type = "update";
                    $scope.logMaster.log_status = "external_res";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($routeParams.id) {
                    $scope.propertyData.user_id = $routeParams.id;
                    $scope.propertyData.type = $window.localStorage.userType;
                    rest.path = 'userProperty';
                    rest.post($scope.propertyData).success(function (data) {
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = $scope.propertyData.user_id;
                        $scope.logMaster.log_title = $window.localStorage.currentUserName;
                        $scope.logMaster.log_type = "update";
                        $scope.logMaster.log_status = "external_res";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                        $route.reload();
                    }).error(errorCallback);
                } else {
                    notification('Please create User', 'warning')
                    $route.reload();
                }
            }
        }
    };

    $scope.saveAddinfo = function (formId) {

        if (angular.element("#" + formId).valid()) {
            if ($scope.addtional.add_id) {
                $routeParams.id = $scope.addtional.add_id;
                rest.path = 'additionalinfo';
                rest.put($scope.addtional).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($routeParams.id) {
                    $scope.addtional.user_id = $routeParams.id;
                    $scope.addtional.user_type = $window.localStorage.userType;
                    rest.path = 'additionalinfo';
                    rest.post($scope.addtional).success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                } else {
                    notification('Please create User', 'warning');
                    $route.reload();
                }
            }
        }
    };

    $scope.savePropretyExternal = function (id) {
        $location.path('/price-list1');
    }

}).controller('pricelistController', function ($scope,$rootScope, $log, $location, $route, rest, $routeParams, $window, $timeout, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.clientPriceId = $window.localStorage.getItem("clientpricelistdataId");
    $scope.inputCounter = 1;
    $scope.traninputCounter = 1;
    $scope.proofinputCounter = 1;
    $scope.tpinputCounter = 1;
    $scope.ExternalPricelistId = $window.localStorage.getItem("externalPricelistId");
    $scope.ContactPersonName = $window.localStorage.getItem("contactPersonId");
    $scope.UserId = $window.localStorage.getItem("priceListClientId");
    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    $scope.uType = $window.localStorage.userType;
    $scope.currentUserName = $window.localStorage.currentUserName;
    $scope.user_Id = $window.localStorage.getItem("contactUserId");
    $scope.priceBasiList = [];
    $scope.baseQuentity = [];
    $scope.basePrice = [];
    $scope.baseTotal = [];
    $timeout(function () {
        $scope.redirectToClientViewId = $window.localStorage.iUserId;
    }, 100);
    angular.element('.panel-heading').css('background-color', 'white');
    if ($scope.uType == 2) {
        $scope.pricePageId = 1;
    } else {
        $scope.pricePageId = 2;
    }

    rest.path = 'getAllSpecialization';
    rest.get().success(function(data) {
        $scope.specializationArr = data;
    });
    $("#chkAll").click(function () {
        if ($("#chkAll").is(':checked')) {
            var data = ['Finance', 'General', 'General-Agricalture', 'General Art and Culture', 'General-Beauty-Fashion-Make-up',
                'General Bussiness', 'General Casino & Poker', 'General Entertainment', 'IT-Search Engine Optimization (SEO)', 'IT-Software', 'IT-Software (UI)', 'Legal', 'Legal Patents', 'Medical', 'Medical CLinical Trials', 'Medical Dentisty', 'Medical Health Care',
                'Technical', 'Technical Automotive', 'Technical Chemistry', 'Technical Electronics', 'Technical Engineering'
            ];
            // New All specialization data from API
            var dataArray = [];
            //$.each(data, function (i, e) { dataArray.push({ "id": i, "text": e }); });
            $.each($scope.specializationArr, function(key, value) {
                let obj = {
                    'id': value.id,
                    'text': value.name
                };
                dataArray.push(obj);
            });
            $("#specialization").select2("data", dataArray, true);

        } else {
            $("#specialization").select2('val', '');
        }
    });

    $scope.saveandNext = function () {
        if ($scope.uType != 2) {

            $location.path('/payment');
        } else {

            $location.path('/payment_client');
        }
    }

    $scope.newCustomer = function () {
        $('#price-List-form')[0].reset();
        $scope.customerPriceList = true;
        $scope.customerPrice = {};
        $scope.customerPrice.price_name = $scope.currentUserName + ' | '; //TRA|PRF-
        $scope.priceBasiList = {};
        $scope.priceLanguageList = {};
        angular.element('#customerPriceId').select2('val', '');
        angular.element('#price_currency').select2('val', '');
        angular.element('#calculation_basis').select2('val', '');
        angular.element('#rounding_proc').select2('val', '');
        angular.element('#specialization').select2('val', '');
        $scope.customerPriceId = false;
        $scope.planedQuaTotal = "";
        $scope.planedHourTotal = "";
        $scope.baseQuentity = [];
        $scope.basePrice = [];
        $timeout(function () {
            angular.element('#minimumCharge').val('');
        }, 100);
    }

    angular.element('.customerPriceTable th:eq(2)').css('border-left', 'solid 1');

    angular.element('.priceTable th').mouseover(function () {
        $(this).css('cursor', 'pointer');
    });

    rest.path = 'masterPriceitemgetFromPriceList';
    rest.get().success(function (data) {
        $scope.masterPrice = data;
    }).error(errorCallback);

    rest.path = 'childPriceitemget';
    rest.get().success(function (data) {
        $scope.childPrice = data;
    }).error(errorCallback);

    $scope.itemLanguage = function (item) {
        var a = item.source_lang.split(',');
        angular.forEach(a, function (val, i) { });
    }

    angular.element('body').on('click', '.priceLPrice', function () {
        angular.element('.priceLPrice').removeClass('rowactivate');
        angular.element(this).addClass('rowactivate');
    });

    $scope.removePriceLanguage = function (id) {
        if($scope.priceLanguageList.length)
            $scope.priceLanguageList.splice(id, 1);
        
        // if (angular.element('[id^=priceLanguageID]').length - 1 == id) {
        //     angular.element('#priceLanguageID' + id).remove();
        // } else {
        //     notification('Delete from last record', 'warning');
        // }
    }

    $scope.sendPriceLanguage = function (id) {
        var specialization = angular.element('#specialization').select2('data');
        if (!specialization) {
            notification('Please select specialization.', 'warning');
            return;
        }
        var language = angular.element('#priceLanguageID' + id).text();
        angular.element('body').find('.setPriceLanguage').text(language);
        var customerPriceName = angular.element('#customerPriceName').val();
        var chkNameAfterPipeSymbole = customerPriceName[customerPriceName.length - 2];
        if (chkNameAfterPipeSymbole == "|") {
            var fromLangugageChar = language.split('>')[0].trim().substr(0, 3).toUpperCase();
            var toLangugageChar = language.split('>')[1].trim().substr(0, 3).toUpperCase();
            var newLanguage = fromLangugageChar + '>' + toLangugageChar;
            let specializationTxt = specialization.length > 0 ? specialization[0].text : specialization.text
            if(!specializationTxt)
                specializationTxt = '';
            var txt1 = $scope.customerPrice.price_name.split(' | ');
            //$scope.customerPrice.price_name = $scope.customerPrice.price_name + newLanguage + ' | ' + specializationTxt;
            //$scope.customerPrice.price_name = txt1[0].trim() + ' | ' + newLanguage + ' | ' + specializationTxt;
            // no need specialization
            $scope.customerPrice.price_name = txt1[0].trim() + ' | ' + newLanguage ;
        
        } else {
            var customerPriceName = angular.element('#customerPriceName').val();
            var oldName = customerPriceName.split('|');
            var fromLangugageChar = language.split('>')[0].trim().substr(0, 3).toUpperCase();
            var toLangugageChar = language.split('>')[1].trim().substr(0, 3).toUpperCase();
            var newLanguage = fromLangugageChar + '>' + toLangugageChar;
            var specialization = angular.element('#specialization').select2('data');
            let specializationTxt = specialization.length > 0 ? specialization[0].text : specialization.text
            if(!specializationTxt)
                specializationTxt = '';
            //$scope.customerPrice.price_name = oldName[0].trim() + ' | ' + newLanguage + ' | ' + specializationTxt;
            //no need specialisation
            $scope.customerPrice.price_name = oldName[0].trim() + ' | ' + newLanguage;
        }
    }

    $scope.removeBasePrice = function (index) {
        $scope.priceBasiList
        $scope.priceBasiList.splice(index, 1);
        // Also remove from price and total sum price
        $scope.basePrice.splice(index, 1);
        $scope.baseTtl.splice(index, 1);
    }

    $scope.basePriceCheck = function (id) {
        var daynamicClass = angular.element('#basePriceCheck' + id).attr('class').split(' ')[1];
        var oldClass = 'fa-check';
        var newClass = 'fa-times';
        if (daynamicClass == newClass) {
            angular.element('#basePriceCheck' + id).addClass(oldClass);
            angular.element('#basePriceCheck' + id).removeClass(daynamicClass);
        } else if (daynamicClass == oldClass) {
            angular.element('#basePriceCheck' + id).removeClass(oldClass);
            angular.element('#basePriceCheck' + id).addClass(newClass);
        }
    }

    $scope.customerChange = function (id) {
        if(id){
            rest.path = 'customerpriceGetOne/' + id;
            rest.get().success(function (data) {
                $scope.customerPrice = data;
                angular.element('#price_currency').select2('val', data.price_currency);
                angular.element('#calculation_basis').select2('val', data.calculation_basis);
                angular.element('#rounding_proc').select2('val', data.rounding_proc);
                var check = false;
                var getComma = /,/;
                if (getComma.test(data.specialization) == true) {
                    check = true;
                } else {
                    check = false;
                }
                angular.element('#specialization').select2('val', check ? data.specialization.split(',') : data.specialization);
                $scope.priceBasiList = JSON.parse(data.price_basis);
                $scope.priceLanguageList = JSON.parse(data.price_language);
                $scope.baseQuentity = [];
                $scope.basePrice = [];
                $scope.baseTtl = [];
                var quantity = 0;
                var standard = 0;
                var childPriceId = 0;
                $scope.childPriceId = [];
                var masterPriceId = 0;
                $scope.masterPriceId = [];
                angular.forEach(JSON.parse(data.price_basis), function (val, i) {
                    $scope.baseQuentity[i] = val.baseQuentity;
                    $scope.basePrice[i] = val.basePrice;
                    if (val.baseQuentity) {
                        quantity += parseInt(val.baseQuentity);
                    }
                    if (val.standardTime) {
                        standard += parseInt(val.standardTime);
                    }
                    if (val.childPriceId) {
                        childPriceId = val.childPriceId;
                    }
                    $scope.childPriceId[i] = childPriceId;
                    if (val.masterPriceId) {
                        masterPriceId = val.masterPriceId;
                    }
                    $scope.masterPriceId[i] = masterPriceId;

                    $scope.baseTtl[i] = $scope.baseQuentity[i] * $scope.basePrice[i];
                    //$scope.basePrice[i] = $filter('customNumber')(val.basePrice);
                    //$scope.priceBasiList[i].basePrice = $filter('customNumber')(val.basePrice);
                    $scope.basePrice[i] = $filter('customNumber4Digit')(val.basePrice);
                    $scope.priceBasiList[i].basePrice = $filter('customNumber4Digit')(val.basePrice);
                    $scope.priceBasiList[i].baseTtl = $scope.baseTtl[i];

                });
                $scope.planedHourTotal = standard;
                $scope.planedQuaTotal = quantity;
            }).error(errorCallback);
            $scope.customerPriceList = true;
        }    
    }

    // External user detail page pricelist
    if($rootScope.parentPriceId && $rootScope.Oldtab == "/viewExternal/"+$rootScope.parentUserId){
        $scope.customerChange($rootScope.parentPriceId);
        $scope.customerPriceId = $rootScope.parentPriceId; 
        $window.localStorage.setItem("currentUserName", $rootScope.parentCurrentUserName);
        $scope.currentUserName = $rootScope.parentCurrentUserName;
        $scope.ExternalPricelistId = $rootScope.parentExternalUserId;
        $window.localStorage.setItem("externalPricelistId", $rootScope.externalPricelistId);
        $window.localStorage.setItem("contactUserId", $rootScope.parentUserId);
        $scope.user_Id = $rootScope.parentUserId;
        rest.path = 'customerpriceGetOne/' + $scope.customerPriceId;
        rest.get().success(function (data) {
            $scope.customerPrice = data;
            setTimeout(() => {
                angular.element("#customerPriceId").select2('data', { id: $rootScope.parentPriceId, text: data.price_name });
                angular.element('#price_currency').select2('val', data.price_currency);
                angular.element('#calculation_basis').select2('val', data.calculation_basis);
                angular.element('#rounding_proc').select2('val', data.rounding_proc);
            }, 200);
        })    
    }    

    $scope.removecustomerPriceId = function () {
        $scope.customerPrice = {};
        $scope.priceBasiList = {};
        $scope.priceLanguageList = {};
        angular.element('#customerPriceId').select2('val', '');
        if($rootScope.parentPriceId)
            $rootScope.parentPriceId = '';
        $route.reload();
    };

    $scope.save = function (frmId) {
        if (angular.element('#' + frmId).valid()) {
            var setPriceLanguage = angular.element('.setPriceLanguage').text();

            if (setPriceLanguage == 'Change prices') {
                if (angular.element('[id^=priceLanguageID]').length > 0) {
                    if ($scope.customerPrice.price_list_id && angular.element('#customerPriceName').length < 0) {
                        
                        $('#priceLanguageID0').css('border', '1px solid red');
                        $('#priceLanguageID0').addClass('face');

                        $timeout(function () {
                            $('#priceLanguageID0').removeClass('face');
                            $('#priceLanguageID0').css('border', '0px solid red');
                        }, 3000);

                        //notification('Please set language', 'warning');
                        //return false;
                    }
                } else {
                    $('.itemList').css('border', '1px solid red');
                    $('.itemList').addClass('face');

                    $timeout(function () {
                        $('.itemList').removeClass('face');
                        $('.itemList').css('border', '0px solid red');
                    }, 3000);

                    notification('Please select language combination.', 'warning');
                    return false;
                }

            }
            if ($scope.customerPrice.price_list_id) {
                if ($scope.currentUserName == undefined || !$scope.currentUserName) {
                    notification('Please create user', 'warning');
                    return false;
                }
                var langObj = [];
                for (var i = 0; i < angular.element('[id^=priceLanguageID]').length; i++) {
                    var languagePrice = angular.element('.priceLanguage' + i).text();
                    langObj.push({
                        'languagePrice': languagePrice
                    });
                }
                var basePriceObj = [];
                for (var i = 0; i < angular.element('[class^=basePriceMain]').length; i++) {
                        var baseQuentity = angular.element('#basepriceQuantity' + i).val().trim();

                    if (angular.element('#basePriceCheck' + i).attr('class').split(' ')[1] == 'fa-check') {
                        var basePricecheck = 1;
                    } else {
                        var basePricecheck = 0;
                    }

                    var basePriceUnit = angular.element('#basePriceUnit' + i).text().trim();
                    var childPriceId = angular.element('#childPriceId' + i).val().trim();
                    var masterPriceId = angular.element('#masterPriceId' + i).val().trim();
                    var basePrice = angular.element('#basePrice' + i).val().trim();
                    //basePrice = numberFormatCommaToPoint(basePrice);
                    //basePrice = CommaToPoint4Digit(basePrice);
                    basePrice = commaToPoint(basePrice);
                    var standardTime = angular.element('.standardTime' + i).text().trim();
                    basePriceObj.push({
                        'baseQuentity': baseQuentity,
                        'basePricecheck': basePricecheck,
                        'basePriceUnit': basePriceUnit,
                        'basePrice': basePrice,
                        'standardTime': standardTime,
                        'childPriceId': childPriceId,
                        'masterPriceId': masterPriceId
                    });
                }

                var price_id = $scope.pricePageId;
                var price_language = JSON.stringify(langObj);
                var price_basis = JSON.stringify(basePriceObj);
                $scope.price_language = price_language;
                $scope.price_basis = price_basis;
                $scope.price_id = price_id;
                $scope.customerPrice.price_language = $scope.price_language;
                $scope.customerPrice.price_basis = $scope.price_basis;
                $scope.customerPrice.price_id = $scope.price_id;
                $routeParams.id = $scope.customerPrice.price_list_id;
                // if($scope.pricePageId == 1){
                //     $scope.customerPrice.resource_id = $scope.UserId;
                // }else{
                //     $scope.customerPrice.resource_id = $scope.ExternalPricelistId;
                // }
                rest.path = "customerpriceUpdate";
                rest.put($scope.customerPrice).success(function (data) {
                    notification('Price list successfully updated', 'success');
                    $timeout(function () {
                        angular.element("#customerPriceId").select2('data', { id: data.LastIsertedData.price_list_id, text: data.LastIsertedData.price_name });
                    }, 200);
                    var obj = [];
                    rest.path = 'customerpriceAll/' + data.LastIsertedData.price_id;
                    rest.get().success(function (data) {
                        var newdata = data;
                        newdata = data.filter( function (data) {
                            //$scope.ExternalPricelistId
                            return data.resource_id == $scope.customerPrice.resource_id;  
                        });
                        angular.forEach(newdata, function (val, i) {
                            obj.push({
                                'id': val.price_list_id,
                                'text': val.price_name
                            });
                        });
                    });
                    angular.element('#customerPriceId').select2({
                        allowClear: true,
                        data: obj,
                        multiple: true,
                        closeOnSelect:true,
                    }).on("change", function (e) {
                        const inputIdS2 = '#s2id_'+$(this).attr('id');
                        if(e.added){
                            $(inputIdS2+' li').each(function() {
                                const childDiv = $(this).children();
                                let eleText = (childDiv[0]) ? childDiv[0].innerText : '';
                                if(eleText){
                                    if(eleText !== e.added.text){
                                        $(inputIdS2+' li').find( "div:contains("+ eleText +")").next().click();
                                    }    
                                }
                            });
                        }    
                    });
                }).error(errorCallback);
            } else {
                if ($scope.currentUserName == undefined || !$scope.currentUserName) {
                    notification('Please create user', 'warning');
                    return false;
                }
                if (setPriceLanguage == 'Change prices') {
                    if (angular.element('[id^=priceLanguageID]').length > 0) {
                        $('#priceLanguageID0').css('border', '1px solid red');
                        $('#priceLanguageID0').addClass('face');

                        $timeout(function () {
                            $('#priceLanguageID0').removeClass('face');
                            $('#priceLanguageID0').css('border', '0px solid red');
                        }, 3000);

                        notification('Please set language', 'warning');
                        return false;
                    } else {
                        $('.itemList').css('border', '1px solid red');
                        $('.itemList').addClass('face');

                        $timeout(function () {
                            $('.itemList').removeClass('face');
                            $('.itemList').css('border', '0px solid red');
                        }, 3000);

                        notification('Please select language combination.', 'warning');
                        return false;
                    }
                }
                var langObj = [];
                for (var i = 0; i < angular.element('[id^=priceLanguageID]').length; i++) {
                    var languagePrice = angular.element('.priceLanguage' + i).text();
                    langObj.push({
                        'languagePrice': languagePrice
                    });
                }

                var basePriceObj = [];
                for (var i = 0; i < angular.element('[class^=basePriceMain]').length; i++) {
                    var baseQuentity = angular.element('#basepriceQuantity' + i).val().trim();
                    if (angular.element('#basePriceCheck' + i).attr('class').split(' ')[1] == 'fa-check') {
                        var basePricecheck = 1;
                    } else {
                        var basePricecheck = 0;
                    }
                    var basePriceUnit = angular.element('#basePriceUnit' + i).text().trim();
                    var childPriceId = angular.element('#childPriceId' + i).val();
                    var masterPriceId = angular.element('#masterPriceId' + i).val();
                    var basePrice = angular.element('#basePrice' + i).val().trim();
                    //basePrice = numberFormatCommaToPoint(basePrice);
                    //basePrice = CommaToPoint4Digit(basePrice);
                    basePrice = commaToPoint(basePrice);
                    var standardTime = angular.element('.standardTime' + i).text().trim();
                    basePriceObj.push({
                        'baseQuentity': baseQuentity,
                        'basePricecheck': basePricecheck,
                        'basePriceUnit': basePriceUnit,
                        'basePrice': basePrice,
                        'standardTime': standardTime,
                        'childPriceId': childPriceId,
                        'masterPriceId': masterPriceId
                    });
                }

                var price_id = $scope.pricePageId;
                var price_language = JSON.stringify(langObj);
                var price_basis = JSON.stringify(basePriceObj);
                $scope.price_language = price_language;
                $scope.price_basis = price_basis;
                $scope.price_id = price_id;
                $scope.customerPrice.price_language = $scope.price_language;
                $scope.customerPrice.price_basis = $scope.price_basis;
                $scope.customerPrice.price_id = $scope.price_id;
                $scope.customerPrice.resource_id = 0;
                if ($scope.pricePageId == 1) {
                    $scope.customerPrice.resource_id = $scope.UserId;
                }
                if ($scope.pricePageId == 2) {
                    $scope.customerPrice.resource_id = $scope.ExternalPricelistId;
                }
                rest.path = "customerpriceSave";
                rest.post($scope.customerPrice).success(function (data) {
                    notification('Price list successfully saved', 'success');
                    $scope.customerPrice.price_list_id = data.LastIsertedData.price_list_id;
                    $timeout(function () {
                        angular.element("#customerPriceId").select2('data', { id: data.LastIsertedData.price_list_id, text: data.LastIsertedData.price_name });
                    }, 200);
                    var obj = [];
                    rest.path = 'customerpriceAll/' + data.LastIsertedData.price_id;
                    rest.get().success(function (data) {
                        var newdata = data;
                        newdata = data.filter( function (data) {
                            //$scope.ExternalPricelistId - before used variable issue;  
                            return data.resource_id == $scope.customerPrice.resource_id;  
                        });
                        angular.forEach(newdata, function (val, i) {
                            obj.push({
                                'id': val.price_list_id,
                                'text': val.price_name
                            });
                        });
                    });
                    angular.element('#customerPriceId').select2({
                        allowClear: true,
                        data: obj,
                        multiple: true,
                        closeOnSelect:true,
                    }).on("change", function (e) {
                        const inputIdS2 = '#s2id_'+$(this).attr('id');
                        if(e.added){
                            $(inputIdS2+' li').each(function() {
                                const childDiv = $(this).children();
                                let eleText = (childDiv[0]) ? childDiv[0].innerText : '';
                                if(eleText){
                                    if(eleText !== e.added.text){
                                        $(inputIdS2+' li').find( "div:contains("+ eleText +")").next().click();
                                    }    
                                }
                            });
                        }    
                    });
                }).error(errorCallback);
            }
        }
    }

    angular.element('.topMenu').click(function () {
        angular.element('.topMenu').removeClass('topMenu-Active');
        angular.element(this).addClass('topMenu-Active');
        if (angular.element(this).text().trim() == 'Planned time') {
            $scope.plannedTime = true;
        } else {
            $scope.plannedTime = false;
        }
    });

    $scope.basePriceOtyChnage = function (id) {
        var bsprice1 = $scope.basePrice[id];
        var basePrice1 = bsprice1.replace(/[.]/g, '');
        var basePrice = basePrice1.replace(/[,]/g, '.');
        $scope.baseTotal[id] = $scope.baseQuentity[id] * parseFloat(basePrice);
        $scope.baseTtl[id] = $scope.baseTotal[id];

        var qty = $scope.priceBasiList[id].baseQuentity;
        var basePrice_p = $scope.priceBasiList[id].basePrice ? $scope.priceBasiList[id].basePrice : 0; 
        var basePrice_p1 = basePrice_p.toString().replace(/[.]/g, '');
        var basePrice_p2 = basePrice_p1.replace(/[,]/g, '.');
        var subTotal_p = qty * parseFloat(basePrice_p2);
        
        $scope.priceBasiList[id].baseTtl = subTotal_p;
     }

    /*Used For Dynamically added element STRAT*/
    $scope.basePriceChnage = function (id, data) {
        var val = angular.element('#basepriceQuantity' + id).val();
        if (data && val.length > 0) {
            var mul = parseFloat(val) * parseFloat(data);
            mul = $filter('customNumber')(mul);
            angular.element('#baseWaiting' + id).text(mul);
        } else {
            angular.element('#baseWaiting' + id).text('0');
        }
    }

    $scope.basePriceQuantityChnage = function (id, data) {
        var val = angular.element('#basePrice' + id).val();
        if (data && val.length > 0) {
            var mul = parseFloat(val) * parseFloat(data);
            mul = $filter('customNumber')(mul);
            angular.element('#baseWaiting' + id).text(mul);
        } else {
            angular.element('#baseWaiting' + id).text('0');
        }
    }
    /*Used For Dynamically added element END*/

    $scope.copyCustomer = function (id) {
        if (id) {
            rest.path = 'customerpriceListCopy/' + id;
            rest.get().success(function (data) {
                $scope.customerChange(data.id);
            });
        } else {
            notification("please select option", "warning");
        }
    }

    // master price list as Project Type 
    setTimeout(() => {
        /* rest.path = 'prtype';
        rest.get().success(function(data) {
            $scope.projectType = data;
            
        }).error(errorCallback); */

        rest.path = 'masterPriceGetdata';
        rest.get().success(function (data) {
            $scope.projectType = data;
        }).error(errorCallback);

    }, 1000)


    $scope.masterChildDropDown = function () {
        $scope.pricesArray = [];
        $scope.pricesArrayAll = [];
        $timeout(function () {
            // angular.forEach($scope.masterPrice, function (val, i) {
            //     var obj1 = {
            //         id: '',
            //         text: val.name,
            //         children: []
            //     }
            //     $scope.pricesArray.push(obj1);
            // })
            angular.forEach($scope.masterPrice, function (v, i) {
                var obj1 = {
                    id: '',
                    text: v.name,
                    children: []
                }
                $scope.pricesArray.push(obj1);

                var newObj1 = {
                    id: '',
                    text: v.name,
                    children: []
                }
                $scope.pricesArrayAll.push(newObj1);
                angular.forEach($scope.childPrice, function (val1, i1) {
                    if (v.master_price_id == val1.master_price_id) {
                        var obj2 = {
                            id: val1.child_price_id,
                            text: val1.name
                        }
                        var newObjchild1 = {
                            id: val1.child_price_id,
                            text: val1.name
                        }
                        $scope.pricesArray[i].children.push(obj2);
                        $scope.pricesArrayAll[i].children.push(newObjchild1);
                    }
                })
            })
        }, 2000);

        function filterPriceArr(arrF, term){
            var fPriceArr = [];
            angular.forEach(arrF, function (v, i) {
                var newObj1 = {
                    id: '',
                    text: v.text,
                    children: []
                }
                fPriceArr.push(newObj1);
                angular.forEach(v.children, function (val, i2) {
                    if (val.text.toUpperCase().includes((term).toUpperCase()) ) {    
                        var obj2 = {
                            id: val.id,
                            text: val.text
                        }
                        fPriceArr[i].children.push(obj2);
                    }
                })
                
                
            })
            return fPriceArr;
        }

        function matchSearch(arr, term){
            
            var matchSelect2Arr = arr.filter(x => {
                
                let child = [];
                var childFlt = x.children.filter(c => {
                    
                    if (c.text.toUpperCase().includes((term).toUpperCase()) ) {
                        child.push(c)
                        return true;
                    }    
                })
                if(childFlt.length){
                    x.children = child;
                    return x;
                }
            });
            
            return matchSelect2Arr;
        }    

        $('#priceUnit').select2({
            multiple: true,
            allowClear: true,
            placeholder: "Select price..",
            data: $scope.pricesArray,
            query: function (options) {
                var selectedIds = options.element.select2('val');
                
                var selectableGroups = $.map(this.data, function (group) {
                    var areChildrenAllSelected = true;
                    $.each(group.children, function (i, child) {
                        if (selectedIds.indexOf(child.id) < 0) {
                            areChildrenAllSelected = false;
                            return false; // Short-circuit $.each()
                        }
                    });
                    return !areChildrenAllSelected ? group : null;
                });
                
                if((options.term).trim().length > 0 ){
                   //options.matcher(matchSearch(selectableGroups, (options.term).trim() ))
                   //let matchArr = matchSearch(selectableGroups, (options.term).trim() )
                   var matchArr = filterPriceArr($scope.pricesArray, (options.term).trim() )
                   var matchSelect2Arr = matchArr.filter(x => { if(x.children.length) return x } )     
                   
                   selectableGroups = matchSelect2Arr; 
                   
                }else{
                    selectableGroups =  $scope.pricesArrayAll;
                }
                    
                options.callback({ results: selectableGroups });
            },
            //matcher: matchStart,
            
        }).on('select2-selecting', function (e) {
            var $select = $(this);
            if (e.val == '') {
                e.preventDefault();
                $select.select2('data', $select.select2('data').concat(e.object.children));
                $select.select2('close');
            }
            const inputIdS2 = '#s2id_'+$(this).attr('id');
        });
    }

    $timeout(function () {
        $scope.masterChildDropDown();
    }, 200);

    $scope.basePriceAdd = function () {
        var selectedPrices = $('#priceUnit').val();
        
        if (!$scope.priceBasiList.length || $scope.priceBasiList == undefined) {
            $scope.priceBasiList = [];
        }
        if (selectedPrices) {
            var check = false;
            var getComma = /,/;
            if (getComma.test(selectedPrices) == true) {
                check = true;
            } else {
                check = false;
            }
            if (check) {
                var selectedPricesArray = selectedPrices.split(',')
                
                angular.forEach(selectedPricesArray, function (val, i) {
                    rest.path = 'childpriceGetOne/' + val;
                    rest.get().success(function (data) {
                        var prType = $scope.projectType.filter(x => x.master_price_id == data.master_price_id)
                        var projType = prType.length > 0 ? prType[0].code + ' - ' : '';
                        var exists = false;
                        angular.forEach($scope.priceBasiList, function (val1, i1) {
                            if (val1.basePriceUnit == data.name) {
                                exists = true;
                            }
                        })

                        if (!exists) {
                            var newPriceObj = {
                                basePrice: data.rate,
                                basePriceUnit: data.name,
                                basePricecheck: 1,
                                baseQuentity: "1",
                                baseTtl: 1 * data.rate,
                                standardTime: "",
                                childPriceId: data.child_price_id,
                                masterPriceId: data.master_price_id
                            };
                            $scope.baseQuentity[$scope.priceBasiList.length] = 1;
                            $scope.basePrice[$scope.priceBasiList.length] = $filter('customNumber')(data.rate);
                            newPriceObj.basePrice = $filter('customNumber')(data.rate);
                            if ($scope.baseTtl == undefined) {
                                $scope.baseTtl = [];
                            }
                            
                            $scope.baseTtl[$scope.priceBasiList.length] = $scope.baseQuentity[$scope.priceBasiList.length] * data.rate;
                            $scope.priceBasiList.push(newPriceObj);
                            //$('#priceUnit').val('');
                            $("#priceUnit").select2("val", "");
                        }
                        /*angular.forEach($scope.priceBasiList,function(val1,i1){
                            if(val1.basePriceUnit == data.name){
                                var newPriceObj = {
                                    basePrice: data.rate,
                                    basePriceUnit: data.name,
                                    basePricecheck: 1,
                                    baseQuentity: "1",
                                    standardTime: ""
                                };
                                $scope.baseQuentity[$scope.priceBasiList.length] = 1;
                                $scope.basePrice[$scope.priceBasiList.length] = data.rate;
                                $scope.priceBasiList.push(newPriceObj);
                                //$('#priceUnit').val('');
                                $("#priceUnit").select2("val", "");
                            }else{
                            
                            }
                        })*/
                    }).error(errorCallback);
                })
            } else {

                rest.path = 'childpriceGetOne/' + selectedPrices;
                rest.get().success(function (data) {
                    
                    //var prType = $scope.projectType.filter(x => x.master_price_id  == data.service )
                    var prType = $scope.projectType.filter(x => x.master_price_id == data.master_price_id)
                    var projType = prType.length > 0 ? prType[0].code + ' - ' : '';

                    var exists = false;
                    angular.forEach($scope.priceBasiList, function (val, i) {
                        if (val.childPriceId == data.child_price_id) {
                            //if (val.basePriceUnit == data.name) {    
                            exists = true;
                        }
                    })

                    if (!exists) {
                        var newPriceObj = {
                            basePrice: data.rate,
                            basePriceUnit: data.name,
                            basePricecheck: 1,
                            baseQuentity: "1",
                            baseTtl: 1 * data.rate,
                            standardTime: "",
                            childPriceId: data.child_price_id,
                            masterPriceId: data.master_price_id
                        };
                        if(typeof $scope.baseTtl == 'undefined')
                            $scope.baseTtl = []; // To solve type error undefined
                        $scope.baseQuentity[$scope.priceBasiList.length] = 1;
                        $scope.basePrice[$scope.priceBasiList.length] = $filter('customNumber')(data.rate);
                        $scope.baseTtl[$scope.priceBasiList.length] = $scope.baseQuentity[$scope.priceBasiList.length] * data.rate;
                        newPriceObj.basePrice = $filter('customNumber')(data.rate);
                        $scope.priceBasiList.push(newPriceObj);
                        //$('#priceUnit').val('');
                        $("#priceUnit").select2("val", "");
                    } else {
                        notification('Prices already exists.', 'warning');
                    }

                }).error(errorCallback);
            }
        } else {
            notification('Please select prices.', 'warning');
        }

    }

    $scope.sortableOptions = {
        axis: "y",
        activate: function () { },
        beforeStop: function () { },
        change: function () { },
        create: function (event, ui) {
            //
        },
        deactivate: function () { },
        out: function () { },
        over: function () { },
        receive: function () { },
        remove: function () { },
        sort: function () { },
        start: function (event, ui) { },
        update: function (e, ui) {
            // /
        },
        stop: function (e, ui) {
            $scope.priceBasiList = $scope.priceBasiList
        }
    };


}).controller('paymentController', function ($scope, $log, $location, $route, fileReader, rest, $window, $routeParams, $timeout, $interval) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.ContactPersonName = $window.localStorage.getItem("contactPersonId");
    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    $scope.uType = $window.localStorage.userType;
    $scope.currentUserName = $window.localStorage.currentUserName;
    $scope.clientId = $window.localStorage.getItem("priceListClientId");
    $scope.user_Id = $window.localStorage.getItem("contactUserId");
    if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
        $routeParams.id = $window.localStorage.iUserId;
    } else {
        $routeParams.id = $scope.clientId;
    }
    $scope.displaybankOption = false;
    $scope.displayPaypalOption = false;
    $timeout(function () {
        $scope.redirectToPayClientViewId = $window.localStorage.iUserId;
    }, 100);

    if ($scope.userRight == 2) {
        $window.localStorage.userType = 1;
        $scope.uType = 1;
    }
    
    $scope.bank = { 'payment_method': '', 'currency_code':'EUR'}
    $scope.payment = {'tax_id': '', 'country_code':''}
    if ($routeParams.id != ' ' && $routeParams.id != undefined) {

        rest.path = 'getuserpayment/' + $routeParams.id + '/' + $window.localStorage.userType;
        rest.get().success(function (data) {
            
            if (data == null) {
                $scope.paymentData = {};
                $scope.payment = {};
                $scope.bank = {};
            } else {
                $scope.paymentData = data;
            }
            if (data != null) {
                $scope.payment = JSON.parse(data.vPaymentInfo);
                //$scope.vatCount($scope.payment);
                if(data.vBankInfo)
                    $scope.bank = JSON.parse(data.vBankInfo);

                if ($scope.bank.payment_method == 'Bank Transfer') {
                    $scope.displaybankOption = true;
                    $scope.displayPaypalOption = false;
                } else {
                    $scope.displaybankOption = false;
                    $scope.displayPaypalOption = true;
                }
                
                $timeout(function () {
                    $('#currencyCoded').select2('data', { id: $scope.bank.currency_code, text: $scope.bank.currency_code.split(',')[0] });
                }, 500);

                //angular.element('#currencyCoded').val($scope.bank.currency_code);
            } else {
                $scope.vatCount('paymentDataNotAvailble');
            }

        }).error(errorCallback);
    } else {
        $scope.paymentData = {};
        $scope.notRootParamsId = true;
    }

    $scope.invoicePeriodDays = 30;
    rest.path = "getAllInvoicePeriod";
    rest.get().success(function (data) {
        
        $scope.dueperiodList = data;
        if ($scope.dueperiodList.length > 0) {
            $scope.invoicePeriodDays = $scope.dueperiodList[0].number_of_days;
        }
        //$scope.getOne(data[0].invoice_due_id);
    }).error(errorCallback);

    if ($scope.clientId != " " && $scope.userRight != 2) {
        
        $routeParams.id = $scope.clientId;
        rest.path = 'getClientpayment/' + $routeParams.id;
        rest.get().success(function (data) {
            if (data == null) {
                $scope.paymentData = {};
            } else {
                $scope.paymentData = data;
            }

            if (data != null) {
                if (data.vPaymentInfo) {
                    $scope.payment = JSON.parse(data.vPaymentInfo);
                }
                
                //$scope.vatCount($scope.payment);
                if (data.vBankInfo) {
                    $scope.bank = JSON.parse(data.vBankInfo);
                }

                rest.path = 'client/' + $routeParams.id;
                rest.get().success(function (dataCl) {
                    
                    if(dataCl)
                        $scope.paymentData.invoice_no_of_days = dataCl.invoice_no_of_days
                });
            }
        }).error(errorCallback);
    }

    $scope.savePaymentdirect = function (formId, type, isSavebtn) {
        
        if($scope.payment.tax_id){
            $scope.payment.country_code = $scope.payment.tax_id.substring(0, 2).toUpperCase();
            //$scope.payment.country_code =  $scope.payment.country_code.toString().match(/[a-z]/i) ? $scope.payment.tax_id.substring(0, 2).toUpperCase() : '';
            //$scope.payment.tax_id = $scope.payment.tax_id.substring(2, 15);
            $scope.payment.tax_id = $scope.payment.tax_id;
        }   
        if (!$scope.payment.country_code || !$scope.payment.tax_id) {
            $scope.payment.country_code = $scope.payment.country_code ? $scope.payment.country_code : '';
            $scope.payment.tax_id = $scope.payment.tax_id ? $scope.payment.tax_id : '';
            //notification('please enter vat number', 'warning');
            //return false
        }
        if ($scope.clientId != " ") {
            if (angular.element("#" + formId).valid()) {
                var validVatNo = angular.element("#vatResponseFormTable tr td:first-child").find('span').hasClass('validStyle');
                // if(validVatNo){
                if ($scope.paymentData.iPaymentId != '' && $scope.paymentData.iPaymentId != undefined) {
                    $scope.payament_data = {};
                    $routeParams.id = $scope.clientId;
                    $scope.payament_data.vPaymentInfo = JSON.stringify($scope.payment);
                    $scope.payament_data.vBankInfo = JSON.stringify($scope.bank);
                    
                    $scope.payament_data.tax_rate = $scope.paymentData.tax_rate ? $scope.paymentData.tax_rate : 0;
                    
                    $scope.payament_data.invoice_no_of_days = $scope.paymentData.invoice_no_of_days 

                    rest.path = 'paymentdirectUpdate/' + $routeParams.id + '/' + $window.localStorage.userType;
                    rest.post($scope.payament_data).success(function (data) {
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = $scope.clientId;
                        $scope.logMaster.log_type = "update";
                        $scope.logMaster.log_status = "direct_cli";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end 
                        notification('saved successfully', 'success');
                        if(!isSavebtn){
                            $location.path('/login-detail');
                        }
                        
                    }).error(errorCallback);
                } else {
                    if ($routeParams.id != '' && $routeParams.id != undefined) {
                        $scope.payament_data = {};
                        $scope.payament_data.iClientId = $scope.clientId;
                        $scope.payament_data.iType = $window.localStorage.userType;
                        $scope.payament_data.vPaymentInfo = JSON.stringify($scope.payment);
                        $scope.payament_data.vBankInfo = JSON.stringify($scope.bank);
                        $scope.payament_data.tax_rate = $scope.paymentData.tax_rate ? $scope.paymentData.tax_rate : 0;
                        $scope.payament_data.invoice_no_of_days = $scope.paymentData.invoice_no_of_days
                        rest.path = 'paymentsave';
                        rest.post($scope.payament_data).success(function (data) {
                            //log file start 
                            $scope.logMaster = {};
                            $scope.logMaster.log_type_id = $scope.clientId;
                            $scope.logMaster.log_type = "update";
                            $scope.logMaster.log_status = "direct_cli";
                            $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                            rest.path = "saveLog";
                            rest.post($scope.logMaster).success(function (data) { });
                            notification('saved successfully', 'success');
                            if(!isSavebtn){
                                $location.path('/login-detail');
                            }
                            //$location.path('/login-detail');
                        }).error(errorCallback);
                        /*notification('saved successfully', 'success');
                        $location.path('/login-detail');*/
                    }
                }
                // }else{
                //     notification('Please enter valid vat number','error');
                // }
            }
        } else {
            notification('Please create User', 'warning');
            $route.reload();
        }

    }

    $scope.savePayment = function (formId, type) {

        if (angular.element("#" + formId).valid()) {
            if ($scope.currentUserName == undefined || !$scope.currentUserName) {
                notification('Please create user', 'warning');
                return false;
            }
            //var validVatNo = angular.element("#vatResponseFormTable tr td:first-child").find('span').hasClass('validStyle');
            //var Norwegian = angular.element("#true").text();
            var validVatNo = true;
            var Norwegian = 'true';
            if (validVatNo || Norwegian == 'true') {
                if ($scope.paymentData.iPaymentId != '' && $scope.paymentData.iPaymentId != undefined) {
                    $scope.payament_data = {};
                    if ($scope.bank.payment_method == 'Bank Transfer') {
                        $scope.bank.paypal_address = '';
                    } else {
                        $scope.bank.bank_name = '';
                        $scope.bank.address = '';
                        $scope.bank.holder_name = '';
                        $scope.bank.currency_code = '';
                        $scope.bank.iban = '';
                        $scope.bank.bic = '';
                        $scope.bank.bank_code = '';
                    }
                    $scope.payament_data.vPaymentInfo = JSON.stringify($scope.payment);
                    $scope.payament_data.vBankInfo = JSON.stringify($scope.bank);
                    $scope.payament_data.iUserId = $window.localStorage.iUserId;
                    $scope.payament_data.tax_rate = $scope.paymentData.tax_rate ? $scope.paymentData.tax_rate : 0;

                    rest.path = 'paymentsave/' + $routeParams.id + '/' + $window.localStorage.userType;
                    rest.post($scope.payament_data).success(function (data) {
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = $window.localStorage.iUserId;
                        $scope.logMaster.log_title = $window.localStorage.currentUserName;
                        $scope.logMaster.log_type = "update";
                        $scope.logMaster.log_status = "external_res";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        // log file end
                        notification('saved successfully', 'success');
                        $timeout(function () {
                            $route.reload();
                        }, 200);
                        //$location.path('/user/2');
                    }).error(errorCallback);
                } else {
                    if ($routeParams.id != '' && $routeParams.id != undefined) {
                        $scope.payament_data = {};
                        if ($scope.bank.payment_method == 'Bank Transfer') {
                            $scope.bank.paypal_address = '';
                        } else {
                            $scope.bank.bank_name = '';
                            $scope.bank.address = '';
                            $scope.bank.holder_name = '';
                            $scope.bank.currency_code = '';
                            $scope.bank.iban = '';
                            $scope.bank.bic = '';
                            $scope.bank.bank_code = '';
                        }
                        $scope.payament_data.iUserId = $routeParams.id;
                        $scope.payament_data.iType = $window.localStorage.userType;
                        $scope.payament_data.vPaymentInfo = JSON.stringify($scope.payment);
                        $scope.payament_data.vBankInfo = JSON.stringify($scope.bank);
                        $scope.payament_data.tax_rate = $scope.paymentData.tax_rate ? $scope.paymentData.tax_rate : 0;

                        rest.path = 'paymentsave';
                        rest.post($scope.payament_data).success(function (data) {
                            //log file start 
                            $scope.logMaster = {};
                            $scope.logMaster.log_type_id = $window.localStorage.iUserId;
                            $scope.logMaster.log_title = $window.localStorage.currentUserName;
                            $scope.logMaster.log_type = "update";
                            $scope.logMaster.log_status = "external_res";
                            $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                            rest.path = "saveLog";
                            rest.post($scope.logMaster).success(function (data) { });
                            // log file end

                            notification('saved successfully', 'success');
                            $timeout(function () {
                                $route.reload();
                            }, 200);
                            //$location.path('/user/2');
                        }).error(errorCallback);
                    } else {
                        notification('Please create User', 'warning');
                        $route.reload();
                    }
                }
            } else {
                notification('Please enter valid vat number', 'error');
            }

        }
    };

    //LU26375245
    //vat number api
    $scope.vatCount = function (payment) {
        if (payment == 'paymentDataNotAvailble') {
            angular.element('#vatLoader').css('display', 'none');
            return false;
        }
        if (payment == undefined || !payment || !payment.tax_id) {
            angular.element('#vatLoader').css('display', 'none');
            return false;
        }

        if (payment.tax_id.length < 3) {
            angular.element('#vatLoader').css('display', 'none');
            notification('Please enter more then three character.', 'warning');
            return false;
        }
        angular.element('#vatLoader').css('display', 'block');
        payment.country_code = payment.tax_id.substring(0, 2).toUpperCase();
        payment.tax_id = payment.tax_id.substring(2, 15);
        if (payment.country_code && payment.tax_id) {
            
            rest.path = "getVatcount/" + payment.country_code + '/' + payment.tax_id;
            rest.get().success(function (data) {
                $scope.payment.tax_id = payment.country_code + payment.tax_id;
                if (data.From == 'europa') {
                    $scope.payment.country_code = payment.country_code;
                    
                    if (data) {
                        if (data.data) {
                            $scope.payment.tax_id = (payment.tax_id).includes(payment.country_code) ? payment.tax_id : payment.country_code + payment.tax_id;
                            //$scope.vatList = data.data.substring(20550, 21550);
                            $scope.vatList = data.data;
                            // var part = str.substring( str.lastIndexOf(":") + 1, str.lastIndexOf(";") );
                        }
                    }

                    if ($scope.vatList && $scope.vatList.valid == true) {
                        let response = '';
                        response += '<table class="table table-bordered table-striped">';
                        response += '<tbody>';
                        response += '<tr>';
                        response += '<th>Member State</th>';
                        response += '<td>' + $scope.vatList.country_code + '</td>';
                        response += '</tr>';
                        response += '<tr>';
                        response += '<th>VAT Number</th>';
                        response += '<td>' + $scope.vatList.country_code + ' ' + $scope.vatList.vat_number + '</td>';
                        response += '</tr>';
                        response += '<tr>';
                        response += '<th>Name</th>';
                        response += '<td>' + $scope.vatList.company_name + '</td>';
                        response += '</tr>';
                        //response += '</tr>';
                        response += '<tr>';
                        response += '<th>Address</th>';
                        response += '<td>' + $scope.vatList.company_address + '.</td>';

                        response += '</tr>';
                        response += '</tbody>';
                        response += '</table>';
                        angular.element('.vatNumberValid').html(response);
                        //angular.element('.vatNumberValid').html($scope.vatList);
                        angular.element('.invalidStyle').text('No, invalid VAT number');
                        $scope.blockVat = true;
                        angular.element('#vatResponseFormTable').addClass('table');
                        angular.element('#vatResponseFormTable').addClass('table-bordered');
                    } else {
                        notification('Unable to get vat information, please try again.', 'warning');
                        angular.element('.vatNumberValid').html('');
                    }
                    angular.element('#vatLoader').css('display', 'none');
                } else {
                    //if (data.data != null && data.data != undefined && data.data != '' && data.data.status != 400) {

                    
                    $scope.vatnorwayData = data.data;
                    
                    if ($scope.vatnorwayData != null && $scope.vatnorwayData != '' && $scope.vatnorwayData.data.valid == true && $scope.vatnorwayData.code != 400) {
                        var response = '';
                        response += '<div id="true" style="display:none">true</div>';
                        response += '<table class="table table-bordered table-striped">';
                        response += '<tbody>';
                        response += '<tr>';
                        response += '<th>Member State</th>';
                        response += '<td>' + $scope.vatnorwayData.data.company.country_code + '</td>';
                        response += '</tr>';
                        response += '<tr>';
                        response += '<th>VAT Number</th>';
                        response += '<td>' + $scope.vatnorwayData.data.company.country_code + ' ' + $scope.vatnorwayData.data.company.vat_number + '</td>';
                        response += '</tr>';
                        response += '<tr>';
                        response += '<th>Name</th>';
                        response += '<td>' + $scope.vatnorwayData.data.company.company_name + '</td>';
                        response += '</tr>';
                        response += '<tr>';
                        response += '<th>Address</th>';
                        response += '<td>' + $scope.vatnorwayData.data.company.company_address + '</td>';
                        response += '</tr>';
                        response += '</tbody>';
                        response += '</table>';
                        angular.element('.vatNumberValid').html(response);
                        $scope.payment.country_code = payment.country_code;
                        //$scope.payment.tax_id = payment.country_code + payment.tax_id;
                        $scope.payment.tax_id = (payment.tax_id).includes(payment.country_code) ? payment.tax_id : payment.country_code + payment.tax_id;
                            
                        angular.element('#vatLoader').css('display', 'none');
                    } else if (!data.data) {
                        notification('Unable to get vat information, please try again.', 'warning');
                        $scope.payment.country_code = payment.country_code;
                        //$scope.payment.tax_id = payment.country_code + payment.tax_id;
                        $scope.payment.tax_id = (payment.tax_id).includes(payment.country_code) ? payment.tax_id : payment.country_code + payment.tax_id;
                        angular.element('.vatNumberValid').html(' ');
                        angular.element('#true').text('false');
                        angular.element('#vatLoader').css('display', 'none');
                    } else if (data.data.status == 400) {
                        notification(data.data.message, 'warning');
                        $scope.payment.country_code = payment.country_code;
                        //$scope.payment.tax_id = payment.country_code + payment.tax_id;
                        $scope.payment.tax_id = (payment.tax_id).includes(payment.country_code) ? payment.tax_id : payment.country_code + payment.tax_id;
                        angular.element('.vatNumberValid').html(' ');
                        angular.element('#true').text('false');
                        angular.element('#vatLoader').css('display', 'none');
                    } else {
                        notification('Unable to get vat information, please try again.', 'warning');
                        $scope.payment.country_code = payment.country_code;
                        //$scope.payment.tax_id = payment.country_code + payment.tax_id;
                        $scope.payment.tax_id = (payment.tax_id).includes(payment.country_code) ? payment.tax_id : payment.country_code + payment.tax_id;
                        angular.element('.vatNumberValid').html(' ');
                        angular.element('#true').text('false');
                        angular.element('#vatLoader').css('display', 'none');
                    }
                }
            }).error(errorCallback);
            
        }

        //resource payment vate last td remove
        $timeout(function () {
            angular.element('#vatResponseFormTable').addClass('table');
            angular.element('#vatResponseFormTable').addClass('table-bordered');
            angular.element("table tr").eq(7).remove();
            if (angular.element("table tr").eq(2).children()[2]) {
                angular.element("table tr").eq(2).children()[2].remove();
            }
            var date = dateFormat(new Date(angular.element("table tr").eq(4).find('td:last').text()));
            var time = angular.element("table tr").eq(4).find('td:last').text().split(' ')[1];
            angular.element("table tr").eq(4).find('td:last').text(date + ' ' + time);
            angular.element("#vatResponseFormTable tr td:first-child").css('font-weight', 'bold');
            angular.element("#vatResponseFormTable");
        }, 3500);
    }

    if ($scope.notRootParamsId) {
        $scope.vatCount('paymentDataNotAvailble');
    }
    //vat edit 
    $scope.vatEdit = function () {
        $scope.blockVat = false;
    }

    $scope.paymentChange = function () {

        var selectedMethod = $('#paymentMethod').val().split(':')[1];
        if (selectedMethod === 'Bank Transfer') {
            $scope.displaybankOption = true;
            $scope.displayPaypalOption = false;
        } else {
            $scope.displaybankOption = false;
            $scope.displayPaypalOption = true;
        }
    }

}).controller('clientController', function ($scope, $log, $location, $route, fileReader, rest, $window, $rootScope, $routeParams, $uibModal) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.setItem("priceListClientId", " ");
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.clientnamec = "";

    $scope.adddClient = function (id) {
        if (id == 1) {
            $window.localStorage.setItem("priceListClientId", " ");
            $window.localStorage.setItem("ShowuserName", " ");
            $window.localStorage.setItem("clientpricelistdataId", "1");
            $location.path('/client-profile');
        } else {
            $location.path('/client-profile1');
        }
    }

    rest.path = 'client/' + $routeParams.id;
    $window.localStorage.iUserId = "";
    $window.localStorage.resourceType = "";
    $window.localStorage.currentUserName = "";
    $window.localStorage.userType = 2;
    $window.localStorage.priority = "customer";
    $rootScope.uType = 2;
    rest.path = 'clients';
    rest.get().success(function (data) {
        //$scope.clientlist = data;
    }).error(errorCallback);

    $scope.deleteClient = function (id) {
        bootbox.confirm("Are you sure you want to delete this user?<br/><strong>Please note that ALL Info. under this User will also be deleted</strong>", function (result) {
            if (result == true) {
                rest.path = 'deleteClient/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    if ($routeParams.id == '1') {
        $scope.UpdatedId = $window.localStorage.getItem("session_iUserId");
        rest.path = 'basicClientUpdated';
        rest.put($scope.UpdatedId).success(function (data) {
            $location.path('/client/1');
        }).error(errorCallback);

        rest.path = 'clients';
        rest.get().success(function (data) {
            $scope.clientlist = data;
            angular.forEach($scope.clientlist, function (obj) {
                obj.clientCountry = JSON.parse(obj['address1Detail'])[3].value;
            });
        }).error(errorCallback);

        $scope.deleteClient = function (id) {
            bootbox.confirm("Are you sure you want to delete this user?<br/><strong>Please note that ALL Info. under this User will also be deleted</strong>", function (result) {
                if (result == true) {
                    rest.path = 'deleteClient/' + id;
                    rest.delete().success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                }
            });
        };
    } else {
        $scope.UpdatedId = $window.localStorage.getItem("session_iUserId");
        rest.path = 'IndirectClientUpdated';
        rest.put($scope.UpdatedId).success(function (data) {
            $location.path('/client/2');
        }).error(errorCallback);

        rest.path = 'clientlistindirect_show';
        rest.get().success(function (data) {
            $scope.clientlistindirect = data;
        }).error(errorCallback);

        $scope.deleteclientindirect = function (id) {
            bootbox.confirm("Are you sure you want to delete this user?<br/><strong>Please note that ALL Info. under this User will also be deleted</strong>", function (result) {
                if (result == true) {
                    rest.path = 'deleteClientindirect/' + id;
                    rest.delete().success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                }
            });
        };
    }

    $scope.deleteIndirect = function (id, clientName) {
        
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteClientindirect/' + id;
                rest.delete().success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = id;
                    $scope.logMaster.log_title = clientName;
                    $scope.logMaster.log_type = "delete";
                    $scope.logMaster.log_status = "indirect_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    $scope.deleteDirect = function (id, image, clientName) {
        var image = image ? image : 'blank.png'; 
        bootbox.confirm("Are you sure you want to delete? </br><b>Please note that all information in this client will be deleted.</b>", function (result) {
            if (result == true) {
                rest.path = 'clientdelete/' + id + '/' + image;
                rest.delete().success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = id;
                    $scope.logMaster.log_title = clientName;
                    $scope.logMaster.log_type = "delete";
                    $scope.logMaster.log_status = "direct_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    if ($routeParams.id == '1')
        $scope.btn_client = true;
    else
        $scope.btn_client = false;

    $scope.workingHour = function (id, table) {
        $routeParams.messageId = id;
        $window.localStorage.setItem("messageClientId", id);
        $routeParams.messageTable = table;
        $window.localStorage.setItem("messageClientTable", table);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/message.html',
            controller: 'messageController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
            $route.reload();
        });
    };

}).controller('viewdirectdetailController', function ($scope, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams, $log) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.viewFileManager = function (id) {
        closeWindows();
        $window.localStorage.setItem("contactclientId", id);
        var clientPopup = $window.open('#/filemanage/client', "popup", "width=2000,height=750");
        clientPopup.addEventListener("beforeunload", function () {
            localStorage['parentId'] = ' ';
            return false;
        }, false);
        openWindows.push(clientPopup);
    };

    // $scope.edc = function(){
    //     $location.path('/wizard');
    //     $routeParams.id = 1;
    // }

    if ($routeParams.id) {
        rest.path = 'viewdirectdataget/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.info = data;
            
            // rest.path = 'getTaxName/' + $scope.info.vTextType;
            // rest.get().success(function(data) {
            //     $scope.info.vTextType = data.tax_name;
            // }).error(errorCallback);
            if (data.address1Detail) {
                angular.forEach(JSON.parse(data.address1Detail), function (val, i) {
                    angular.element('#' + val.id).html(val.value);
                });
            }

            angular.element('#iBussinessDeveloper').html(data.iBussinessDeveloper);
            const mobileNumber = JSON.parse(data.vPhone).mobileNumber;
            var CountryCode = JSON.parse(data.vPhone).countryTitle;
            var displayCode = mobileNumber ? '(+' + CountryCode.split('+')[1] + ')' : '';
            $scope.info.vPhone = displayCode + ' ' + mobileNumber;
            if (data.Invoice.length > 0) {
                angular.forEach(JSON.parse(data.Invoice), function (val, i) {
                    angular.element('#' + val.selectInvoice).text(val.invoice);
                });
                $scope.email = JSON.parse(data.Invoice);
            }

            $scope.address1 = JSON.parse(data.address1Detail);
            $scope.address2 = JSON.parse(data.address2Detail);
            $scope.info.dtCreationDate = moment($scope.info.dtCreationDate).format($window.localStorage.getItem('global_dateFormat'));
        }).error(errorCallback);



        rest.path = 'viewcontactdirectEdit/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.contactlist = data;
        }).error(errorCallback);

        rest.path = 'getClientpayment/' + $routeParams.id;
        rest.get().success(function (data) {

            if (data == null) {
                $scope.paymentData = {};
            } else {
                $scope.paymentData = data;
            }
            if (data != null) {
                if (data.vBankInfo) {
                    $scope.bank = JSON.parse(data.vBankInfo);
                }
                $scope.payment = JSON.parse(data.vPaymentInfo);
            }

        }).error(errorCallback);

        rest.path = 'clientdirect_login_details/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.clientlist1 = data;
        }).error(errorCallback);

        rest.path = 'PriceListDirectEditgetone/' + $routeParams.id;
        rest.get().success(function (data) {
            if (data) {
                $scope.price = data;
                var currency = data.currancy_id.split(',');
                $scope.currencySymbole = currency[1];
                $scope.currencyCode = currency[0];
                $scope.translate = JSON.parse(data['translation']);
                $scope.proofreading = JSON.parse(data['proofreading']);
                $scope.tep = JSON.parse(data['tep']);
            }
        })
    }

    $scope.hideShowPassField = function ($index) {
        
        if ($('#passShow' + $index).hasClass('hiddenField')) {
            $('#passShow' + $index).removeClass('hiddenField');
        } else {
            $('#passShow' + $index).addClass('hiddenField');
        }
        if ($('#passHide' + $index).hasClass('hiddenField')) {
            $('#passHide' + $index).removeClass('hiddenField');
        } else {
            $('#passHide' + $index).addClass('hiddenField');
        }
    }

    $scope.emailSent = function (id, table) {
        $routeParams.messageId = id;
        $window.localStorage.setItem("messageClientId", id);
        $routeParams.messageTable = table;
        $window.localStorage.setItem("messageClientTable", table);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/message.html',
            controller: 'messageController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            // debugger;
            $scope.selected = selectedItem;
            $route.reload();
        });
    }

    $scope.generalEmail = function (id) {
        if (id != undefined && id != " " && id != null) {
            $window.localStorage.generalMsg = id;
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/generalmsg.html',
                controller: 'generalmsgController',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.data;
                    }
                }
            });
        } else {
            notification('Please Add Email', 'warning');
        }
    };
    $scope.deleteDirect = function (id, image, clientName) {
        var image = image ? image : 'blank.png'; 
        bootbox.confirm("Are you sure you want to delete? </br><b>Please note that all information in this client will be deleted.</b>", function (result) {
            if (result == true) {
                rest.path = 'clientdelete/' + id + '/' + image;
                rest.delete().success(function (data) {
                    if (data) {
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = id;
                        $scope.logMaster.log_title = clientName;
                        $scope.logMaster.log_type = "delete";
                        $scope.logMaster.log_status = "direct_cli";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                        $location.path('/client/1');
                    } else {
                        notification('You can not delete this client.', 'error');
                    }
                }).error(errorCallback);
            }
        });
    };
}).controller('viewIndirectdetailController', function ($scope, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.viewFileManager = function (id) {
        closeWindows();
        $window.localStorage.setItem("IndirectClientId", id);
        var userFilePopup = $window.open('#/filemanage/IndirectClient', "popup", "width=2000,height=750");
        userFilePopup.addEventListener("beforeunload", function () {
            localStorage['parentId'] = ' ';
            localStorage['IndirectClientId'] = ' ';
            return false;
        }, false);
        openWindows.push(userFilePopup);
    };

    $scope.deleteIndirect = function (id, clientName) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteClientindirect/' + id;
                rest.delete().success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = id;
                    $scope.logMaster.log_title = clientName;
                    $scope.logMaster.log_type = "delete";
                    $scope.logMaster.log_status = "indirect_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $location.path('/client/2');
                }).error(errorCallback);
            }
        });
    };
    if ($routeParams.id) {
        rest.path = 'client_indirect_update/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.info = data;
        }).error(errorCallback);
    }
}).controller('indirectclientController', function ($timeout, $scope, $log, $location, $route, fileReader, rest, $window, $rootScope, $routeParams, $uibModal) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.setItem("contactclientId", " ");
    angular.element('.help-block').css('display', 'none');

    $timeout(function () {
        $scope.redirectToClientViewId = $routeParams.id;
    }, 100);

    rest.path = "IndirectCustomerFileCheck";
    rest.get().success(function (data) {
        angular.element('.fileId').text(data);
    })

    if ($routeParams.id) {
        $scope.info = {};
        $scope.info.updatedBy_id = $window.localStorage.getItem("session_iUserId");
        $scope.info.updated_id = $routeParams.id;
        rest.path = 'clientIndirectCheck'
        rest.post($scope.info).success(function (data) {
            $scope.UpdateClientName = data.updatedBy_name;
            $window.localStorage.setItem("session_iUpdatedId", data.updatedBy_id);
        })
    }

    $scope.info = {};
    var currentdate = new Date();

    //$scope.info.vClientNumber = randNumber();

    if (!$routeParams.id) {
        rest.path = "clientProfileNumber/2";
        rest.get().success(function (data) {
            $scope.info.vClientNumber = pad(data, 3);
        });
    }

    $scope.info.dtCreationDate = currentdate.getDate() + "/" +
        (currentdate.getMonth() + 1) + "/" +
        currentdate.getFullYear() + " " +
        currentdate.getHours() + ":" +
        currentdate.getMinutes() + ":" +
        currentdate.getSeconds();

    $scope.saveClientIndiarect = function (formId) {
        if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
            $routeParams.id = $window.localStorage.iUserId;
        }

        if (angular.element("#" + formId).valid()) {
            if ($scope.info.iClientId) {
                // $routeParams.id = $window.localStorage.iUserId;
                $scope.UpdatedId = $window.localStorage.getItem("session_iUpdatedId");
                $scope.userId = $window.localStorage.getItem("session_iUserId");
                if ($scope.UpdatedId != $scope.userId) {
                    $scope.info.iEditedBy = $window.localStorage.getItem("session_iUpdatedId");
                } else {
                    $scope.info.iEditedBy = 0;
                }

                rest.path = 'clientupdateindirect';
                rest.put($scope.info).success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = $scope.info.iClientId;
                    $scope.logMaster.log_title = $scope.info.vUserName;
                    $scope.logMaster.log_type = "update";
                    $scope.logMaster.log_status = "indirect_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    notification('Updated successfully', 'success');
                    //$location.path('/client/2');
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($scope.imageSrc) {
                    $scope.info.image = $scope.imageSrc;
                }
                $scope.fileId = angular.element('.fileId').text();
                $scope.info.fileId = $scope.fileId;
                rest.path = 'clientsaveindirect';
                rest.post($scope.info).success(function (data) {
                    $window.localStorage.setItem("IndirectClientId", data.iClientId);

                    //log file start
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = data.iClientId;
                    $scope.logMaster.log_title = $scope.info.vUserName;
                    $scope.logMaster.log_type = "add";
                    $scope.logMaster.log_status = "indirect_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    notification('Created successfully', 'success');
                    if(data.iClientId)
                        $location.path('/edit-indirect/'+data.iClientId);
                    //$location.path('/client/2');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    if ($window.localStorage.iUserId != '' && $window.localStorage.iUserId != undefined) {
        $routeParams.id = $window.localStorage.iUserId;
    }

    if ($routeParams.id) {
        rest.path = 'client_indirect_update/' + $routeParams.id;
        rest.get().success(function (data) {
            $window.localStorage.setItem("IndirectClientId", data.iClientId);

            $scope.session_vUserName = $window.localStorage.getItem("session_iUserName");
            $scope.info = data;
        }).error(errorCallback);
    }

    $scope.directoryIndirectFolder = function (frmId, iClientIdIndirect) {
        
        var id;
        if (iClientIdIndirect == 'undefined' || iClientIdIndirect == undefined) {
            notification('Please create account.', 'warning');
            return false;
        }
        var indirectClientFid = $window.localStorage.getItem("IndirectClientId");

        if ($routeParams.id == undefined && !indirectClientFid || indirectClientFid == undefined || indirectClientFid == 'undefined') {
            notification('Please create account.', 'warning');
        } else {
            if (indirectClientFid != null && indirectClientFid.trim().length != 0) {
                id = indirectClientFid;
            } else {
                id = $routeParams.id;
            }
            if (id == null || id == 'undefined') {
                notification('Please create account.', 'warning');
                return false;
            }

            rest.path = 'client_indirect_update/' + id;
            rest.get().success(function (data) {
                
                if (!data) {
                    notification('Please create resource.', 'warning');
                } else {

                    if (id == data.iClientId) {
                        $window.localStorage.setItem("IndirectClientId", iClientIdIndirect);
                        closeWindows();
                        var IndirectClientPopup = $window.open('#/filemanage/IndirectClient', "popup", "width=2000,height=750");
                        IndirectClientPopup.addEventListener("beforeunload", function () {
                            localStorage['parentId'] = ' ';
                            return false;
                        }, false);
                        openWindows.push(IndirectClientPopup);
                    } else {
                        notification('File Manager not available for this account.', 'warning');
                    }
                }
            }).error(errorCallback);
        }
        //$window.localStorage.setItem("IndirectClientId");
        /*if (angular.element("#" + frmId).valid()) {
            if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
                $routeParams.id = $window.localStorage.iUserId;
            }

            if ($scope.info.iClientId) {
                $scope.UpdatedId = $window.localStorage.getItem("session_iUpdatedId");
                $scope.userId = $window.localStorage.getItem("session_iUserId");
                if ($scope.UpdatedId != $scope.userId) {
                    $scope.info.iEditedBy = $window.localStorage.getItem("session_iUpdatedId");
                } else {
                    $scope.info.iEditedBy = 0;
                }
                rest.path = 'clientupdateindirect';
                rest.put($scope.info).success(function(data) {
                    closeWindows();
                    var IndirectClientPopup = $window.open('#/filemanage/IndirectClient', "popup", "width=2000,height=750");
                    IndirectClientPopup.addEventListener("beforeunload", function() {
                        localStorage['parentId'] = ' ';
                        return false;
                    }, false);
                    openWindows.push(IndirectClientPopup);
                }).error(errorCallback);
            } else {
                if ($scope.imageSrc) {
                    $scope.info.image = $scope.imageSrc;
                }
                $scope.fileId = angular.element('.fileId').text();
                $scope.info.fileId = $scope.fileId;

                rest.path = 'clientsaveindirect';
                rest.post($scope.info).success(function(data) {
                    closeWindows();
                    $window.localStorage.setItem("IndirectClientId", data.iClientId);

                    var IndirectClientPopup = $window.open('#/filemanage/IndirectClient', "popup", "width=2000,height=750");
                    IndirectClientPopup.addEventListener("beforeunload", function() {
                        localStorage['parentId'] = ' ';
                        return false;
                    }, false);
                    openWindows.push(IndirectClientPopup);
                }).error(errorCallback);
            }
        } else {
            notification('Please fill information', 'warning');
        }*/
    }

}).controller('basicinfoController', function ($scope, $log, $location, $route, fileReader, rest, $window, $rootScope, $routeParams, $uibModal, $cookieStore, $timeout, $translate, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.getItem("ShowuserName", "");
    $window.localStorage.setItem("clientpricelistdataId", " ");
    $scope.dateFormatGlobal = $window.localStorage.getItem("global_dateFormat");
    $scope.isValidMobileNumber = false;
    $timeout(function () {
        if ($window.localStorage.iUserId.length > 0) {
            $scope.redirectToClientViewId = '#/viewdirect/' + $window.localStorage.iUserId;
        } else {
            $scope.redirectToClientViewId = '#/client/1';
        }
    }, 100);

    //$uibModalInstance.dismiss('cancel');
    //$uibModalInstance.close();

    $timeout(function () {
        $scope.UpdateClientName = $window.localStorage.getItem("ShowuserName");
        $scope.showEditedByName = false;
        if ($routeParams.id) {
            $scope.showEditedByName = true;
        }
    }, 500);


    $scope.comapanyBranchError = function () {
        angular.element('.comapanyBranch').remove();
    }

    angular.element('.help-block').css('display', 'none');

    if ($routeParams.id) {
        $window.localStorage.setItem("contactclientId", $routeParams.id);
    }

    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    $scope.invoiceClassget = function (classname) {
        $scope.invoiceC = $window.document.getElementsByClassName(classname).length;
        if ($scope.invoiceC == 2) {
            $scope.invoice = true;
        }
    }


    $scope.clientNotes = function () {
        var clientnote = $scope.info.tMemo;
        if ($window.localStorage.clientnotice != clientnote && clientnote != undefined) {
            notification(clientnote, 'information');
        }
    }

    $scope.removeinvoice = function (id) {
        var invoiceLength = angular.element("[id^=invoiceCou]").length - 1;
        if (invoiceLength == id) {
            angular.element("#invoiceCou" + id).remove();
        } else {
            notification("Please delete from last record", "warning");
        }
    }

    
    // if ($window.localStorage.iUserId != '' && $window.localStorage.iUserId != undefined) {
    //     $routeParams.id = $window.localStorage.iUserId;
    // }

    // Europe country form json file
    // api - https://restcountries.com/v3.1/region/europe
    $scope.europeCountry = [];
    fetch('country-europe.json', { method: 'GET'}).then(function (response) {
        return response.json();
    })
    .then(function (data) {
        $scope.europeCountry = data;
        
    });
    $scope.stateOptional = '';

        
    if ($routeParams.id != '' && $routeParams.id != undefined) {
        $window.localStorage.iUserId = $routeParams.id;
        rest.path = 'client';
        rest.model().success(function (data) {
            $scope.imgshow = true;
            $scope.isNewClient = false;
            $scope.info = data;
            
            $window.localStorage.clientnamec = $scope.info.vUserName;
            $window.localStorage.clientnotice = $scope.info.tMemo;
            $window.localStorage.setItem("priceListClientId", $scope.info.iClientId);
            angular.element('#vProjectCoordinator').select2('data', { id: $scope.info.vProjectCoordinator });
            angular.element('#vProjectManager').select2('data', { id: $scope.info.vProjectManager });
            angular.element('#vQASpecialist').select2('data', { id: $scope.info.vQASpecialist });
            angular.element('#currencyCode').select2('data', { text: $scope.info.client_currency.split(',')[0] });

            angular.element('#projectBranch').select($scope.info.project_branch);
            setTimeout(() => {
                angular.element('#projectBranch').trigger('change');
            }, 2000);

            
            var flagTitle = JSON.parse(data.vPhone).countryTitle;
            var flagClass = JSON.parse(data.vPhone).countryFlagClass;
            var Ccode = flagClass.split(' ')[1];
            var CcodeNum = flagTitle.split(':')[1].trim();
            var FinalMobileNum = CcodeNum + JSON.parse(data.vPhone).mobileNumber;
            $timeout(function () {
                $('#userphone').intlTelInput("setNumber", FinalMobileNum);
                $scope.info.vPhone = JSON.parse(data.vPhone).mobileNumber;
                $scope.isValidMobileNumber = true;
            }, 300);
            // /*var flagTitle = JSON.parse(data.vPhone).countryTitle;
            // var flagClass = JSON.parse(data.vPhone).countryFlagClass;

            // $timeout(function() {
            //     var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').prop('title', flagTitle);
            //     var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').prop('class', flagClass);
            // }, 500);

            // $scope.info.vPhone = JSON.parse(data.vPhone).mobileNumber.trim();*/
            $scope.currentUserName = $window.localStorage.currentUserName = data.vUserName;

            if (data.address1Detail) {
                angular.forEach(JSON.parse(data.address1Detail), function (val, i) {
                    
                    angular.element('#' + val.id).val(val.value);
                    if(val.id == "address1_country"){
                        setTimeout(() => {
                            let euCountryEdt = $scope.europeCountry.filter(e => e.name.toLowerCase() === val.value.toLowerCase()).length > 0 ? true :false;
                            if(euCountryEdt){
                                $scope.stateOptional = '(Optional)';
                                $('#address1_administrative_area_level_1').removeAttr('required');
                            } 
                        }, 500);
                    }    
                });
            }

            if (data.address2Detail) {
                angular.forEach(JSON.parse(data.address2Detail), function (val, i) {
                    angular.element('#' + val.id).val(val.value);
                });
            }

            if (data.Invoice) {
                angular.forEach(JSON.parse(data.Invoice), function (val, i) {
                    angular.element('#' + val.selectInvoice).val(val.invoice);
                });

                $scope.email = JSON.parse(data.Invoice);
                for (var k = 0; k < $scope.email.length; k++) {
                    var Counter = k + 1;
                }

                if (Counter != " ") {
                    $scope.inputCounter = Counter;
                } else {
                    $scope.inputCounter = 1;
                }
            }

            $scope.address1 = JSON.parse(data.address1Detail);
            $scope.address2 = JSON.parse(data.address2Detail);
        }).error(errorCallback);
    } else {
        $scope.info = {};
        $scope.isNewClient = true;
        var currentdate = new Date();
        rest.path = "clientProfileNumber/1";
        rest.get().success(function (data) {
            $scope.info.vClientNumber = pad(data, 3);
            $scope.displayCreatorName = $window.localStorage.getItem("session_vUserName");
            $scope.info.created_id = $window.localStorage.getItem("session_iUserId");
        });

        $scope.info.dtCreationDate = currentdate;
    }
    if ($routeParams.id) {
        $scope.info = {};
        $scope.info.updatedBy_id = $window.localStorage.getItem("session_iUserId");
        $scope.info.updated_id = $routeParams.id;
        rest.path = 'clientBasicIdCheck';
        rest.post($scope.info).success(function (data) {
            $window.localStorage.setItem("ShowuserName", data.UpdatedBy_name);
            $window.localStorage.setItem("session_iUpdatedBasicClientId", data.UpdatedBy_id);
        }).error(errorCallback);
    }

    $scope.uType = $window.localStorage.userType;
    $scope.currentUserName = $window.localStorage.currentUserName;

    $scope.customerType = [{
        name: 'Direct Customer',
        value: 'Direct Customer'
    }, {
        name: 'Direct/Indirect Customer',
        value: 'Direct/Indirect Customer'
    }, {
        name: 'indirect customer',
        valumme: 'indirect customer'
    }];

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                if (file.type == 'image/jpeg' || file.type == 'image/jpg' || file.type == 'image/png' || file.type == 'image/gif') {
                    $scope.imgshow = false;
                    $scope.imageSrc = result;
                } else {
                    notification("Please select image", "error");
                }
            });
    };

    $scope.copytoship = function () {
        if ($scope.address1 != undefined && $scope.address1 != '') {
            $scope.address2 = $scope.address1;
            $scope.info.vAddress2 = $scope.info.vAddress1;
            angular.forEach($scope.address1, function (val, i) {
                angular.element('#address2_' + val.id).val(val.value);
            });
        }
    };

    $scope.checkemailaddress = function (data) {
        rest.path = 'checkclient';
        rest.post(data).success(function (data) { }).error(errorCallback);
    };



    $scope.inputCounter = [];
    $scope.inputCounter = 1;


    $scope.name = 'Please try entering something and click Add button';
    /* Mobile Validation START */
    $timeout(function () {
        var telInput = $("#userphone"),
            errorMsg = $("#error-msg"),
            validMsg = $("#valid-msg");
        var reset = function () {
            telInput.removeClass("error");
            errorMsg.addClass("hide");
            validMsg.addClass("hide");
        };

        telInput.blur(function () {
            reset();
            $timeout(function () {
                if ($.trim(telInput.val())) {
                    if (telInput.intlTelInput("isValidNumber")) {
                        $scope.isValidMobileNumber = true;
                        validMsg.removeClass("hide");
                        $('#error-msg').addClass('hide');
                    } else {
                        $scope.isValidMobileNumber = true;
                        //$scope.isValidMobileNumber = false;
                        $('#error-msg').removeClass('hide');
                    }
                }
            }, 200);
        });

        telInput.on("keyup change", reset);
    }, 200);
    /* Mobile Validation END */

    $scope.cityTimezone = function (id) {
        if(id){
            var city = $('#address1_locality').val();
            rest.path = "cityTimeZoneget/" + city;
            rest.get().success(function (data) {
                
                if (data != false) {
                    // if ($scope.info == undefined || $scope.info == null || $scope.info == "") {
                    //     $scope.info = {};
                    // }
                    //$scope.add1.timezone = data.timeZone;
                    angular.element('#address1_vTimezone').val(data.timeZone)
                }
            });
        }    
    }
    // Auto fill data - Not much accurate
    $scope.getLocationdetail = function (id) {
        // fetch('https://api.geoapify.com/v1/geocode/search?text='+ id +'&format=json&apiKey=52e8e340f8af4936bfb46512c9dbc3b5', { 
        // method: 'GET'
        // })
        // .then(function(response) { 
        //     return response.json(); })
        // .then(function(data) {
        //     if(data.results && data.results.length > 0){
        //         $scope.vCity1 = data.results[0].city;
        //         $scope.vState1 = data.results[0].state;
        //         $scope.vCountry1 = data.results[0].country;
        //         $scope.vZipcode1 = data.results[0].postcode;
        //     }
        // });
    }
    $scope.countryChange = function (country) {
        
        let countryName =  angular.element("#address1_country").val()
        let euCountry = $scope.europeCountry.filter(e => e.name.toLowerCase() === countryName.toLowerCase()).length > 0 ? true :false;
        if(euCountry){
            $scope.stateOptional = '(Optional)';
            $('#address1_administrative_area_level_1').removeAttr('required');
        }else{
            $scope.stateOptional = '';
            //$('#address1_administrative_area_level_1').attr("required","required");
        }        
    }    

    $scope.saveClientProfile = function (formId, isSavebtn) {
        //debugger
        if (angular.element("#" + formId).valid()) {
            //if (angular.element("#" + formId).valid() && $scope.isValidMobileNumber) {
                if ($scope.info.iClientId) {
                $scope.info.image = $scope.imageSrc;
                // if ($scope.info.vPhone == "" || $scope.info.vPhone == undefined || $scope.info.vPhone.length == 0) {
                //     notification('Please enter mobile number', 'warning');
                //     return false;
                // }
                var p = angular.element('#userphone').val();
                $scope.info.vPhone = p;
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                var invoiceDatatable = [];
                var invPus = [];

                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                for (var j = 0; j < angular.element("[id^=selectEmail_opetion_]").length; j++) {
                    var a = angular.element("#selectEmail_opetion_" + j).val();
                    var b = angular.element("#selectEmail_invoice_" + j).val();
                    if (a == '--Select Invoice--' && b != '') {
                        notification('Please select email option', 'warning');
                        angular.element("#selectEmail_opetion_" + j).focus().select();
                        return false;
                    }
                    if (a && b) {
                        var invPus = true;
                        invoiceDatatable.push({
                            invoiceid: a,
                            invoiceValue: b
                        });
                    } else {
                        var invPus = false;
                    }
                }

                if (invPus == true) {
                    $scope.info.invoice = JSON.stringify(invoiceDatatable);
                } else {
                    $scope.info.invoice = " ";
                }
                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').attr('class');

                var mobile = angular.element('#userphone').val();
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }
                    
                $scope.info.vPhone = JSON.stringify(countryObj);

                $scope.modified_id = $cookieStore.get('session_iUserId');
                $scope.info.modified_id = $scope.modified_id;
                $scope.info.address1Detail = JSON.stringify(address1);
                $scope.info.address2Detail = JSON.stringify(address2);

                // ---------address over -----------------//

                $scope.updatedBy_id = $window.localStorage.getItem("session_iUserId");
                $scope.Edited_id = $window.localStorage.getItem("session_iUpdatedBasicClientId");

                if ($scope.Edited_id != $scope.updatedBy_id) {
                    $scope.info.iEditedBy = $window.localStorage.getItem("session_iUpdatedBasicClientId");
                } else {
                    $scope.info.iEditedBy = 0;
                }

                if(($scope.info.vCodeRights).includes(',')){
                    $scope.info.vCodeRights = ($scope.info.vCodeRights).split(',').pop();
                }

                //$scope.info.tPoInfo = $scope.info.vUserName.split(' ').join('-').toLowerCase() + '-' + pad($scope.info.vClientNumber, 3)
                $scope.info.dtCreationDate = $filter('globalDtFormat')($scope.info.dtCreationDate);
                $scope.info.dtCreationDate = originalDateFormatNew($scope.info.dtCreationDate);
                $scope.info.dtCreationDate = moment($scope.info.dtCreationDate).format('YYYY-MM-DD HH:mm:ss');
                rest.path = 'clientsave';
                rest.put($scope.info).success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = $scope.info.iClientId;
                    $scope.logMaster.log_title = $scope.info.vUserName;
                    $scope.logMaster.log_type = "update";
                    $scope.logMaster.log_status = "direct_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    if(isSavebtn){
                        notification('Updated successfully', 'success');
                        //$location.path('/edit-client/'+$scope.Edited_id);
                    }else{
                        $location.path('/contact-person');
                    }
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($scope.imageSrc) {
                    $scope.info.image = $scope.imageSrc;
                }
                // if ($scope.info.vPhone == "" || $scope.info.vPhone == undefined || $scope.info.vPhone.length == 0) {
                //     notification('Please enter mobile number', 'warning');
                //     return false;
                // }

                var p = angular.element('#userphone').val();
                $scope.info.vPhone = p;

                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                var invoiceDatatable = [];
                var invPus = [];
                for (var l = 0; l < angular.element("[id^=selectEmail_opetion_]").length; l++) {
                    var a = angular.element("#selectEmail_opetion_" + l).val();
                    var b = angular.element("#selectEmail_invoice_" + l).val();
                    if (a == '--Select Invoice--' && b != '') {
                        notification('Please select email option', 'warning');
                        angular.element("#selectEmail_opetion_" + j).focus().select();
                        return false;
                    }
                    if (a && b) {
                        var invPus = true;
                        invoiceDatatable.push({
                            invoiceid: a,
                            invoiceValue: b
                        });
                    } else {
                        var invPus = false;
                    }
                }

                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                if (invPus == true) {
                    $scope.info.invoice = JSON.stringify(invoiceDatatable);
                } else {
                    $scope.info.invoice = " ";
                }
                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').attr('class');

                var mobile = angular.element('#userphone').val();
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }

                $scope.info.vPhone = JSON.stringify(countryObj);
                $scope.created_id = $cookieStore.get('session_iUserId');
                $scope.info.created_id = $scope.created_id;
                $scope.info.address1Detail = JSON.stringify(address1);
                $scope.info.address2Detail = JSON.stringify(address2);

                $scope.info.vCodeRights = $scope.info.vCodeRights;
                $scope.info.tPoInfo = $scope.info.vUserName.split(' ').join('-').toLowerCase() + '-' + pad($scope.info.vClientNumber, 3)
                
                $scope.info.dtCreationDate = $filter('globalDtFormat')($scope.info.dtCreationDate);
                $scope.info.dtCreationDate = originalDateFormatNew($scope.info.dtCreationDate);
                $scope.info.dtCreationDate = moment($scope.info.dtCreationDate).format('YYYY-MM-DD HH:mm:ss');
                // ---------address over -----------------//
                rest.path = 'clientsave';
                $scope.info.vClientNumber = $scope.info.vClientNumber.replace(/^0+/, '');

                rest.post($scope.info).success(function (data) {
                    $window.localStorage.iUserId = data.iClientId;
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = data.iClientId;
                    $scope.logMaster.log_title = $scope.info.vUserName;
                    $scope.logMaster.log_type = "add";
                    $scope.logMaster.log_status = "direct_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });

                    $window.localStorage.setItem("contactclientId", data.iClientId);
                    $window.localStorage.setItem("contactclientIdNew", data.iClientId);
                    $window.localStorage.setItem("priceListClientId", data.iClientId);
                    $window.localStorage.setItem("currentUserName", data.clientData.vUserName);
                    if(isSavebtn){
                        notification('Created successfully', 'success');
                        //$location.path('/edit-client/'+$scope.Edited_id);
                    }else{
                        $location.path('/contact-person');
                    }
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteInvoice = function (id) {
        if (angular.element(".test-count").length != 1)
            angular.element("#test-test").remove();
    }

    $scope.directClientFilemanager = function (id, frmId) {
        var fmanagerClient = $window.localStorage.getItem("clientFileMangerId");

        if ($routeParams.id == undefined && !fmanagerClient) {
            notification('Please create client.', 'warning');
        } else {
            if (fmanagerClient != null && fmanagerClient.trim().length != 0) {
                id = fmanagerClient;
            } else {
                id = $routeParams.id;
            }
            rest.path = 'client/' + id;
            rest.get().success(function (data) {
                if (!data) {
                    notification('Please create client.', 'warning');
                } else {
                    if (id == data.iClientId) {
                        closeWindows();
                        $window.localStorage.setItem("contactclientId", id);
                        $window.localStorage.setItem("contactclientIdNew", id);
                        closeWindows();
                        var clientPopup = $window.open('#/filemanage/client', "popup", "width=1000,height=650");
                        clientPopup.addEventListener("beforeunload", function () {
                            localStorage['parentId'] = ' ';
                            localStorage['contactclientId'] = '';
                            return false;
                        }, false);
                    } else {
                        notification('File Manager not available for this client.', 'warning');
                    }
                }
                
            }).error(errorCallback);
        }
        /*if (angular.element('#' + frmId).valid()) {
            if ($scope.info.iClientId) {
                $scope.info.image = $scope.imageSrc;
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                var invoiceDatatable = [];
                var invPus = [];

                angular.element("[id^=address1_]").each(function(i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function(i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                for (var j = 0; j < angular.element("[id^=selectEmail_opetion_]").length; j++) {
                    var a = angular.element("#selectEmail_opetion_" + j).val();
                    var b = angular.element("#selectEmail_invoice_" + j).val();
                    if (a && b) {
                        var invPus = true;
                        invoiceDatatable.push({
                            invoiceid: a,
                            invoiceValue: b
                        });
                    } else {
                        var invPus = false;
                    }
                }

                if (invPus == true) {
                    $scope.info.invoice = JSON.stringify(invoiceDatatable);
                } else {
                    $scope.info.invoice = " ";
                }
                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').attr('class');

                var mobile = angular.element('#userphone').val();
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }
                $scope.info.vPhone = JSON.stringify(countryObj);
                $scope.modified_id = $cookieStore.get('session_iUserId');
                $scope.info.modified_id = $scope.modified_id;
                $scope.info.address1Detail = JSON.stringify(address1);
                $scope.info.address2Detail = JSON.stringify(address2);
                // ---------address over -----------------//

                $scope.info.vCodeRights = $scope.info.vCodeRights
                $scope.updatedBy_id = $window.localStorage.getItem("session_iUserId");
                $scope.Edited_id = $window.localStorage.getItem("session_iUpdatedBasicClientId");

                if ($scope.Edited_id != $scope.updatedBy_id) {
                    $scope.info.iEditedBy = $window.localStorage.getItem("session_iUpdatedBasicClientId");
                } else {
                    $scope.info.iEditedBy = 0;
                }
                $scope.info.tPoInfo = $scope.info.vUserName.split(' ').join('-').toLowerCase() + '-' + pad($scope.info.vClientNumber, 3)
                rest.path = 'clientsave';
                rest.put($scope.info).success(function(data) {
                    closeWindows();
                    var clientPopup = $window.open('#/filemanage/client', "popup", "width=1000,height=650");
                    clientPopup.addEventListener("beforeunload", function() {
                        localStorage['parentId'] = ' ';
                        return false;
                    }, false);
                    openWindows.push(clientPopup);
                    $route.reload();
                }).error(errorCallback);
            } else {

                if ($scope.imageSrc) {
                    $scope.info.image = $scope.imageSrc;
                }
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                var invoiceDatatable = [];
                var invPus = [];
                for (var l = 0; l < angular.element("[id^=selectEmail_opetion_]").length; l++) {
                    var a = angular.element("#selectEmail_opetion_" + l).val();
                    var b = angular.element("#selectEmail_invoice_" + l).val();
                    if (a && b) {
                        var invPus = true;
                        invoiceDatatable.push({
                            invoiceid: a,
                            invoiceValue: b
                        });
                    } else {
                        var invPus = false;
                    }
                }

                angular.element("[id^=address1_]").each(function(i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function(i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                if (invPus == true) {
                    $scope.info.invoice = JSON.stringify(invoiceDatatable);
                } else {
                    $scope.info.invoice = " ";
                }

                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').attr('class');

                var mobile = angular.element('#userphone').val();
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }
                $scope.info.vPhone = JSON.stringify(countryObj);
                $scope.created_id = $cookieStore.get('session_iUserId');
                $scope.info.created_id = $scope.created_id;
                $scope.info.address1Detail = JSON.stringify(address1);
                $scope.info.address2Detail = JSON.stringify(address2);
                $scope.info.vCodeRights = $scope.info.vCodeRights;
                $scope.info.tPoInfo = $scope.info.vUserName.split(' ').join('-').toLowerCase() + '-' + pad($scope.info.vClientNumber, 3)
                // ---------address over -----------------//
                rest.path = 'clientsave';
                rest.post($scope.info).success(function(data) {
                    $window.localStorage.iUserId = data.iClientId;
                    $window.localStorage.setItem("contactclientId", data.iClientId);
                    $window.localStorage.setItem("priceListClientId", data.iClientId);
                    var clientPopup = $window.open('#/filemanage/client', "popup", "width=1000,height=650");
                    clientPopup.addEventListener("beforeunload", function() {
                        localStorage['parentId'] = ' ';
                        return false;
                    }, false);
                    $route.reload();
                }).error(errorCallback);
            }
        } else {
            notification('Please fill information.', 'warning');
        }*/

    }
    $scope.workingHour = function (id, table) {
        $routeParams.messageId = id;
        $window.localStorage.setItem("messageClientId", id);
        $routeParams.messageTable = table;
        $window.localStorage.setItem("messageClientTable", table);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/message.html',
            controller: 'messageController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            // debugger;
            $scope.selected = selectedItem;
            $route.reload();
        });
    };

}).controller('clientLoginController', function ($scope, $log, $location, $route, rest, $window, $rootScope, $routeParams, $timeout, $interval) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.currentUserName = $window.localStorage.currentUserName;
    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    angular.element('.help-block').css('display', 'none');

    $timeout(function () {
        $scope.redirectToClientViewId = $window.localStorage.iUserId;
    }, 100);

    // debugger;
    if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
        $routeParams.id = $window.localStorage.iUserId;
    }

    if ($routeParams.id) {
        $window.localStorage.userType = 2;
        $window.localStorage.priority = "customer";
        $rootScope.uType = 2;
        rest.path = 'clientdirect_login_details/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.clientlist1 = data;
            $scope.contactLoginEmpty = jQuery.isEmptyObject(data);
            angular.forEach(data, function (val, i) {
                var obj = '';
                for (var j = 0; j < val.vPassword.toString().length; j++) {
                    obj += "*";
                }
                $timeout(function () {
                    angular.element('#passwordLength' + i).text(obj);
                }, 100);
            });

        }).error(errorCallback);
    }

    $scope.getclientEdit = function (id) {
        rest.path = 'clientdirect_login_getone/' + id;
        rest.get().success(function (data) {
            $scope.clientlist = data;
        }).error(errorCallback);
    }

    $scope.deletelogindetail = function (id) {
        bootbox.confirm("Are you sure you want to delete this user?", function (result) {
        //bootbox.confirm("Are you sure you want to delete this user?<br/><strong>Please note that ALL Info. under this User will also be deleted</strong>", function (result) {
                if (result == true) {
                rest.path = 'deleteClient/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    }

    $scope.saveLogin = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.clientlist && $scope.clientlist.iClientId) {
                $routeParams.id = $scope.clientlist.iClientId;

                rest.path = 'update_directclientlogin';
                rest.put($scope.clientlist).success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = $scope.clientlist.iUserId;
                    $scope.logMaster.log_type = "update";
                    $scope.logMaster.log_status = "direct_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    //$location.path('client/1');
                    notification('Updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($window.localStorage.iUserId != undefined && $window.localStorage.iUserId != '') {
                    $routeParams.id = $window.localStorage.iUserId;
                }

                if ($routeParams.id) {
                    
                    if(!$scope.clientlist){
                        $scope.clientlist = {'iUserId': $routeParams.id}
                    }
                    $scope.clientlist.iUserId = $routeParams.id;
                    
                    rest.path = 'directclientlogin';
                    rest.post($scope.clientlist).success(function (data) {
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = $scope.clientlist.iUserId;
                        $scope.logMaster.log_type = "create";
                        $scope.logMaster.log_status = "direct_cli";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                        //$location.path('client/1');
                        notification('Created successfully.', 'success');
                        $route.reload();
                    }).error(errorCallback);
                        
                } else {
                    notification('Please create user.', 'warning');
                }
            }
        }
    };

    $scope.deleteClient = function (id) {
        bootbox.confirm("Are you sure you want to delete this user?<br/><strong>Please note that ALL Info. under this User will also be deleted</strong>", function (result) {
            if (result == true) {
                rest.path = 'deleteClient/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('jobstatusReportController', function ($scope, $rootScope, $log, $location, $route, rest, $routeParams, $window, $uibModal) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.clientnamec = "";

    //export to excel
    $scope.exportData = function () {
        var count = 0;
        for (var i = 0; i <= angular.element('[id^=orderCheckData]').length; i++) {
            if ($("#orderCheck" + i).prop('checked') == true) {
                count++;
            }
        }
        if (count == 0) {
            notification('Please select record to export', 'information');
        }
        if (count > 0) {
            for (var i = 0; i <= angular.element('[id^=orderCheckData]').length; i++) {
                if ($("#orderCheck" + i).prop('checked') == true) {
                    $("#Export_" + i).show()
                } else {
                    $("#Export_" + i).hide()
                }
            }
            var blob = new Blob([document.getElementById('exportable').innerHTML], {
                type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
            });
            saveAs(blob, "Jobs-status-report.xls");
            $scope.jobstatusReportsearch();
        }

    };

    //current year get
    $scope.date = new Date();
    var year = $scope.date.getFullYear();
    $scope.Currentyear = year.toString().substr(2, 2);

    
    // $scope.storeScoopOrders = function(){
    //     $window.localStorage.scoopReport = JSON.stringify($scope.orderReport);
    // }
    // $rootScope.$on('$locationChangeSuccess', function() {
    //     $rootScope.jobLocation = $location.path();
    // });        
    // $rootScope.$watch(function () {return $location.path()}, function (newLocation, oldLocation) {

    //     if($rootScope.jobLocation === newLocation && $rootScope.jobLocation == '/Jobs-status-report') {
            
    //         console.log('$rootScope.jobReport===',$rootScope.jobReport )
    //         // if($rootScope.jobReport){
    //         //     $rootScope.jobReport = $scope.jobReport;
    //         //     console.log('$scope.scoopReport---AFTER', $scope.orderReport)
    //         //     $scope.jobstatusReportsearch('job-status-report','middle')
    //         // }    
    //     }
    // });
    
    //Job report search start
    $scope.jobstatusReportsearch = function (frmId, eID) {

        if ($scope.jobReport == undefined || $scope.jobReport == null || $scope.jobReport == "") {
            notification('Please Select option', 'information');
        } else if (jQuery.isEmptyObject($scope.jobReport) == true) {
            notification('Please Select option', 'information');
            $route.reload();
        } else {
            //$window.localStorage.jobReport = JSON.stringify($scope.jobReport);
            $rootScope.jobReport = $scope.jobReport
            if ($scope.jobReport.startCreateDate) {
                $scope.jobReport.createDateFrom = originalDateFormatNew($scope.jobReport.startCreateDate);
            }
            if ($scope.jobReport.endCreateDate) {
                $scope.jobReport.createDateTo = originalDateFormatNew($scope.jobReport.endCreateDate);
            }
            if ($scope.jobReport.itemDuedate) {
                $scope.jobReport.itemDuedateStart = originalDateFormatNew($scope.jobReport.itemDuedate);
            }
            if ($scope.jobReport.endItemDuedate) {
                $scope.jobReport.itemDuedateEnd = originalDateFormatNew($scope.jobReport.endItemDuedate);
            }
            // rest.path = 'statusJobReportFind';
            // rest.get().success(function(data) {
            //     $scope.statusResult = data;
            
            // })
            rest.path = 'statusJobReportFilter';
            rest.post($scope.jobReport).success(function (data) {
                console.log('data', data)
                $scope.statusResult = data;
            })
            scrollToId(eID);
        }
    }

    $scope.reseteSearch = function (frmId) {
        $route.reload();
    }

    // call fn when back to page
    if($rootScope.jobReport){
        $scope.jobstatusReportsearch('job-status-report','middle')
    }

    //serch data action
    $scope.statucOrderAction = function (action) {
        switch (action) {
            case "Change status to":
                $scope.jobStatus = true;
                break;
            case "Remove selection":
                $scope.jobStatus = false;
                break;
            case "Export to excel":
                $scope.jobStatus = false;
                break;
            case "Select all":
                $scope.jobStatus = false;
                break;
        }
    }
    //search data action
    $scope.statusAction = function (action) {
        
        switch (action) {
            case "Change status to":
                var jobStatus = angular.element('#jobStatusdata').val();
                for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                    var jobselect = angular.element('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                    if (jobselect == 'true') {
                        var jobId = angular.element('#orderCheckData' + i).val();
                        $routeParams.id = jobId;
                        rest.path = 'jobsearchStatusUpdate/' + $routeParams.id + '/' + jobStatus;
                        rest.get().success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
                break;
            case "Remove selection":
                // bootbox.confirm("Are you sure you want to delete?", function(result) {
                //     for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                //         var jobselect = angular.element('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                //         if (jobselect == 'true') {
                //             var jobId = angular.element('#orderCheckData' + i).val();
                //             if (result == true) {
                //                 rest.path = 'jobsearchStatusDelete/' + jobId;
                //                 rest.delete().success(function(data) {
                //                     $route.reload();
                //                 }).error(errorCallback);
                //             }
                //         }
                //     }
                // });
                // break;
                $scope.checkdata = false;
                for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                    var itemselect = angular.element('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                    if (itemselect == 'true') {
                        var jobId = angular.element('#orderCheckData' + i).val();
                        $("#orderCheck" + i).prop("checked", false);
                    }
                }
                break;
            case "Export to excel":
                var count = 0;
                for (var i = 0; i <= angular.element('[id^=orderCheckData]').length; i++) {
                    if ($("#orderCheck" + i).prop('checked') == true) {
                        count++;
                    }
                }
                if (count == 0) {
                    notification('Please select record to export', 'information');
                }

                if (count > 0) {
                    for (var i = 0; i <= angular.element('[id^=orderCheckData]').length; i++) {
                        if ($("#orderCheck" + i).prop('checked') == true) {
                            $("#Export_" + i).show()
                        } else {
                            $("#Export_" + i).hide();
                            $("#Export_" + i).remove();
                        }
                    }
                    var blob = new Blob([document.getElementById('exportable').innerHTML], {
                        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                    });
                    saveAs(blob, "Jobs-status-report11.xls");
                    $scope.jobstatusReportsearch();
                }
                break;
            case "Select all":
                $scope.checkdata = "ordercheck";
                break;
        }
    }

    //mail contactpreson and resources
    $scope.jobsumResource = function (resourceName, jobSummeryId) {
        $window.localStorage.ResourceMsg = resourceName;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/jobresourcemsg.html',
            controller: 'jobResourceMsgController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
    }

    // job popup
    $scope.jobNoDetails = function (id) {
        console.log('id', id)
        //scrollBodyToTop();
        //$location.path('job-summery-details/' + id);
        $routeParams.id = id;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/jobEditPopup.html',
            controller: 'jobSummeryDetailsController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
    }

    //remove job search 
    $scope.clearCode = function (frmId, action) {
        $rootScope.jobReport = '';
        switch (action) {
            case "companyCode":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.companyCode = '';
                    angular.element('#companyCode1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "contactPerson":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.contactPerson = '';
                    angular.element('#contactPerson1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "resource":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.resource = '';
                    angular.element('#resource1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "customer":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.customer = '';
                    angular.element('#customer1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "serviceGroup":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.serviceGroup = '';
                    angular.element('#serviceGroup1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "projectType":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.projectType = '';
                    angular.element('#projectType1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "jobStatus":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.jobStatus = '';
                    angular.element('#jobStatus1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "itemStatus":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.itemStatus = '';
                    angular.element('#itemStatus1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "userTypes":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.orderTypes = '';
                    angular.element('#userTypes1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "itemDuedate":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.itemDuedate = '';
                    angular.element('#itemDuedate').text;
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                        $scope.jobReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "endItemDuedate":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.endItemDuedate = '';
                    angular.element('#endItemDuedate').text;
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                        $scope.jobReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "startCreateDate":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.startCreateDate = '';
                    angular.element('#startCreateDate').text;
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                        $scope.jobReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "endCreateDate":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.endCreateDate = '';
                    angular.element('#endCreateDate').text;
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                        $scope.jobReport = undefined;
                        $scope.checkOrderItem = undefined;
                    }
                }
                break;
            case "sourceLanguage":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.sourceLanguage = '';
                    angular.element('#sourceLanguage1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "targetLanguage":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.targetLanguage = '';
                    angular.element('#targetLanguage1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "currency":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.currency = '';
                    angular.element('#currency').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;

        }
    }

}).controller('invoiceInternalController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $route, $uibModal, $q, invoiceDuePeriodDays) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    var allInvoiceListArr = [];
    $scope.getData = function () {
        rest.path = "viewAllInvoice1/save";
        rest.get().success(function (data) {
            
            $scope.invoiceList = data;
            $scope.getAllInvoice = data;
            allInvoiceListArr = data;
            
            $scope.invoiceStatus = [];
            for (var i = 0; i < data.length; i++) {
                $scope.invoiceStatus[i] = true;
                data[i].freelance_currency = data[i].freelance_currency ? data[i].freelance_currency.split(',')[0] : 'EUR'; 
                
                const invoice_duedate = TodayAfterNumberOfDays(data[i].created_date, invoiceDuePeriodDays);
                
                var ckey = $scope.invoiceList.length;
                if (ckey > 0)
                    $scope.invoiceList[i].invoice_duedate = invoice_duedate;

            }

            // if (val.invoice_status == 'Complete') {
            //     $scope.invoiceCompleted.push(val);
            //     var ckey = $scope.invoiceUnpaid.length;
            //     if(ckey>0)
            //     $scope.invoiceUnpaid[ckey-1].invoice_duedate = invoice_duedate;
            // } else {
            //     $scope.invoiceUnpaid.push(val);
            //     var ukey = $scope.invoiceUnpaid.length;
            //     if(ukey>0)
            //     $scope.invoiceUnpaid[ukey-1].invoice_duedate = invoice_duedate;
            // }

        }).error(errorCallback);
    }
    $scope.getData();

    $scope.dateToday = new Date();
    //----- ****** Start Invoice Tabs Linguist    ****** --------//
    $scope.invcList_tabFilter = function () {
        var deferred = $q.defer();

        $scope.allInvcData = [];
        $scope.openInvc = [];
        $scope.approvedInvc = [];
        $scope.completeInvc = [];
        $scope.partPaidInvc = [];
        $scope.irrecoverableInvc = [];
        $scope.cancelledInvc = [];
        $scope.overdueInvc = [];
        // -- Invoice count -- //
        $scope.openInvcCount = 0;
        $scope.approvedInvcCount = 0;
        $scope.completedInvcCount = 0;
        $scope.partPaidInvcCount = 0;
        $scope.noRecoverInvcCount = 0;
        $scope.cancelledInvcCount = 0;
        $scope.overdueInvcCount = 0;
        
        rest.path = "viewAllInvoice1/save";
        rest.get().success(function (data) {
            $scope.clientInvoiceListData = data;
            
            angular.forEach($scope.clientInvoiceListData, function (val, i) {
                let invoicePeriod = val.invoice_no_of_days ? val.invoice_no_of_days : invoiceDuePeriodDays
                var invoice_duedate = TodayAfterNumberOfDays(val.created_date, invoicePeriod);
                val.invoice_duedate = invoice_duedate;
                var InDuedate = new Date(invoice_duedate); 
                
                val.freelance_currency = val.freelance_currency ? val.freelance_currency.split(',')[0] : 'EUR'; 
                
                $scope.allInvcData.push(val);
                if (val.invoice_status == 'Open') {
                    $scope.openInvcCount++;
                    $scope.openInvc.push(val);
                }
                if (val.is_approved == 1 && val.invoice_status != 'Complete') {
                    $scope.approvedInvcCount++;
                    $scope.approvedInvc.push(val);
                }
                if (val.invoice_status == 'Complete') {
                    $scope.completedInvcCount++;
                    $scope.completeInvc.push(val);
                }
                // if (val.invoice_status == 'Part Paid') {
                //     $scope.partPaidInvcCount++;
                //     $scope.partPaidInvc.push(val);
                // } 
                if (val.invoice_status == 'Cancel') {
                    $scope.cancelledInvcCount++;
                    $scope.cancelledInvc.push(val);
                }
                if(new Date(InDuedate) < $scope.dateToday && !['Paid','Complete'].includes(val.invoice_status) ){
                    $scope.overdueInvcCount++ 
                    $scope.overdueInvc.push(val);
                }
                //Due date counts for Invoice
            });
            //deferred.resolve($scope.openInvc);
            //deferred.resolve($scope.completeInvc);
            //deferred.resolve($scope.partPaidInvc);
            //deferred.resolve($scope.irrecoverableInvc);
            deferred.resolve($scope.allInvcData);

        }).error(function () {
            deferred.reject();
        });    

        return deferred.promise;
    };

    $scope.invcStatusRecord = function (invcStatus) {
        
        if (invcStatus) {
            $scope.invcstatusFilter = invcStatus;
            //$scope.invoiceListAll = [];
            $scope.showDataLoaderJob = true;
        } else {
            $scope.invcstatusFilter = 'all';
            //$scope.invcstatusFilter = '';
        }
        $scope.invoiceActive = $scope.invoiceActive == invcStatus ? '' : invcStatus;
        // Uncheck checkbox
        $('input[id^=checkAll]:checkbox').removeAttr('checked');
        // $scope.invcList_tabFilter()
        // .then(function (invoicePromiseData) {
                $scope.allInvcCount = $scope.allInvcData.length;
                /* All Invoice list for widget */
                switch ($scope.invcstatusFilter) {
                    case "all":
                        $scope.invoiceListAll = $scope.allInvcData;
                        break;
                    case "Open":
                        $scope.invoiceListAll = $scope.openInvc;
                        break;
                    case "Approved":
                        $scope.invoiceListAll = $scope.approvedInvc;
                        break;   
                    case "Completed":
                        $scope.invoiceListAll = $scope.completeInvc;
                        break;
                    // case "Part Paid":
                    //     $scope.invoiceListAll = $scope.partPaidInvc;
                    //     break;
                    case "Overdue":
                        $scope.invoiceListAll = $scope.overdueInvc;
                        break;    
                    case "Cancelled":
                        $scope.invoiceListAll = $scope.cancelledInvc;
                        break;            
                }
                // if ($scope.invcstatusFilter == 'all') {
                //     $scope.invoiceListAll = $scope.allInvcData;
                // }
                //const sortedActivities = jobOverDue.sort((a, b) => new Date(a.due_date) - new Date(b.due_date) )
                if ($scope.invoiceListAll) {
                    $scope.invoiceListAll = $scope.invoiceListAll;
                }
                /* Start Upcoming Due Invoice - widgetBox */
                $scope.showDataLoaderJob = false;
                /* End */
        //})    
    };

    $scope.invcList_tabFilter()
        .then(function (invoicePromiseData) {
            $scope.invcStatusRecord('all');
    });
    // ****** END invioce TABS ******* //

    $scope.invoiceCheck = function (status, id, statusId) {
        var obj = [];
        obj.push({
            "Invoice_cost": $scope.invoiceList[id].Invoice_cost,
            "paid_amount": $scope.invoiceList[id].paid_amount,
            "statusId": statusId
        });
        for (var i = 0; i < $scope.invoiceStatus.length; i++) {
            $scope.invoiceStatus[i] = true;
        }

        if (status == "Paid") {
            // var modalInstance = $uibModal.open({
            //     animation: $scope.animationsEnabled,
            //     templateUrl: 'tpl/invoiceAmount.html',
            //     controller: 'invoiceAmountController',
            //     size: '',
            //     resolve: {
            //         items: function() {
            //             return obj;
            //         }
            //     }
            // });
            // modalInstance.result.then(function(selectedItem) {
            //     $route.reload();
            // });
        } else {
            $scope.invoiceStatus[id] = false;
        }
    }

    $scope.invoiceStatusChange = function (status, id, statusId) {
        var obj = [];
        obj.push({
            "Invoice_cost": $scope.invoiceList[(id - 1)].Invoice_cost,
            "paid_amount": $scope.invoiceList[(id - 1)].paid_amount,
            "statusId": statusId
        });

        if (status == "Paid") {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/invoiceAmount.html',
                controller: 'invoiceAmountController',
                size: '',
                resolve: {
                    items: function () {
                        return obj;
                    }
                }
            });
            modalInstance.result.then(function (selectedItem) {
                $route.reload();
            });
        } else {
            $scope.invoice = {};
            $scope.invoice.invoice_status = status;
            
            $scope.invoice.paid_amount = " ";
            $routeParams.id = statusId;

            rest.path = "invoiceStatusChange";
            rest.put($scope.invoice).success(function (data) {
                $route.reload();
            });
        }
    }

    // Remove Element from array
    function arrayRemove(arr, value) { 
        return arr.filter(function(ele){ 
            return ele != value; 
        });
    }

    $scope.checkedIds = [];
    $scope.checkInvoiceIds = function(id){
        //var result = arrayRemove(array, 6);
        if(id){
            if(id == 'all'){
                let isCheckedAll = $('#checkAll').is(':checked') ? 'true' : 'false';
                if(isCheckedAll == 'true'){
                    $("input[id^=invoiceCheck]:checkbox").prop("checked", true);
                    for (var i = 0; i < angular.element('[id^=invoiceCheck]').length; i++) {
                        var invoiceselected = $('#invoiceCheck' + i).is(':checked') ? 'true' : 'false';
                        if (invoiceselected == 'true') {
                            var invoiceIds = angular.element('#invoiceCheckData' + i).val();
                            $scope.checkedIds.push(invoiceIds.toString());
                        }
                    }        
                }else{
                    $('input[id^=invoiceCheck]:checkbox').removeAttr('checked');
                    $('input[id^=checkAll]:checkbox').removeAttr('checked');
                    //$('#checkAll').removeAttr('checked');
                    $scope.checkedIds = [];
                }
            }else{
                let isChecked = $('.invoiceCheck' + id).is(':checked') ? 'true' : 'false';
                if(isChecked == 'true')
                    $scope.checkedIds.push(id.toString());
                else
                    $scope.checkedIds = arrayRemove($scope.checkedIds, id);
            }        
        }    
                        
    }

    $scope.dtExcelTable = function(type){
        if(type=='create-date')    
            $("#crExdate").trigger( "click" );
        if(type=='due-date')    
            $("#dueExdate").trigger( "click" );
        if(type=='payment-date')    
            $("#paymentExdate").trigger( "click" );        
    }
    //Linguist Invoice export to excel
    $scope.exportData = function () {
        $("#exportable .dt-loading" ).remove();
        if($scope.checkedIds.length > 0){
            $scope.getAllInvoice = $scope.getAllInvoice.filter(function (getAllInvoice) { return $scope.checkedIds.includes(getAllInvoice.invoice_id.toString()) });
            $scope.invoiceListAll = $scope.invoiceListAll.filter(function (getAllInvoice) { return $scope.checkedIds.includes(getAllInvoice.invoice_id.toString()) });
        }
        setTimeout(() => {
        
            // var blob = new Blob([document.getElementById('exportable').innerHTML], {
            //     type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
            // });
            // saveAs(blob, "Linguist Invoice Report.xls");
            exportTableToExcel('exportable2','Linguist Invoice Report')

            rest.path = 'freelanceInvoiceExcelStatus';
            rest.post($scope.checkedIds).success(function (data) {
                if (data.status == 200) {
                    $route.reload();
                    //notification('File downloaded successfully', 'success');
                    $scope.checkedIds = [];
                }
            }).error(errorCallback);
            $scope.getAllInvoice = allInvoiceListArr
            // Remove selected
            $('input[id^=invoiceCheck]:checkbox').removeAttr('checked');
            $('input[id^=checkAll]:checkbox').removeAttr('checked');

        }, 500);

    };

    //search data action
    $scope.statusAction = function (action) {
        var invoiceStatus = angular.element('#invoiceStatusdata').val();
        const inStatus = invoiceStatus.split(',')

        var i, j, totalChecked, successMsg;
        i = j = totalChecked = successMsg = 0;
        if(inStatus.length == 2){
            for (var i = 0; i < angular.element('[id^=invoiceCheckData]').length; i++) {
                var invoiceselect = $('#invoiceCheck' + i).is(':checked') ? 'true' : 'false';
                const invoiceCheckLength = angular.element('[id^=invoiceCheckData]').length;
                if (invoiceselect == 'true') {
                    var invoiceId = angular.element('#invoiceCheckData' + i).val();
                    totalChecked++;
                    $scope.invoice = {};
                    $scope.invoice.invoice_status = (inStatus.length > 0) ? inStatus[1] : invoiceStatus;
                    $scope.invoice.paid_amount = " ";
                    $scope.invoice.is_update = 'is_update';

                    var obj = {
                        "Invoice_cost": $scope.invoiceList[i].Invoice_cost,
                        "paid_amount": $scope.invoiceList[i].paid_amount,
                        "statusId": invoiceId
                    };
                    if ($scope.invoice.invoice_status == 'Paid' || $scope.invoice.invoice_status == 'Part Paid' || $scope.invoice.invoice_status == 'Completed') {
                        var modalInstance = $uibModal.open({
                            animation: $scope.animationsEnabled,
                            templateUrl: 'tpl/invoiceAmount.html',
                            controller: 'invoiceAmountController',
                            size: '',
                            resolve: {
                                items: function () {
                                    return obj;
                                }
                            }
                        });
                        modalInstance.result.then(function (selectedItem) {
                            $route.reload();
                        });
                    } else {
                        $routeParams.id = invoiceId;
                        rest.path = "invoiceStatusChange";
                        rest.put($scope.invoice).success(function (data) {
                            if (i == invoiceCheckLength) {
                                if(data.status ==200){
                                    successMsg++;
                                    //notification('Status Updated successfully.', 'success');
                                }
                                $route.reload();
                            }
                        });
                    }
                }
                j++;
            }
            if(i == j){
                if(totalChecked == 0)
                    notification('Please select invoice.', 'warning');
                setTimeout(() => {
                    if(successMsg>0){
                        notification('Status Updated successfully.', 'success')
                    }
                }, 500);
            }
        }else{
            notification('Please select status.', 'warning');
        }    
    }

    // Download PDF
    $scope.pdfInvoice = function (id) {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/linguist_invoicePdf.html',
            controller: 'linguistInvoicePdfController',
            //size: '',
            //width: 1000,
            resolve: {
                items: function () {
                    return id;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
            $route.reload();
        });
    }

}).controller('clientInvoiceShowController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $route, $uibModal, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.is_disabled = false;
    $scope.editInvoiceField = true;
    $scope.editDisabled = false;
    $scope.currencyType = 'EUR';
    $scope.viewBtn = true;
    $scope.invoiceNumOfdays = 30;
    //$scope.noneCls = "none"
    $scope.invoicePaid = function (frmId) {
        var obj = {
            "Invoice_cost": $scope.invoiceList[0].Invoice_cost,
            "paid_amount": $scope.invoiceList[0].paid_amount,
            "statusId": $scope.invoiceList[0].invoice_id,
            "Currency": $scope.invoiceList[0].Currency
        };
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/clientInvoiceAmount.html',
            controller: 'clientInvoiceAmountController',
            size: '',
            resolve: {
                items: function () {
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            $route.reload();
        });
    }

    $scope.vatTax = 0;
    //change jobitem price module
    $scope.changeInvoiceField = function (index, parentIndex, itemVal = 0, type = '') {
        var invoiceSum = 0;
        $(".invoiceCal").each(function (indx) {
            var invPrice = numberFormatCommaToPoint(this.value)
            if (!isNaN(invPrice) && this.value.length != 0) {
                //let amountTaxRate = taxRateAmountCalc(invPrice, $scope.invoiceList[0].tax_rate);
                //let itemPriceTax1 = parseFloat(invPrice) + parseFloat(amountTaxRate);                        
                //$('#priceWithTax'+indx).text($filter('customNumber')(itemPriceTax1));
                //$scope.invoiceTotal = $filter('customNumber')(itemPriceTax1);
                //invoiceSum += parseFloat(itemPriceTax1);
                let itemPriceTax = parseFloat(invPrice);                        
                $('#priceWithTax'+indx).text($filter('customNumber')(itemPriceTax));
                invoiceSum += parseFloat(invPrice);
            }
        });

        // if ($scope.vat.indexOf(',') > -1) {
        //     $scope.vat = numberFormatCommaToPoint($scope.vat);
        // }
        // if (type == 'vat') {
        //     $scope.vat = numberFormatCommaToPoint(itemVal);
        //     var invoiceTotal = $scope.invoiceTotal
        //     if ($scope.invoiceTotal.indexOf(',') > -1) {
        //         invoiceTotal = numberFormatCommaToPoint($scope.invoiceTotal);
        //     }
        //     $scope.grandTotal = parseFloat(invoiceTotal) + parseFloat($scope.vat);
        // }
        if (type == 'invoiceTotal') {
            $scope.invoiceTotal = numberFormatCommaToPoint(itemVal);
            
            $scope.grandTotal = parseFloat($scope.invoiceTotal) + parseFloat($scope.vat);
        }
        if (type == 'itemPrice') {
            $scope.vatAmount = taxRateAmountCalc(invoiceSum, $scope.vatTax);
            //$scope.grandTotal = parseFloat(invoiceSum) + parseFloat($scope.vat);
            $scope.grandTotal = parseFloat(invoiceSum) + parseFloat($scope.vatAmount);
            $scope.invoiceTotal = $filter('customNumber')(invoiceSum);
            $scope.totalDue = $scope.grandTotal - $scope.invoiceList[0].paid_amount;
            //$scope.totalDue = invoiceSum - $scope.invoiceList[0].paid_amount;
            //$scope.invoiceList[0].Invoice_cost
            //$scope.vat = $filter('customNumber')($scope.vat);
            angular.element('#invSubtotal').val($scope.invoiceTotal);
        }
    }

    if ($routeParams.id) {
        rest.path = "clientInvoiceViewOne/" + $routeParams.id;
        rest.get().success(function (data) {
            
            $scope.invoiceDetail = data[0];
            
            if ($scope.invoiceDetail.clientVatinfo) {
                const clientPayment = JSON.parse($scope.invoiceDetail.clientVatinfo);
                $scope.invoiceDetail.clientVatinfo = clientPayment.tax_id ? clientPayment.tax_id : '';
            }
            $scope.vatNo = '';
            $scope.clientCity = $scope.clientCountry = $scope.clientZipcode = $scope.clientState = '';
            if ($scope.invoiceDetail.companyAddressDtl) {
                let clientAddDetail = JSON.parse($scope.invoiceDetail.companyAddressDtl);
                angular.forEach(clientAddDetail, function (clientAddress, i) {
                    if (clientAddress.id == 'address1_locality') {
                        $scope.clientCity = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_administrative_area_level_1') {
                        $scope.clientState = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_country') {
                        $scope.clientCountry = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_postal_code') {
                        $scope.clientZipcode = clientAddress.value;
                    }
                })
            }
            rest.path = "customerpriceAll/1";
            rest.get().success(function (dataPrice) {
                
                dataPrice.filter( (el) =>{
                    if(el.resource_id == $scope.invoiceDetail.clientId){
                        //$scope.currencyType = el.price_currency.includes(',') ?  el.price_currency.split(',')[0] : 'EUR';
                    }
                })
            }) 
            $scope.currencyType = $scope.invoiceDetail && $scope.invoiceDetail.client_currency.includes(',') ?  $scope.invoiceDetail.client_currency.split(',')[0] : 'EUR';
            $scope.invoiceDetail.tax_rate = $scope.invoiceDetail.tax_rate ? $scope.invoiceDetail.tax_rate : 0; 
            $scope.vatTax = $scope.invoiceDetail.tax_rate;
            $scope.vatAmount = 0;
            //$scope.invoiceDetail.invoice_date = moment($scope.invoiceDetail.invoice_date).format($window.localStorage.getItem('global_dateFormat'));
            rest.path = "getUserDataById/" + $scope.invoiceDetail.freelanceId;
            rest.get().success(function (dataUser) {
                //$scope.userData = dataUser.userData;
                $scope.userPaymentData = dataUser.userPaymentData;
                //var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                var vBankInfo = $scope.invoiceDetail['vBankInfo'][0];
                $scope.vBankInfo = $scope.invoiceDetail['vBankInfo'][0];
                //$scope.currencyType = vBankInfo.currency_code.split(',')[1];
                //$scope.currencyType = vBankInfo.currency_code;

                //$scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                $scope.currencyPaymentMethod = 'Bank Transfer';
                $scope.vBankInfo.currency_code = 'EUR';
                //$scope.currencyType = '€ ';
                if ($scope.currencyPaymentMethod == 'Bank Transfer') {
                    $timeout(function () {
                        $("#Bank").prop('checked', true);
                    }, 100);
                } else {
                    $timeout(function () {
                        $("#Paypal").prop('checked', true);
                    }, 100);
                }
                $scope.invoiceDetail.payment = $scope.currencyPaymentMethod;

            }).error(errorCallback);

            $scope.invoiceList = data;
            
            $scope.invoiceNumOfdays = data[0].number_of_days;
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(data[0].invoice_date, $scope.invoiceNumOfdays);
            $scope.invoiceDetail.invoice_date = $filter('globalDtFormat')(TodayAfterNumberOfDays($scope.invoiceDetail.invoice_date, 0));
            
            //$scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            //$scope.invoiceDetail.paymentDueDate = moment($scope.invoiceDetail.paymentDueDate).format($window.localStorage.getItem('global_dateFormat'));

            if($scope.invoiceDetail.freelancePhone){
                var mobileNo = JSON.parse($scope.invoiceDetail.freelancePhone).mobileNumber;
                var countryCode = JSON.parse($scope.invoiceDetail.freelancePhone).countryTitle;
                $scope.invoiceDetail.freelancePhone = '(' + countryCode.split(':')[1].trim() + ')' + ' ' + mobileNo;
            }

            if($scope.invoiceDetail.companyPhone){
                var mobileNo1 = JSON.parse($scope.invoiceDetail.companyPhone).mobileNumber;
                var countryCode1 = JSON.parse($scope.invoiceDetail.companyPhone).countryTitle;
                $scope.invoiceDetail.companyPhone = '(' + countryCode1.split(':')[1].trim() + ')' + ' ' + mobileNo1;
            }

            //$scope.vat = $scope.invoiceDetail.vat ? $scope.invoiceDetail.vat : 0;
            //$scope.invoiceTotal = $scope.invoiceDetail.item_total ? $scope.invoiceDetail.item_total : 0;
            $scope.invoiceTotal = 0;
            var invoiceTotal = $scope.invoiceTotal;
            $scope.grandTotal = 0;
            angular.forEach($scope.invoiceList, function (val, i) {
                
                if (val.item) {
                    var itemTotal = 0;
                    angular.forEach(val.item, function (v, i2) {
                        //$scope.invoiceTotal += v.itemTotal;
                        itemTotal += v.itemTotal;
                    })
                    //$scope.invoiceList[i].item.itemTotalVal = $filter('customNumber')(itemTotal);
                }
                
                $scope.invoiceTotal += parseFloat(val.scoop_value);
                $scope.invoiceList[i].item.itemTotalVal = $filter('customNumber')(val.scoop_value);
                $scope.invoiceList[i].item.priceWithTax = parseFloat(val.scoop_value);
            })
            //$scope.grandTotal = parseFloat($scope.invoiceTotal) + parseFloat($scope.vat);
            $scope.vatAmount = taxRateAmountCalc(parseFloat($scope.invoiceTotal), $scope.vatTax);
            $scope.grandTotal = parseFloat($scope.invoiceTotal) + parseFloat($scope.vatAmount);
            //$scope.grandTotal = parseFloat($scope.invoiceTotal);
            $scope.invoiceList[0].Invoice_cost = $scope.grandTotal;
            //$scope.invoiceList[0].Invoice_cost = $scope.invoiceTotal;
            $scope.totalDue = $scope.invoiceList[0].Invoice_cost - $scope.invoiceList[0].paid_amount;
            
            $scope.invoiceTotal = (invoiceTotal.toString().includes(',')) ? $scope.invoiceTotal : $filter('customNumber')($scope.invoiceTotal);
            //$scope.vat = $filter('customNumber')($scope.vat);
            if($scope.invoiceList[0].paid_amount > 0){
                $scope.dueAmountText = 'DUE AMOUNT'; 
            }

            if ($scope.invoiceDetail.invoice_status == 'Irrecoverable') {
                angular.element('#irrecoverable').addClass('btn-danger');
                angular.element('#irrecoverable').removeClass('btn-info');
                $scope.is_disabled = true;
            }
            if ( ['Complete','Paid','Part Paid','Cancel','Irrecoverable'].includes($scope.invoiceDetail.invoice_status)) {
                $scope.editDisabled = true;
            }
            // 
            $scope.reminderBtnHideShow = false;
            $timeout(function () {
                var newPaydueDate = TodayAfterNumberOfDays($scope.invoiceDetail.created_date, $scope.invoiceDetail.number_of_days)
                
                if (($scope.invoiceDetail.invoice_type != 'draft' && $scope.invoiceDetail.invoice_status != 'Complete')) {
                    if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
                        $scope.reminderBtnHideShow = true;
                    }
                }
            }, 500);

        }).error(errorCallback);
    }

    $scope.changeCreateDate = function(input){
        if(input){
            let dtInput = originalDateFormatNew(input);
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(dtInput, $scope.invoiceNumOfdays);
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
        }
    }

    $scope.invoiceCancel = function (frmId) {
        var obj = {
            "invoice_status": "Cancel"
        };
        $routeParams.id = $scope.invoiceDetail.invoice_id;
        rest.path = "clientInvoiceStatusChange";
        rest.put(obj).success(function (data) {
            $location.path("/invoice-client");
        });
    }
    $scope.upInvoiceData = {};
    $scope.editInvoiceClient = function (id) {
        $scope.upInvoiceData.item_total = numberFormatCommaToPoint($scope.invoiceTotal)  
        //$scope.upInvoiceData.item_total = $scope.invoiceTotal
        $scope.upInvoiceData.vat = $scope.vat
        $scope.upInvoiceData.Invoice_cost = $scope.grandTotal;
        $scope.upInvoiceData.invoice_date = originalDateFormatNew($scope.invoiceDetail.invoice_date);
        $scope.upInvoiceData.item = [];
        $scope.invoiceList.forEach(element => {
            const elItemID = element.itemId;
            const elIntemVal = $('input[name=itemVal_' + element.itemId).val();
            
            $scope.upInvoiceData.item.push({
                'id': elItemID,
                'value': numberFormatCommaToPoint(elIntemVal)
            })
        });

        rest.path = 'saveEditedInvoice';
        rest.put($scope.upInvoiceData).success(function (data) {
            if (data) {
                notification('Invoice Updated successfully.', 'success');
                $location.path("/client-invoice-show/" + $routeParams.id);
                $route.reload();
            }
        });
    }

    $scope.save = function (frmId, invoiceType) {
        if ($scope.invoiceD == undefined || $scope.invoiceD == null || $scope.invoiceD == "") {
            $scope.invoiceData = {};
        }
        
        rest.path = "clientInvoiceUpdate/" + $routeParams.id;
        rest.get().success(function (updatedata) {
            
            if (updatedata) {
                // Hide button from page
                angular.element('#btnPaid').hide();
                angular.element('#btnMarkAsCancel').hide();
                angular.element('#btnSave').hide();
                angular.element('#btnDraft').hide();
                angular.element('#btnCancel').hide();
                angular.element('#irrecoverable').hide();
                angular.element('#editInvoiceSave').hide();
                angular.element('.invoiceInput input').addClass('invoiceInputborder');

                kendo.drawing.drawDOM($("#pdfExport"))
                    .then(function (group) {
                        // Render the result as a PDF file
                        return kendo.drawing.exportPDF(group, {
                            //paperSize: "auto",
                        });
                    })
                    .done(function (data) {
                        $scope.invoicemailDetail = {
                            'pdfData': data,
                            'invoice_id': $scope.invoiceDetail.invoice_id,
                            'invoiceno': $scope.invoiceDetail.invoice_number,
                            'invoiceDue': $filter('globalDtFormat')($scope.invoiceDetail.paymentDueDate),
                            'freelanceEmail': $scope.invoiceDetail.freelanceEmail,
                            'freelanceName': $scope.invoiceDetail.freelanceName,
                            'clientCompanyName': $scope.invoiceDetail.clientCompanyName,
                            'companycontactEmail': $scope.invoiceDetail.companyInvoiceEmail ? $scope.invoiceDetail.companyInvoiceEmail : $scope.invoiceDetail.companycontactEmail,
                            'outstanding_reminder': 0,
                        };
                        rest.path = 'sendClientInvoiceMail';
                        rest.post($scope.invoicemailDetail).success(function (data) {
                            
                            if (data.status == 200) {
                                notification('Invoice has been sent successfully', 'success');
                                //setTimeout(() => {
                                $location.path('/client-invoice-show/' + $routeParams.id);
                                //}, 200);
                                angular.element('#btnPaid').show();
                                angular.element('#btnMarkAsCancel').show();
                                //angular.element('#btnSave').show();
                                angular.element('#btnDraft').show();
                                angular.element('#btnCancel').show();
                                angular.element('#irrecoverable').show();
                                angular.element('#editInvoiceSave').show();
                                angular.element('.invoiceInput input').addClass('invoiceInputborder');
                            }
                        }).error(errorCallback);
                    });
            } else {
                $location.path('/invoice-client');
            }

        });
    }

    rest.path = "emailTemplateGetAll" ;
    rest.get().success(function (data) {
        //console.log('data', data[0])
        //$scope.emailTemplate = $.parseHTML( data[0].template_content )
        //$scope.emailTemplate = data[0].template_content

    })


    $scope.printIt = function (number) {
        angular.element('.invoiceInput input').addClass('invoiceInputborder');
        //$scope.noneCls = "";

        var btnPaid = angular.element('#btnPaid');
        var btnMarkAsCancel = angular.element('#btnMarkAsCancel');
        var btnSave = angular.element('#btnSave');
        var btnDraft = angular.element('#btnDraft');
        var btnCancel = angular.element('#btnCancel');
        var irrecoverable = angular.element('#irrecoverable');

        angular.element('#btnPaid').hide();
        angular.element('#btnMarkAsCancel').hide();
        angular.element('#btnSave').hide();
        angular.element('#btnDraft').hide();
        angular.element('#btnCancel').hide();
        angular.element('#irrecoverable').hide();
        angular.element('#editInvoiceSave').hide();

        kendo.drawing.drawDOM($("#pdfExport")).then(function (group) {
            group.options.set("font", "8px DejaVu Sans");
            // group.options.set("pdf", {
            //     margin: {
            //         left   : "40mm",
            //         top    : "0mm",
            //         right  : "40mm",
            //         bottom : "0mm"
            //     },
            //     paperSize: "A4",
            // });
            kendo.drawing.pdf.saveAs(group, number + ".pdf");
        });
        $timeout(function () {
            angular.element('#btnPaid').show();
            angular.element('#btnMarkAsCancel').show();
            angular.element('#btnSave').show();
            angular.element('#btnDraft').show();
            angular.element('#btnCancel').show();
            angular.element('#irrecoverable').show();
            angular.element('#editInvoiceSave').show();

            angular.element('.invoiceInput input').removeClass('invoiceInputborder');
        }, 200);
    }

    // Start Invoice Outstanding with reminder - invoices which are past their due date and reminder has been sent to the client 
    $scope.sendRemiderinvoice = function (number) {
        angular.element('.invoiceInput input').addClass('invoiceInputborder');
        angular.element('#btnPaid').hide();
        angular.element('#btnMarkAsCancel').hide();
        angular.element('#btnSave').hide();
        angular.element('#btnDraft').hide();
        angular.element('#btnCancel').hide();
        angular.element('#irrecoverable').hide();
        angular.element('#editInvoiceSave').hide();

        kendo.drawing.drawDOM($("#pdfExport"))
            .then(function (group) {
                // Render the result as a PDF file
                return kendo.drawing.exportPDF(group, {
                    //paperSize: "auto",
                });
            })
            .done(function (data) {
                $scope.invoicemailDetail = {
                    'pdfData': data,
                    'invoice_id': $scope.invoiceDetail.invoice_id,
                    'invoiceno': $scope.invoiceDetail.invoice_number,
                    'invoiceDue': $filter('globalDtFormat')($scope.invoiceDetail.paymentDueDate),
                    'freelanceEmail': $scope.invoiceDetail.freelanceEmail,
                    'freelanceName': $scope.invoiceDetail.freelanceName,
                    'clientCompanyName': $scope.invoiceDetail.clientCompanyName,
                    'companycontactEmail': $scope.invoiceDetail.companyInvoiceEmail ? $scope.invoiceDetail.companyInvoiceEmail : $scope.invoiceDetail.companycontactEmail,
                    'outstanding_reminder': 1,
                };
                rest.path = 'sendClientInvoiceMail';
                rest.post($scope.invoicemailDetail).success(function (data) {
                    if (data.status == 200) {
                        notification('Reminder mail has been sent successfully', 'success');
                    }
                }).error(errorCallback);

                setTimeout(() => {
                    angular.element('.invoiceInput input').removeClass('invoiceInputborder');
                    angular.element('#btnPaid').show();
                    angular.element('#btnMarkAsCancel').show();
                    angular.element('#btnSave').show();
                    angular.element('#btnDraft').show();
                    angular.element('#btnCancel').show();
                    angular.element('#irrecoverable').show();
                    angular.element('#editInvoiceSave').show();
                }, 500);

            });
    }
    // End Invoice send Outstaing Reminder

    // Not Recoverable Invoice
    $scope.isIrrecoverableInvoice = function (frmId) {
        var inStatus = ($scope.invoiceDetail.invoice_status == 'Irrecoverable') ? 'Open' : 'Irrecoverable';
        var dtObj = {
            "invoice_status": inStatus
        };
        $routeParams.id = $scope.invoiceDetail.invoice_id;
        rest.path = "invoiceStatusIrrecoverable";
        rest.put(dtObj).success(function (data) {
            $route.reload();
        });
    }

}).controller('invoicePdfController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $route, $uibModal, $uibModalInstance, $filter, items) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.is_disabled = false;
    $scope.editInvoiceField = true;
    $scope.editDisabled = false;
    $scope.currencyType = 'EUR';
    //$scope.noneCls = "none"
    $scope.viewBtn = false;
    $scope.vatTax = 0;
    //change jobitem price module

    $routeParams.id = items;

    if ($routeParams.id) {
        rest.path = "clientInvoiceViewOne/" + $routeParams.id;
        rest.get().success(function (data) {
            
            $scope.invoiceDetail = data[0];
            if ($scope.invoiceDetail.clientVatinfo) {
                const clientPayment = JSON.parse($scope.invoiceDetail.clientVatinfo);
                $scope.invoiceDetail.clientVatinfo = clientPayment.tax_id ? clientPayment.tax_id : '';
            }
            $scope.vatNo = '';
            $scope.clientCity = $scope.clientCountry = $scope.clientZipcode = $scope.clientState = '';
            if ($scope.invoiceDetail.companyAddressDtl) {
                let clientAddDetail = JSON.parse($scope.invoiceDetail.companyAddressDtl);
                angular.forEach(clientAddDetail, function (clientAddress, i) {
                    if (clientAddress.id == 'address1_locality') {
                        $scope.clientCity = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_administrative_area_level_1') {
                        $scope.clientState = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_country') {
                        $scope.clientCountry = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_postal_code') {
                        $scope.clientZipcode = clientAddress.value;
                    }
                })
            }
            rest.path = "customerpriceAll/1";
            rest.get().success(function (dataPrice) {
                
                dataPrice.filter( (el) =>{
                    if(el.resource_id == $scope.invoiceDetail.clientId){
                        //$scope.currencyType = el.price_currency.includes(',') ?  el.price_currency.split(',')[0] : 'EUR';
                    }
                })
            }) 
            $scope.currencyType = $scope.invoiceDetail && $scope.invoiceDetail.client_currency.includes(',') ?  $scope.invoiceDetail.client_currency.split(',')[0] : 'EUR';
            $scope.invoiceDetail.tax_rate = $scope.invoiceDetail.tax_rate ? $scope.invoiceDetail.tax_rate : 0; 
            $scope.vatTax = $scope.invoiceDetail.tax_rate;
            $scope.vatAmount = 0;
            //$scope.invoiceDetail.invoice_date = moment($scope.invoiceDetail.invoice_date).format($window.localStorage.getItem('global_dateFormat'));
            rest.path = "getUserDataById/" + $scope.invoiceDetail.freelanceId;
            rest.get().success(function (dataUser) {
                //$scope.userData = dataUser.userData;
                $scope.userPaymentData = dataUser.userPaymentData;
                //var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                var vBankInfo = $scope.invoiceDetail['vBankInfo'][0];
                $scope.vBankInfo = $scope.invoiceDetail['vBankInfo'][0];
                //$scope.currencyType = vBankInfo.currency_code.split(',')[1];
                //$scope.currencyType = vBankInfo.currency_code;

                //$scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                $scope.currencyPaymentMethod = 'Bank Transfer';
                $scope.vBankInfo.currency_code = 'EUR';
                //$scope.currencyType = '€ ';
                if ($scope.currencyPaymentMethod == 'Bank Transfer') {
                    $timeout(function () {
                        $("#Bank").prop('checked', true);
                    }, 100);
                } else {
                    $timeout(function () {
                        $("#Paypal").prop('checked', true);
                    }, 100);
                }
                $scope.invoiceDetail.payment = $scope.currencyPaymentMethod;

            }).error(errorCallback);

            $scope.invoiceList = data;
            
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(data[0].invoice_date, data[0].number_of_days);
            $scope.invoiceDetail.invoice_date = $filter('globalDtFormat')(data[0].invoice_date)

            //$scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            //$scope.invoiceDetail.paymentDueDate = moment($scope.invoiceDetail.paymentDueDate).format($window.localStorage.getItem('global_dateFormat'));

            if($scope.invoiceDetail.freelancePhone){
                var mobileNo = JSON.parse($scope.invoiceDetail.freelancePhone).mobileNumber;
                var countryCode = JSON.parse($scope.invoiceDetail.freelancePhone).countryTitle;
                $scope.invoiceDetail.freelancePhone = '(' + countryCode.split(':')[1].trim() + ')' + ' ' + mobileNo;
            }

            if($scope.invoiceDetail.companyPhone){
                var mobileNo1 = JSON.parse($scope.invoiceDetail.companyPhone).mobileNumber;
                var countryCode1 = JSON.parse($scope.invoiceDetail.companyPhone).countryTitle;
                $scope.invoiceDetail.companyPhone = '(' + countryCode1.split(':')[1].trim() + ')' + ' ' + mobileNo1;
            }

            //$scope.vat = $scope.invoiceDetail.vat ? $scope.invoiceDetail.vat : 0;
            //$scope.invoiceTotal = $scope.invoiceDetail.item_total ? $scope.invoiceDetail.item_total : 0;
            $scope.invoiceTotal = 0;
            var invoiceTotal = $scope.invoiceTotal;
            $scope.grandTotal = 0;
            angular.forEach($scope.invoiceList, function (val, i) {
                
                if (val.item) {
                    var itemTotal = 0;
                    angular.forEach(val.item, function (v, i2) {
                        //$scope.invoiceTotal += v.itemTotal;
                        itemTotal += v.itemTotal;
                    })
                    //$scope.invoiceList[i].item.itemTotalVal = $filter('customNumber')(itemTotal);
                }
                
                $scope.invoiceTotal += parseFloat(val.scoop_value);
                $scope.invoiceList[i].item.itemTotalVal = $filter('customNumber')(val.scoop_value);
                $scope.invoiceList[i].item.priceWithTax = parseFloat(val.scoop_value);
            })
            //$scope.grandTotal = parseFloat($scope.invoiceTotal) + parseFloat($scope.vat);
            $scope.vatAmount = taxRateAmountCalc(parseFloat($scope.invoiceTotal), $scope.vatTax);
            $scope.grandTotal = parseFloat($scope.invoiceTotal) + parseFloat($scope.vatAmount);
            //$scope.grandTotal = parseFloat($scope.invoiceTotal);
            $scope.invoiceList[0].Invoice_cost = $scope.grandTotal;
            //$scope.invoiceList[0].Invoice_cost = $scope.invoiceTotal;
            $scope.totalDue = $scope.invoiceList[0].Invoice_cost - $scope.invoiceList[0].paid_amount;
            
            $scope.invoiceTotal = (invoiceTotal.toString().includes(',')) ? $scope.invoiceTotal : $filter('customNumber')($scope.invoiceTotal);
            //$scope.vat = $filter('customNumber')($scope.vat);
            if($scope.invoiceList[0].paid_amount > 0){
                $scope.dueAmountText = 'DUE AMOUNT'; 
            }

            if ($scope.invoiceDetail.invoice_status == 'Irrecoverable') {
                angular.element('#irrecoverable').addClass('btn-danger');
                angular.element('#irrecoverable').removeClass('btn-info');
                $scope.is_disabled = true;
            }
            if ( ['Complete','Paid','Part Paid','Cancel','Irrecoverable'].includes($scope.invoiceDetail.invoice_status)) {
                $scope.editDisabled = true;
            }
            // 
            $scope.reminderBtnHideShow = false;
            $timeout(function () {
                var newPaydueDate = TodayAfterNumberOfDays($scope.invoiceDetail.invoice_date, $scope.invoiceDetail.number_of_days)
                
                if (($scope.invoiceDetail.invoice_type != 'draft' && $scope.invoiceDetail.invoice_status != 'Complete')) {
                    if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
                        $scope.reminderBtnHideShow = true;
                    }
                }
                // print invoice after all data load    
                $scope.printIt($scope.invoiceDetail.invoice_number);
            }, 500);

        }).error(errorCallback);
    }

    $scope.printIt = function (invoiceNo) {
        
        let pdfName = invoiceNo ? invoiceNo : 'Client Invoice';
        angular.element('.invoiceInput input').addClass('invoiceInputborder');
        //$scope.noneCls = "";

        kendo.drawing.drawDOM($("#pdfExport")).then(function (group) {
            group.options.set("font", "12px DejaVu Sans");
            // group.options.set("pdf", {
            //     margin: {
            //         left: "40mm",
            //         top: "0mm",
            //         right: "40mm",
            //         bottom: "0mm"
            //     }
            // });
            kendo.drawing.pdf.saveAs(group, pdfName + ".pdf");
        });
        $timeout(function () {
            $scope.cancel();
            //angular.element('.invoiceInput input').removeClass('invoiceInputborder');
        }, 500);
        
    }

    $scope.cancel = function () {
        $uibModalInstance.close();
    }

}).controller('invoiceAmountController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $route, $uibModal, $uibModalInstance, items, $filter) {
    $scope.closeAmount = true;
    $scope.currencySymbol = items.Currency;
    $scope.totalAmount = items.Invoice_cost;
    
    $scope.amountToPaid = items.paid_amount;
    
    if (items.paid_amount == 0) {
        $scope.dueAmount = items.Invoice_cost;
    } else {
        $scope.dueAmount = parseFloat(items.Invoice_cost) - parseFloat(items.paid_amount);
        $scope.dueAmount = parseFloat($scope.dueAmount.toFixed(2));
    }

    $scope.statusChange = function (status) {
        if (status == "Part") {
            $scope.closeAmount = false;
        } else {
            $scope.closeAmount = true;
            $scope.am = "Amount";
            $scope.invoiceComplete = items.Invoice_cost - items.paid_amount;
        }
    }


    $scope.ok = function (frmId) {
        // if any change in amount box and then select to completed replace value in box amount
        // to complete ampunt
        if ($scope.closeAmount) {
            $scope.inv.paid_amount = $scope.dueAmount;
        }
        if (!$('#paidStatus').val()) {
            notification('Please select status.', 'error');
            return false;
        }

        var checkHireamount = parseFloat($scope.inv.paid_amount) + parseFloat($scope.amountToPaid);

        if (angular.element('#' + frmId).valid()) {

            if ($scope.inv.paid_amount == undefined) {
                notification("Enter valid amount.", 'error');
                return false;
            }
            if (checkHireamount > items.Invoice_cost) {
                var errorMsg = "High amount you can't enter , please enter " + $scope.dueAmount + " or less amount.";
                notification(errorMsg, 'error');
                return false;
            } else if ($scope.inv.paid_amount == 0) {
                notification("Zero amount not allowed", 'error');
                return false;
            } else {

                var date = $filter('date')(new Date(), 'yyyy/MM/dd');
                $scope.inv.paid_date = date;
                $scope.inv.partPaid = $scope.inv.paid_amount;
                $scope.inv.paid_amount = $scope.inv.paid_amount + items.paid_amount;
                if ($scope.inv.paid_amount == items.Invoice_cost) {
                    $scope.inv.invoice_status = "Complete";
                    $scope.inv.is_approved = 1;
                } else {
                    $scope.inv.invoice_status = "Part Paid";
                    $scope.inv.is_approved = 1;
                }
                if ($scope.closeAmount == true) {
                    $scope.inv.paid_amount = items.Invoice_cost;
                    $scope.inv.invoice_status = "Complete";
                    $scope.inv.is_approved = 1;
                }
                $routeParams.id = items.statusId;
                rest.path = "invoiceStatusChange";
                rest.put($scope.inv).success(function (data) {
                    $uibModalInstance.dismiss('cancel');
                    $route.reload();
                });
            }
        }
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }
}).controller('clientInvoiceAmountController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $route, $uibModal, $uibModalInstance, items, $filter) {
    $scope.closeAmount = true;
    $scope.currencySymbol = items.Currency;
    $scope.totalAmount = items.Invoice_cost;
    
    $scope.amountToPaid = items.paid_amount;
    
    if (items.paid_amount == 0) {
        $scope.dueAmount = items.Invoice_cost;
    } else {
        $scope.dueAmount = parseFloat(items.Invoice_cost) - parseFloat(items.paid_amount);
        $scope.dueAmount = parseFloat($scope.dueAmount.toFixed(2));
    }

    $scope.statusChange = function (status) {
        if (status == "Part") {
            $scope.closeAmount = false;
        } else {

            $scope.closeAmount = true;
            $scope.am = "Amount";
            $scope.invoiceComplete = items.Invoice_cost - items.paid_amount;
        }
    }


    $scope.ok = function (frmId) {
        // if any change in amount box and then select to completed replace value in box amount
        // to complete ampunt
        if ($scope.closeAmount) {
            $scope.inv.paid_amount = $scope.dueAmount;
        }
        if (!$('#paidStatus').val()) {
            notification('Please select status.', 'error');
            return false;
        }

        var checkHireamount = parseFloat($scope.inv.paid_amount) + parseFloat($scope.amountToPaid);

        if (angular.element('#' + frmId).valid()) {

            if ($scope.inv.paid_amount == undefined) {
                notification("Enter valid amount.", 'error');
                return false;
            }
            if (checkHireamount > items.Invoice_cost) {
                var errorMsg = "High amount you can't enter , please enter " + $scope.dueAmount + " or less amount.";
                notification(errorMsg, 'error');
                return false;
            } else if ($scope.inv.paid_amount == 0) {
                notification("Zero amount not allowed", 'error');
                return false;
            } else {

                var date = $filter('date')(new Date(), 'yyyy/MM/dd');
                
                $scope.inv.paid_date = date;
                $scope.inv.partPaid = $scope.inv.paid_amount;
                $scope.inv.paid_amount = $scope.inv.paid_amount + items.paid_amount;
                if ($scope.inv.paid_amount == items.Invoice_cost) {
                    $scope.inv.invoice_status = "Complete";
                } else {
                    $scope.inv.invoice_status = "Part Paid";
                }
                if ($scope.closeAmount == true) {
                    $scope.inv.paid_amount = items.Invoice_cost;
                    $scope.inv.invoice_status = "Complete";
                }
                $routeParams.id = items.statusId;
                rest.path = "clientInvoiceStatusChange";
                rest.put($scope.inv).success(function (data) {
                    $uibModalInstance.dismiss('cancel');
                    $route.reload();
                });
            }
        }
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    }
}).controller('invoiceShowController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $route, $uibModal, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.isDisabledApprvd = false;
    $scope.editInvoiceField = true;
    $scope.editDisabled = false;
    $scope.invoiceNumOfdays = 30;
    $scope.invoicePaid = function (frmId) {
        var obj = {
            "Invoice_cost": $scope.invoiceList[0].Invoice_cost,
            "paid_amount": $scope.invoiceList[0].paid_amount,
            "statusId": $scope.invoiceList[0].invoice_id,
            "Currency": $scope.invoiceList[0].Currency
        };
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/invoiceAmount.html',
            controller: 'invoiceAmountController',
            size: '',
            resolve: {
                items: function () {
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            $route.reload();
        });
    }
    $scope.vat = 0;
    //change jobitem price module
    $scope.changeInvoiceField = function (index, parentIndex, itemVal = 0, type = '') {
        var invoiceSum = 0;
        $(".invoiceCal").each(function () {
            var invPrice = numberFormatCommaToPoint(this.value)
            if (!isNaN(invPrice) && this.value.length != 0) {
                invoiceSum += parseFloat(invPrice);
            }
        });
        if ($scope.vat && $scope.vat.indexOf(',') > -1) {
            $scope.vat = numberFormatCommaToPoint($scope.vat);
        }
        if (type == 'vat') {
            $scope.vat = numberFormatCommaToPoint(itemVal);
            //$scope.grandJobTotal = parseFloat(invoiceSum) + parseFloat($scope.vat);
            var invoiceTotal = $scope.invoiceTotal
            if ($scope.invoiceTotal.indexOf(',') > -1) {
                invoiceTotal = numberFormatCommaToPoint($scope.invoiceTotal);
            }
            $scope.grandJobTotal = parseFloat(invoiceTotal) + parseFloat($scope.vat);
            //$scope.grandJobTotal = parseFloat(invoiceSubTotal) + parseFloat(invoiceVat);
        }
        if (type == 'invoiceTotal') {
            $scope.invoiceTotal = numberFormatCommaToPoint(itemVal);
            $scope.grandJobTotal = parseFloat($scope.invoiceTotal) + parseFloat($scope.vat);
            //$scope.grandJobTotal = parseFloat($scope.invoiceTotal) + parseFloat(invoiceVat);
            if ($scope.invoiceTotal.indexOf('.') > -1)
                $scope.invoiceTotal = $filter('customNumber')($scope.invoiceTotal);
        }
        if (type == 'itemPrice') {
            $scope.grandJobTotal = parseFloat(invoiceSum) + parseFloat($scope.vat);
            $scope.invoiceTotal = $filter('customNumber')(invoiceSum);
            $scope.vat = ($scope.vat == 0) ? 0 : $scope.vat;
            angular.element('#invSubtotal').val($scope.invoiceTotal);
        }
        if ($scope.vat.indexOf('.') > -1)
            $scope.vat = $filter('customNumber')($scope.vat);
    }

    if ($routeParams.id) {
        rest.path = "invoiceViewOne/" + $routeParams.id;
        rest.get().success(function (data) {
            $scope.invoiceDetail = data[0];
            
            //$scope.invoiceDetail.invoice_date = moment($scope.invoiceDetail.invoice_date).format($window.localStorage.getItem('global_dateFormat'));
            $scope.vatNo = '';
            $scope.clientCity = $scope.clientCountry = $scope.clientZipcode = $scope.clientState = '';
            if ($scope.invoiceDetail.clientAddresDetail) {
                let clientAddDetail = JSON.parse($scope.invoiceDetail.clientAddresDetail);
                angular.forEach(clientAddDetail, function (clientAddress, i) {
                    if (clientAddress.id == 'address1_locality') {
                        $scope.clientCity = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_administrative_area_level_1') {
                        $scope.clientState = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_country') {
                        $scope.clientCountry = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_postal_code') {
                        $scope.clientZipcode = clientAddress.value;
                    }
                })
            }
            $scope.freelanceCity = $scope.freelanceCountry = $scope.freelanceZipcode = $scope.freelanceState = '';
            if ($scope.invoiceDetail.freelanceAddressDetail) {
                let freelanceAddDetail = JSON.parse($scope.invoiceDetail.freelanceAddressDetail);
                
                angular.forEach(freelanceAddDetail, function (freelanceAddress, i) {
                    if (freelanceAddress.id == 'address1_locality') {
                        $scope.freelanceCity = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_administrative_area_level_1') {
                        $scope.freelanceState = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_country') {
                        $scope.freelanceCountry = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_postal_code') {
                        $scope.freelanceZipcode = freelanceAddress.value;
                    }
                })
            }
            if ($scope.invoiceDetail.clientVatinfo) {
                let clntpaymentInfo = JSON.parse($scope.invoiceDetail.clientVatinfo);
                $scope.invoiceDetail.clientVatinfo = clntpaymentInfo.tax_id;
            }
            $scope.currencyType = '€';
            $scope.currencyPaymentMethod == 'Bank Transfer';

            rest.path = "getUserDataById/" + $scope.invoiceDetail.freelanceId;
            rest.get().success(function (dataUser) {
                $scope.userPaymentData = dataUser.userPaymentData;

                if (dataUser.userPaymentData.vPaymentInfo) {
                    let vpaymentInfo = JSON.parse(dataUser.userPaymentData.vPaymentInfo);
                    $scope.vatNo = vpaymentInfo.tax_id;
                }
                if ($scope.userPaymentData.vBankInfo) {
                    //var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    //$scope.currencyType = $scope.vBankInfo.currency_code.split(',')[1];
                    $scope.vBankInfo.currency_code = $scope.vBankInfo.currency_code.split(',')[0];
                    
                    //$scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.currencyPaymentMethod = $scope.vBankInfo.payment_method;
                }
                //$scope.userData = dataUser.userData;
                // $scope.userPaymentData = dataUser.userPaymentData;
                // var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                // $scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                //$scope.currencyType = vBankInfo.currency_code.split(',')[1];
                //$scope.currencyType = vBankInfo.currency_code;
                // $scope.vBankInfo.currency_code = 'EUR,€'; 
                // $scope.currencyType = 'EUR,€';

                if ($scope.currencyPaymentMethod == 'Bank Transfer') {
                    $timeout(function () {
                        $("#Bank").prop('checked', true);
                    }, 100);

                } else {
                    $timeout(function () {
                        $("#Paypal").prop('checked', true);
                    }, 100);
                }

                $scope.invoiceDetail.payment = $scope.currencyPaymentMethod;

            }).error(errorCallback);

            // rest.path = 'customerpriceAll/' + 2;  //2 for external userID
            // rest.get().success(function (data) {
            //     const currency = data.filter(pd => {
            //         if(pd.resource_id == $scope.invoiceDetail.freelanceId){
            //             $scope.currencyType = (pd.price_currency).toString().includes(',') ? (pd.price_currency).split(',')[0] : 'EUR';
            //             return pd;
            //         }
            //     })
            // })
            $scope.currencyType = ($scope.invoiceDetail.freelance_currency).toString().includes(',') ? ($scope.invoiceDetail.freelance_currency).split(',')[0] : 'EUR';

            $scope.invoiceList = data;
            
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(data[0].created_date, data[0].number_of_days);

            //$scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            //$scope.invoiceDetail.paymentDueDate = moment($scope.invoiceDetail.paymentDueDate).format($window.localStorage.getItem('global_dateFormat'));

            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays($scope.invoiceDetail.invoice_date, data[0].number_of_days);
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            
            //$scope.invoiceDetail.invoice_date = moment($scope.invoiceDetail.invoice_date).format($window.localStorage.getItem('global_dateFormat'));
            $scope.invoiceDetail.invoice_date = $filter('globalDtFormat')($scope.invoiceDetail.invoice_date);

            var mobileNo = JSON.parse($scope.invoiceDetail.freelancePhone).mobileNumber;
            var countryCode = JSON.parse($scope.invoiceDetail.freelancePhone).countryTitle;
            $scope.invoiceDetail.freelancePhone = '(' + countryCode.split(':')[1].trim() + ')' + ' ' + mobileNo;

            var mobileNo1 = JSON.parse($scope.invoiceDetail.companyPhone).mobileNumber;
            var countryCode1 = JSON.parse($scope.invoiceDetail.companyPhone).countryTitle;
            $scope.invoiceDetail.companyPhone = '(' + countryCode1.split(':')[1].trim() + ')' + ' ' + mobileNo1;

            $scope.grandTotal = 0;
            $scope.grandJobTotal = 0;
            $scope.vat = $scope.invoiceDetail.vat ? $scope.invoiceDetail.vat : 0;
            
            $scope.invoiceTotal = $scope.invoiceDetail.job_total ? $scope.invoiceDetail.job_total : 0;
            var invoiceTotal = $scope.invoiceTotal;
            
            angular.forEach($scope.invoiceList, function (val, i) {
                if (val.item) {
                    angular.forEach(val.item, function (v, i) {
                        //$scope.grandTotal += v.itemTotal;
                    })
                }
                $scope.invoiceList[i].price_per_job = $filter('customNumber')(val.price_per_job);
                if (val.jobpriceList) {
                    angular.forEach(val.jobpriceList, function (v, i) {
                        //$scope.grandJobTotal += v.itemTotal;
                    })
                }
            })

            let taxRate = $scope.invoiceList[0].tax_percentage ? $scope.invoiceList[0].tax_percentage : 0;
            
            let amountTaxRate = taxRateAmountCalc($scope.invoiceTotal, taxRate);
            $scope.taxValue = amountTaxRate;
            $scope.taxPercentage = taxRate;
            
            $scope.grandJobTotal = parseFloat($scope.invoiceTotal) + parseFloat(amountTaxRate);
            $scope.invoiceTotal = (invoiceTotal.toString().includes(',')) ? $scope.invoiceTotal : $filter('customNumber')($scope.invoiceTotal);
            $scope.vat = ($scope.vat.toString().includes(',')) ? $scope.vat : $filter('customNumber')($scope.vat);

            if ($scope.grandJobTotal > $scope.invoiceDetail.Invoice_cost) {
                $scope.updtInvoiceCost = { 'Invoice_cost': $scope.grandJobTotal, 'is_update': 1 };
                
                $routeParams.id = $routeParams.id;
                rest.path = "invoiceStatusChange";
                rest.put($scope.updtInvoiceCost).success(function (data) {
                    //$route.reload();
                });
            }
            if ($scope.invoiceDetail.invoice_status == 'Complete' || $scope.invoiceDetail.invoice_status == 'Paid' || $scope.invoiceDetail.invoice_status == 'Part Paid') {
                $scope.isDisabledApprvd = true;
            }
            if ($scope.userRight != 1)
                $scope.isDisabledApprvd = true;
            if ( ['Complete','Paid','Part Paid','Cancel'].includes($scope.invoiceDetail.invoice_status)) {
                $scope.editDisabled = true;
            }    

            var newPaydueDate = TodayAfterNumberOfDays($scope.invoiceDetail.created_date, $scope.invoiceDetail.number_of_days)
            if (($scope.invoiceDetail.invoice_type != 'draft' && $scope.invoiceDetail.invoice_status != 'Cancel' && $scope.invoiceDetail.invoice_status != 'Complete' && $scope.invoiceDetail.is_approved == 1)) {
                if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
                    $scope.reminderBtnHideShow = true;
                }
            }

        }).error(errorCallback);
    }
    // Invoice create date change
    $scope.changeCreateDate = function(input){
        if(input){
            let dtInput = originalDateFormatNew(input);
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(dtInput, $scope.invoiceNumOfdays);
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
        }
    }

    $scope.upInvoiceData = {};
    $scope.editInvoiceLinguist = function (id) {
        //$scope.upInvoiceData.item_total = numberFormatCommaToPoint($scope.invoiceTotal)  
        $scope.upInvoiceData.item_total = numberFormatCommaToPoint($scope.invoiceTotal)
        $scope.upInvoiceData.vat = numberFormatCommaToPoint($scope.vat);
        $scope.upInvoiceData.Invoice_cost = $scope.grandJobTotal;
        $scope.upInvoiceData.item = [];
        $scope.invoiceList.forEach(element => {
            const elItemID = element.jobId;
            const elItemVal = $('input[name=itemVal_' + element.jobId).val();
            $scope.upInvoiceData.item.push({
                'id': elItemID,
                'value': numberFormatCommaToPoint(elItemVal)
            })
        });
        rest.path = 'saveEditedInvoiceLinguist';
        rest.put($scope.upInvoiceData).success(function (data) {
            if (data) {
                notification('Invoice Updated successfully.', 'success');
                $location.path("/invoice-show/" + $routeParams.id);
                $route.reload();
            }
        });
    }

    $scope.invoiceCancel = function (frmId) {
        var obj = {
            "invoice_status": "Cancel"
        };
        $routeParams.id = $scope.invoiceDetail.invoice_id;
        rest.path = "invoiceStatusChange";
        rest.put(obj).success(function (data) {
            $location.path("/invoice-data");
        });
    }

    $scope.invoiceApproved = function (frmId) {
        var obj = {
            "is_approved": frmId
        };
        $routeParams.id = $scope.invoiceDetail.invoice_id;
        rest.path = "invoiceStatusApproved";
        rest.put(obj).success(function (data) {
            $location.path("/invoice-data");
        });
    }

    $scope.changeCreateDate = function(input){
        if(input){
            let dtInput = originalDateFormatNew(input);
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(dtInput, $scope.invoiceNumOfdays);
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
        }
    }

    $scope.save = function (frmId, invoiceType) {
        if ($scope.invoiceD == undefined || $scope.invoiceD == null || $scope.invoiceD == "") {
            $scope.invoiceData = {};
        }

        rest.path = "invoiceUpdate/" + $routeParams.id;
        rest.get().success(function (data) {
            $location.path('/invoice-detail');
        });
    }
    $scope.isPdfdownload = false;
    $scope.printIt = function (number) {
        angular.element('.invoiceInput input').addClass('invoiceInputborder');
        var btnPaid = angular.element('#btnPaid');
        var btnMarkAsCancel = angular.element('#btnMarkAsCancel');
        var btnSave = angular.element('#btnSave');
        var btnDraft = angular.element('#btnDraft');
        var btnCancel = angular.element('#btnCancel');
        var btnApproved = angular.element('#btnApproved');
        
        angular.element('#btnPaid').hide();
        angular.element('#btnMarkAsCancel').hide();
        angular.element('#btnSave').hide();
        angular.element('#btnDraft').hide();
        angular.element('#btnCancel').hide();
        angular.element('#btnApproved').hide();
        angular.element('#editInvoiceSave').hide();
        angular.element('#editInvoiceSave2').hide();
        angular.element('.btnSave').hide();

        $scope.isPdfdownload = true;

        kendo.drawing.drawDOM($("#exportable")).then(function (group) {
            group.options.set("font", "8px DejaVu Sans");
            /*group.options.set("pdf", {
                margin: {
                    left   : "40mm",
                    top    : "0mm",
                    right  : "40mm",
                    bottom : "0mm"
                }
            });*/
            kendo.drawing.pdf.saveAs(group, number + ".pdf");
        });

        $timeout(function () {
            angular.element('.invoiceInput input').removeClass('invoiceInputborder');
            angular.element('#btnPaid').show();
            angular.element('#btnMarkAsCancel').show();
            angular.element('#btnSave').show();
            angular.element('#btnDraft').show();
            angular.element('#btnCancel').show();
            angular.element('#btnApproved').show();
            angular.element('#editInvoiceSave').show();
            angular.element('#editInvoiceSave2').show();
            angular.element('.btnSave').show();
            $scope.isPdfdownload = false;

        }, 1000);
        // angular.element('#btnPaid').show();
        // angular.element('#btnMarkAsCancel').show();
        // angular.element('#btnSave').show();
        // angular.element('#btnDraft').show();
        // angular.element('#btnCancel').show();
        // html2canvas(document.getElementById('exportable'), {
        //     onrendered: function(canvas) {
        //         var data = canvas.toDataURL();
        //         var docDefinition = {
        //             content: [{
        //                 image: data,
        //                 width: 500,
        //             }]
        //         };
        //         pdfMake.createPdf(docDefinition).download(number + ".pdf");
        //     }
        // });
    }

    $scope.sendRemiderinvoice = function (number) {
        angular.element('#btnPaid').hide();
        angular.element('#btnMarkAsCancel').hide();
        angular.element('#btnSave').hide();
        angular.element('#btnDraft').hide();
        angular.element('#btnCancel').hide();
        angular.element('#btnApproved').hide();
        angular.element('#editInvoiceSave').hide();
        angular.element('#editInvoiceSave2').hide();
        angular.element('.btnSave').hide();

        kendo.drawing.drawDOM($("#exportable"))
            .then(function (group) {
                // Render the result as a PDF file
                return kendo.drawing.exportPDF(group, {
                    //paperSize: "auto",
                });
            })
            .done(function (data) {
                $scope.invoicemailDetail = {
                    'pdfData': data,
                    'invoiceno': number,
                    'invoice_id': $routeParams.id,
                    'freelanceEmail': $scope.invoiceDetail.freelanceEmail,
                    'freelanceName': $scope.invoiceDetail.freelanceName,
                    'emailRemind1': $scope.invoiceDetail.emailRemind1,
                    'emailRemind2': $scope.invoiceDetail.emailRemind2,
                    'outstanding_reminder': 1,
                };
                rest.path = 'sendInvoiceMail';
                rest.post($scope.invoicemailDetail).success(function (data) {
                    if (data.status == 200) {
                        notification('Reminder mail has been sent successfully', 'success');
                    }
                }).error(errorCallback);

                angular.element('#btnPaid').show();
                angular.element('#btnMarkAsCancel').show();
                angular.element('#btnSave').show();
                angular.element('#btnDraft').show();
                angular.element('#btnCancel').show();
                angular.element('#btnApproved').show();
                angular.element('#editInvoiceSave').show();
                angular.element('#editInvoiceSave2').show();
                angular.element('.btnSave').show();

            });
    }

}).controller('linguistInvoicePdfController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $route, $uibModal, $uibModalInstance, $filter, items) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.isDisabledApprvd = false;
    $scope.editInvoiceField = true;
    $scope.editDisabled = false;
    $scope.viewBtn = false;
    
    $scope.vat = 0;

    $routeParams.id = items;
    if ($routeParams.id) {
        rest.path = "invoiceViewOne/" + $routeParams.id;
        rest.get().success(function (data) {
            $scope.invoiceDetail = data[0];
            
            $scope.invoiceDetail.invoice_date = moment($scope.invoiceDetail.invoice_date).format($window.localStorage.getItem('global_dateFormat'));
            $scope.vatNo = '';
            $scope.clientCity = $scope.clientCountry = $scope.clientZipcode = $scope.clientState = '';
            if ($scope.invoiceDetail.clientAddresDetail) {
                let clientAddDetail = JSON.parse($scope.invoiceDetail.clientAddresDetail);
                angular.forEach(clientAddDetail, function (clientAddress, i) {
                    if (clientAddress.id == 'address1_locality') {
                        $scope.clientCity = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_administrative_area_level_1') {
                        $scope.clientState = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_country') {
                        $scope.clientCountry = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_postal_code') {
                        $scope.clientZipcode = clientAddress.value;
                    }
                })
            }
            $scope.freelanceCity = $scope.freelanceCountry = $scope.freelanceZipcode = $scope.freelanceState = '';
            if ($scope.invoiceDetail.freelanceAddressDetail) {
                let freelanceAddDetail = JSON.parse($scope.invoiceDetail.freelanceAddressDetail);
                
                angular.forEach(freelanceAddDetail, function (freelanceAddress, i) {
                    if (freelanceAddress.id == 'address1_locality') {
                        $scope.freelanceCity = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_administrative_area_level_1') {
                        $scope.freelanceState = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_country') {
                        $scope.freelanceCountry = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_postal_code') {
                        $scope.freelanceZipcode = freelanceAddress.value;
                    }
                })
            }
            if ($scope.invoiceDetail.clientVatinfo) {
                let clntpaymentInfo = JSON.parse($scope.invoiceDetail.clientVatinfo);
                $scope.invoiceDetail.clientVatinfo = clntpaymentInfo.tax_id;
            }
            $scope.currencyType = '€';
            $scope.currencyPaymentMethod == 'Bank Transfer';

            rest.path = "getUserDataById/" + $scope.invoiceDetail.freelanceId;
            rest.get().success(function (dataUser) {
                $scope.userPaymentData = dataUser.userPaymentData;

                if (dataUser.userPaymentData.vPaymentInfo) {
                    let vpaymentInfo = JSON.parse(dataUser.userPaymentData.vPaymentInfo);
                    $scope.vatNo = vpaymentInfo.tax_id;
                }
                if ($scope.userPaymentData.vBankInfo) {
                    //var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    //$scope.currencyType = $scope.vBankInfo.currency_code.split(',')[1];
                    $scope.vBankInfo.currency_code = $scope.vBankInfo.currency_code.split(',')[0];
                    
                    //$scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.currencyPaymentMethod = $scope.vBankInfo.payment_method;
                }

                if ($scope.currencyPaymentMethod == 'Bank Transfer') {
                    $timeout(function () {
                        $("#Bank").prop('checked', true);
                    }, 100);

                } else {
                    $timeout(function () {
                        $("#Paypal").prop('checked', true);
                    }, 100);
                }

                $scope.invoiceDetail.payment = $scope.currencyPaymentMethod;

            }).error(errorCallback);

            // rest.path = 'customerpriceAll/' + 2;  //2 for external userID
            // rest.get().success(function (data) {
            //     const currency = data.filter(pd => {
            //         if(pd.resource_id == $scope.invoiceDetail.freelanceId){
            //             $scope.currencyType = (pd.price_currency).toString().includes(',') ? (pd.price_currency).split(',')[0] : 'EUR';
            //             return pd;
            //         }
            //     })
            // })
            $scope.currencyType = ($scope.invoiceDetail.freelance_currency).toString().includes(',') ? ($scope.invoiceDetail.freelance_currency).split(',')[0] : 'EUR';

            $scope.invoiceList = data;
            
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(data[0].created_date, data[0].number_of_days);

            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            $scope.invoiceDetail.paymentDueDate = moment($scope.invoiceDetail.paymentDueDate).format($window.localStorage.getItem('global_dateFormat'));


            var mobileNo = JSON.parse($scope.invoiceDetail.freelancePhone).mobileNumber;
            var countryCode = JSON.parse($scope.invoiceDetail.freelancePhone).countryTitle;
            $scope.invoiceDetail.freelancePhone = '(' + countryCode.split(':')[1].trim() + ')' + ' ' + mobileNo;

            var mobileNo1 = JSON.parse($scope.invoiceDetail.companyPhone).mobileNumber;
            var countryCode1 = JSON.parse($scope.invoiceDetail.companyPhone).countryTitle;
            $scope.invoiceDetail.companyPhone = '(' + countryCode1.split(':')[1].trim() + ')' + ' ' + mobileNo1;

            $scope.grandTotal = 0;
            $scope.grandJobTotal = 0;
            $scope.vat = $scope.invoiceDetail.vat ? $scope.invoiceDetail.vat : 0;
            
            $scope.invoiceTotal = $scope.invoiceDetail.job_total ? $scope.invoiceDetail.job_total : 0;
            var invoiceTotal = $scope.invoiceTotal;
            
            angular.forEach($scope.invoiceList, function (val, i) {
                if (val.item) {
                    angular.forEach(val.item, function (v, i) {
                        //$scope.grandTotal += v.itemTotal;
                    })
                }
                $scope.invoiceList[i].price_per_job = $filter('customNumber')(val.price_per_job);
                if (val.jobpriceList) {
                    angular.forEach(val.jobpriceList, function (v, i) {
                        //$scope.grandJobTotal += v.itemTotal;
                    })
                }
            })

            let taxRate = $scope.invoiceList[0].tax_percentage ? $scope.invoiceList[0].tax_percentage : 0;
            
            let amountTaxRate = taxRateAmountCalc($scope.invoiceTotal, taxRate);
            $scope.taxValue = amountTaxRate;
            $scope.taxPercentage = taxRate;
            
            $scope.grandJobTotal = parseFloat($scope.invoiceTotal) + parseFloat(amountTaxRate);
            $scope.invoiceTotal = (invoiceTotal.toString().includes(',')) ? $scope.invoiceTotal : $filter('customNumber')($scope.invoiceTotal);
            $scope.vat = ($scope.vat.toString().includes(',')) ? $scope.vat : $filter('customNumber')($scope.vat);

            if ($scope.grandJobTotal > $scope.invoiceDetail.Invoice_cost) {
                $scope.updtInvoiceCost = { 'Invoice_cost': $scope.grandJobTotal, 'is_update': 1 };
                $routeParams.id = $routeParams.id;
                rest.path = "invoiceStatusChange";
                rest.put($scope.updtInvoiceCost).success(function (data) {
                    $route.reload();
                });
            }
            if ($scope.invoiceDetail.invoice_status == 'Complete' || $scope.invoiceDetail.invoice_status == 'Paid' || $scope.invoiceDetail.invoice_status == 'Part Paid') {
                $scope.isDisabledApprvd = true;
            }
            if ($scope.userRight != 1)
                $scope.isDisabledApprvd = true;
            if ( ['Complete','Paid','Part Paid','Cancel'].includes($scope.invoiceDetail.invoice_status)) {
                $scope.editDisabled = true;
            }    

            var newPaydueDate = TodayAfterNumberOfDays($scope.invoiceDetail.created_date, $scope.invoiceDetail.number_of_days)
            if (($scope.invoiceDetail.invoice_type != 'draft' && $scope.invoiceDetail.invoice_status != 'Cancel' && $scope.invoiceDetail.invoice_status != 'Complete' && $scope.invoiceDetail.is_approved == 1)) {
                if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
                    $scope.reminderBtnHideShow = true;
                }
            }

            setTimeout(() => {
                $scope.printIt($scope.invoiceDetail.invoice_number);
            }, 500);

        }).error(errorCallback);
    }
    
    $scope.isPdfdownload = false;
    $scope.printIt = function (invoiceNo) {
        let pdfName = invoiceNo ? invoiceNo : 'Client Invoice';
        $scope.isPdfdownload = true;

        kendo.drawing.drawDOM($("#pdfExport")).then(function (group) {
            group.options.set("font", "8px DejaVu Sans");
            kendo.drawing.pdf.saveAs(group, pdfName + ".pdf");
        });

        $timeout(function () {
           $scope.cancel();
        }, 1000);
    
    }

    $scope.cancel = function () {
        $uibModalInstance.close();
    }


}).controller('statementController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $route, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.userId = $window.localStorage.getItem("session_iUserId");
    $scope.dueAmount = 0;
    $scope.search = {}
    var statmntPaid = [];
    var statmntPartPaid = [];
    var statmntUnPaid = [];
    var statmntReminderPaid = [];
    $scope.allCount = 0;
    $scope.partPaidCount = 0;
    $scope.unPaidCount = 0;
    $scope.paidCount = 0;
    $scope.remiderPayCount = 0;

    const loc = $location.absUrl().split('/');
    $scope.statementType = function (type) {
        
    }

    if ($scope.userRight == '2') {
        var id = $scope.userId;
        rest.path = "getFreelanceStatement/" + id;
        rest.get().success(function (data) {
            $scope.stamementList = data;
            angular.forEach($scope.stamementList, function (val, i) {
                if (val.is_approved == 1) {
                    if (val.paid_amount != 0 && val.paid_amount < val.Amount) {
                        statmntPartPaid.push(val);
                    }
                    if (val.paid_amount == 0) {
                        statmntUnPaid.push(val);
                    }
                    if (val.invoice_status == 'Complete' || (val.is_approved == 1 && val.paid_amount > 0)) {
                        statmntPaid.push(val);
                    }
                    if (val.invoice_status == 'Open' && val.is_approved == 1 && val.reminder_sent == 1) {
                        statmntReminderPaid.push(val);
                    }

                }
            });
            $scope.allCount = $scope.stamementList.length;
            $scope.partPaidCount = statmntPartPaid.length;
            $scope.unPaidCount = statmntUnPaid.length;
            $scope.paidCount = statmntPaid.length;
            $scope.remiderPayCount = statmntReminderPaid.length;

            // angular.forEach($scope.stamementList, function(val, i) {
            //     $scope.stamementList[i].paymentDueDate = TodayAfterNumberOfDays(val.created_date, $scope.invoicePeriod.number_of_days);
            // })
            Array.prototype.sum = function (prop) {
                var total = 0
                for (var i = 0, _len = this.length; i < _len; i++) {
                    total += this[i][prop]
                }
                return total
            }
            var tolaAmount = $scope.stamementList.sum('Amount');
            var paidAmount = $scope.stamementList.sum('paid_amount');

            $scope.dueAmount = tolaAmount - paidAmount;

        });

        $scope.highlightSearch = "All";
        $scope.sortStatement = function (action, eID) {
            switch (action) {
                case "All":
                    $scope.highlightSearch = "All";
                    $route.reload();
                    break;
                case "Complete":
                    $scope.stRow = "Complete";
                    $scope.highlightSearch = "Complete";
                    $scope.stamementList = statmntPaid;
                    break;
                case "partPaid":
                    $scope.jobRow = "partPaid";
                    $scope.highlightSearch = "partPaid";
                    $scope.stamementList = statmntPartPaid;
                    break;
                case "unPaid":
                    $scope.jobRow = "unPaid";
                    $scope.highlightSearch = "unPaid";
                    $scope.stamementList = statmntUnPaid;
                    break;
                case "reminderPaid":
                    $scope.jobRow = "reminderPaid";
                    $scope.highlightSearch = "reminderPaid";
                    $scope.stamementList = statmntReminderPaid;
                    break;

            }
            //scrollToId(eID);
        }

    } else {

        $scope.getFreelance = function (id) {
            if (id != undefined) {
                rest.path = "getFreelanceStatement/" + id;
                rest.get().success(function (data) {
                    $scope.stamementList = data;
                    Array.prototype.sum = function (prop) {
                        var total = 0
                        for (var i = 0, _len = this.length; i < _len; i++) {
                            total += this[i][prop]
                        }
                        return total
                    }
                    var tolaAmount = $scope.stamementList.sum('Amount');
                    var paidAmount = $scope.stamementList.sum('paid_amount');

                    $scope.dueAmount = tolaAmount - paidAmount;
                });
            }
        }
    }

    $scope.getInvoicePeriod = function (id) {
        rest.path = "getOneInvoicePeriod/" + 1;
        rest.get().success(function (data) {
            $scope.invoicePeriod = data;
        }).error(errorCallback);
    }
    $scope.getInvoicePeriod();
    $scope.openFilter = function () {
        $('#filterRows').slideToggle();
    }

    $scope.totalAmountAdmin = 0;
    $scope.totalPendingAmountAdmin = 0;
    $scope.filterStatement = function (frmId) {
        if (jQuery.isEmptyObject($scope.search)) {
            notification('Please select option to filter statement.', 'warning');
            return false;
        } else {
            if (!$scope.search.dueDateFrom && !$scope.search.dueDateTo) {

            } else if ($scope.search.dueDateFrom && !$scope.search.dueDateTo) {
                notification('You have to select both dates.', 'warning');
                return false;
            } else if (!$scope.search.dueDateFrom && $scope.search.dueDateTo) {
                notification('You have to select both dates.', 'warning');
                return false;
            }
            if ($scope.search.dueDateFrom) {
                $scope.search.dueDateFrom = originalDateFormatNew($scope.search.dueDateFrom);
                $scope.search.dueDateFrom = moment($scope.search.dueDateFrom).subtract($scope.invoicePeriod.number_of_days, 'd').format('YYYY-MM-DD');
            }

            if ($scope.search.dueDateTo) {
                $scope.search.dueDateTo = originalDateFormatNew($scope.search.dueDateTo);
                $scope.search.dueDateTo = moment($scope.search.dueDateTo).subtract($scope.invoicePeriod.number_of_days, 'd').format('YYYY-MM-DD');
            }

            rest.path = 'filterStatement';
            rest.post($scope.search).success(function (data) {
                if (data) {
                    $scope.stamementList = data;
                    if ($scope.stamementList.length == 0) {
                        notification('No record found', 'warning');
                        document.getElementById("filterForm").reset();
                        $("#resource").select2("val", "");
                        $("#comapanyCode").select2("val", "");
                        $("#invoiceStatus").select2("val", "");
                        $("#invoiceNumber").select2("val", "");
                        $('#filterRows').slideUp();
                        $scope.search = {};
                    } else {
                        angular.forEach($scope.stamementList, function (val, i) {
                            $scope.stamementList[i].paymentDueDate = TodayAfterNumberOfDays(val.created_date, $scope.invoicePeriod.number_of_days);
                        })

                        Array.prototype.sum = function (prop) {
                            var total = 0
                            for (var i = 0, _len = this.length; i < _len; i++) {
                                total += this[i][prop]
                            }
                            return total
                        }

                        $scope.totalAmountAdmin = $scope.stamementList.sum('Amount');
                        $scope.paidAmountAdmin = $scope.stamementList.sum('paid_amount');
                        $scope.totalPendingAmountAdmin = $scope.totalAmountAdmin - $scope.paidAmountAdmin;

                        document.getElementById("filterForm").reset();
                        $("#resource").select2("val", "");
                        $("#comapanyCode").select2("val", "");
                        $("#invoiceStatus").select2("val", "");
                        $("#invoiceNumber").select2("val", "");
                        $('#filterRows').slideUp();
                        $scope.search = {};
                    }
                } else {

                }
            }).error(errorCallback);
        }
    }

}).controller('statementClientController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $route, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.userId = $window.localStorage.getItem("session_iUserId");
    $scope.dueAmount = 0;
    $scope.search = {}
    var statmntPaid = [];
    var statmntPartPaid = [];
    var statmntUnPaid = [];
    var statmntReminderPaid = [];
    $scope.allCount = 0;
    $scope.partPaidCount = 0;
    $scope.unPaidCount = 0;
    $scope.paidCount = 0;
    $scope.remiderPayCount = 0;

    const loc = $location.absUrl().split('/');
    
    $scope.statementType = function (type) {
        
    }

    if ($scope.userRight == '2') {
        var id = $scope.userId;
        rest.path = "getClientStatement/" + id;
        rest.get().success(function (data) {
            $scope.stamementList = data;
            angular.forEach($scope.stamementList, function (val, i) {
                if (val.is_approved == 1) {
                    if (val.paid_amount != 0 && val.paid_amount < val.Amount) {
                        statmntPartPaid.push(val);
                    }
                    if (val.paid_amount == 0) {
                        statmntUnPaid.push(val);
                    }
                    if (val.invoice_status == 'Complete' || (val.is_approved == 1 && val.paid_amount > 0)) {
                        statmntPaid.push(val);
                    }
                    if (val.invoice_status == 'Open' && val.is_approved == 1 && val.reminder_sent == 1) {
                        statmntReminderPaid.push(val);
                    }

                }
            });
            $scope.allCount = $scope.stamementList.length;
            $scope.partPaidCount = statmntPartPaid.length;
            $scope.unPaidCount = statmntUnPaid.length;
            $scope.paidCount = statmntPaid.length;
            $scope.remiderPayCount = statmntReminderPaid.length;

            // angular.forEach($scope.stamementList, function(val, i) {
            //     $scope.stamementList[i].paymentDueDate = TodayAfterNumberOfDays(val.created_date, $scope.invoicePeriod.number_of_days);
            // })
            Array.prototype.sum = function (prop) {
                var total = 0
                for (var i = 0, _len = this.length; i < _len; i++) {
                    total += this[i][prop]
                }
                return total
            }
            var tolaAmount = $scope.stamementList.sum('Amount');
            var paidAmount = $scope.stamementList.sum('paid_amount');

            $scope.dueAmount = tolaAmount - paidAmount;

        });

        $scope.highlightSearch = "All";
        $scope.sortStatement = function (action, eID) {
            switch (action) {
                case "All":
                    $scope.highlightSearch = "All";
                    $route.reload();
                    break;
                case "Complete":
                    $scope.stRow = "Complete";
                    $scope.highlightSearch = "Complete";
                    $scope.stamementList = statmntPaid;
                    break;
                case "partPaid":
                    $scope.jobRow = "partPaid";
                    $scope.highlightSearch = "partPaid";
                    $scope.stamementList = statmntPartPaid;
                    break;
                case "unPaid":
                    $scope.jobRow = "unPaid";
                    $scope.highlightSearch = "unPaid";
                    $scope.stamementList = statmntUnPaid;
                    break;
                case "reminderPaid":
                    $scope.jobRow = "reminderPaid";
                    $scope.highlightSearch = "reminderPaid";
                    $scope.stamementList = statmntReminderPaid;
                    break;

            }
            //scrollToId(eID);
        }

    } else {

        $scope.getFreelance = function (id) {
            if (id != undefined) {
                rest.path = "getClientStatement/" + id;
                rest.get().success(function (data) {
                    $scope.stamementList = data;
                    Array.prototype.sum = function (prop) {
                        var total = 0
                        for (var i = 0, _len = this.length; i < _len; i++) {
                            total += this[i][prop]
                        }
                        return total
                    }
                    var tolaAmount = $scope.stamementList.sum('Amount');
                    var paidAmount = $scope.stamementList.sum('paid_amount');

                    $scope.dueAmount = tolaAmount - paidAmount;
                });
            }
        }
    }

    $scope.getInvoicePeriod = function (id) {
        rest.path = "getOneInvoicePeriod/" + 1;
        rest.get().success(function (data) {
            $scope.invoicePeriod = data;
        }).error(errorCallback);
    }
    $scope.getInvoicePeriod();
    $scope.openFilter = function () {
        $('#filterRows').slideToggle();
    }

    $scope.totalAmountAdmin = 0;
    $scope.totalPendingAmountAdmin = 0;
    $scope.filterClientStatement = function (frmId) {
        if (jQuery.isEmptyObject($scope.search)) {
            notification('Please select option to filter statement.', 'warning');
            return false;
        } else {
            if (!$scope.search.dueDateFrom && !$scope.search.dueDateTo) {

            } else if ($scope.search.dueDateFrom && !$scope.search.dueDateTo) {
                notification('You have to select both dates.', 'warning');
                return false;
            } else if (!$scope.search.dueDateFrom && $scope.search.dueDateTo) {
                notification('You have to select both dates.', 'warning');
                return false;
            }
            if ($scope.search.dueDateFrom) {
                $scope.search.dueDateFrom = originalDateFormatNew($scope.search.dueDateFrom);
                $scope.search.dueDateFrom = moment($scope.search.dueDateFrom).subtract($scope.invoicePeriod.number_of_days, 'd').format('YYYY-MM-DD');
            }

            if ($scope.search.dueDateTo) {
                $scope.search.dueDateTo = originalDateFormatNew($scope.search.dueDateTo);
                $scope.search.dueDateTo = moment($scope.search.dueDateTo).subtract($scope.invoicePeriod.number_of_days, 'd').format('YYYY-MM-DD');
            }

            rest.path = 'filterClientStatement';
            rest.post($scope.search).success(function (data) {
                if (data) {
                    $scope.stamementList = data;
                    if ($scope.stamementList.length == 0) {
                        notification('No record found', 'warning');
                        document.getElementById("filterForm").reset();
                        $("#resource").select2("val", "");
                        $("#comapanyCode").select2("val", "");
                        $("#invoiceStatus").select2("val", "");
                        $("#invoiceNumber").select2("val", "");
                        $('#filterRows').slideUp();
                        $scope.search = {};
                    } else {
                        angular.forEach($scope.stamementList, function (val, i) {
                            $scope.stamementList[i].paymentDueDate = TodayAfterNumberOfDays(val.created_date, $scope.invoicePeriod.number_of_days);
                        })

                        Array.prototype.sum = function (prop) {
                            var total = 0
                            for (var i = 0, _len = this.length; i < _len; i++) {
                                total += this[i][prop]
                            }
                            return total
                        }

                        $scope.totalAmountAdmin = $scope.stamementList.sum('Amount');
                        $scope.paidAmountAdmin = $scope.stamementList.sum('paid_amount');
                        $scope.totalPendingAmountAdmin = $scope.totalAmountAdmin - $scope.paidAmountAdmin;

                        document.getElementById("filterForm").reset();
                        $("#resource").select2("val", "");
                        $("#comapanyCode").select2("val", "");
                        $("#invoiceStatus").select2("val", "");
                        $("#invoiceNumber").select2("val", "");
                        $('#filterRows').slideUp();
                        $scope.search = {};
                    }
                } else {

                }
            }).error(errorCallback);
        }
    }

}).controller('orderController', function ($scope, $log, $location, $route, rest, $window, $rootScope, $timeout, $interval) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.checkOrder = "";
    $window.localStorage.clientproCustomerdataName = "";
    $window.localStorage.clientproCustomerName = "";
    $window.localStorage.orderID = "";
    $window.localStorage.orderNo = "";
    $window.localStorage.abbrivation = "";
    $window.localStorage.projectJobChainOrderId = "";
    $window.localStorage.contactMsgId = "";
    $window.localStorage.projectTeamMsg = "";
    $window.localStorage.orderBlock = "";
    $window.localStorage.genfC = "";
    $window.localStorage.jobfolderId = " ";
    $window.localStorage.setItem('projectOrderName', "");

    rest.path = 'orderGet/' + $window.localStorage.getItem("session_iUserId");
    rest.get().success(function (data) {
        $scope.orders = data;
        angular.forEach(data, function (v, i) {
            $scope.orderIdNum = v.order_id;
        });

        $window.localStorage.ordernumID = $scope.orderIdNum + 1;
        if (data['delete']) {
            $route.reload();
        }
    }).error(errorCallback);

    $scope.jobDetail = function (id) {
        $location.path('/jobs-detail/' + id);
    }

    $scope.deleteOrder = function (id) {
        bootbox.confirm("Are you sure you want to delete this user?<br/><strong>Please note that ALL Info. under this User will also be deleted</strong>", function (result) {
            if (result == true) {
                rest.path = 'deleteOrder/' + id;
                rest.delete().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    if ($window.localStorage.orderID) {
        rest.path = 'order/' + $window.localStorage.orderID;
        rest.get().success(function (data) {
            // debugger;
            $scope.orderdata = data;
            $window.localStorage.orderNo = $scope.orderdata.order_number + 1;
            $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
            $window.localStorage.orderID = id;
            $window.localStorage.iUserId = id;
            $window.localStorage.userType = 3;
            $window.localStorage.currentUserName = data.vClientName;
            $location.path('/project-customer');
        }).error(errorCallback);
    }

    $scope.edit = function (id) {
        if (id) {
            rest.path = 'order/' + id + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                // debugger;
                $scope.orderdata = data;
                $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                $window.localStorage.orderNo = $scope.orderdata.order_number;
                $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                $window.localStorage.orderID = id;
                $window.localStorage.iUserId = id;
                $window.localStorage.userType = 3;
                $window.localStorage.currentUserName = data.vClientName;
                $window.localStorage.genfC = 1;
                $location.path('/general/'+data.order_id);
            }).error(errorCallback);
            $window.localStorage.orderBlock = 1;
        }
    };

}).controller('generalController', function ($scope, $log, $location, $route, fileReader, rest, $window, $rootScope, $routeParams, $uibModal, $timeout, $cookieStore, $compile, $interval, $translate) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.isNewProject = $window.localStorage.getItem("isNewProject");
    if ($window.localStorage.orderID == undefined) {
        $location.path('/dashboard1');
        notification('Please create project.', 'warning');
        return false;
    }
    
    $scope.routeOrderID = '';
    //if ($window.localStorage.orderID)
        //$scope.routeOrderID = ($routeParams.id) ? $routeParams.id : $window.localStorage.orderID;
    $scope.routeOrderID = ($routeParams.id) ? $routeParams.id : '';
    
    $scope.orderUrlID = $scope.routeOrderID ? '/'+$scope.routeOrderID : '';
    
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.generalMsg = " ";
    $window.localStorage.contactMsgId;
    $window.localStorage.projectTeamMsg;
    $window.localStorage.orderBlock;
    $scope.EditedBy = $window.localStorage.getItem('sessionProjectEditedBy');
    $scope.EditedById = ($routeParams.id) ? $routeParams.id : $window.localStorage.getItem('sessionProjectEditedId');
    if ($scope.general == undefined) {
        $window.localStorage.setItem('projectOrderName', '');
    }
    $scope.projectOrderName = $window.localStorage.getItem('projectOrderName');
    $scope.dtSeparator = $window.localStorage.getItem('dtSeparator');

    if(!$scope.routeOrderID){
        $('.checksub').css('display', 'none');
    }
        
    $scope.date = new Date();

    $scope.jobDiscussion = function () {
        if ($window.localStorage.orderID) {
            $location.path('discussion/' + $scope.routeOrderID);
        }
    }

    //Setting Project Status when Create new START
    // $scope.proStatusDisabled = function() {
    //  if ($window.localStorage.abbrivation.length > 1) { // Disbale Dropdown when new projec
    //    return false;
    //   }
    //   else {
    //    return true;
    //   }
    // };

    rest.path = 'proStatusgetOne';
    rest.get().success(function (dataStatus) {
        $scope.proStatusData = dataStatus;
        $timeout(function () {
            angular.element('#project_status').select2('val', $scope.proStatusData.pr_status_id).trigger('change'); //Default ProjectStatus(In Progrss)
        }, 800);
    }).error(errorCallback);

    //Setting Project Status when Create new END

    rest.path = 'getUserById/' + $window.localStorage.getItem('session_iUserId');
    rest.get().success(function (data) {
        if (!$routeParams.id) {
            var val = $window.localStorage.getItem('session_iUserId');
            if (data.vType == 'QA Specialist') {
                $timeout(function () {
                    angular.element('#qaSpecialist').val(val);
                }, 100);
            } else if (data.vType == 'Project Manager') {
                $timeout(function () {
                    angular.element('#projectManager').val(val);
                }, 100);
            } else if (data.vType == 'Project Coordinator') {
                $timeout(function () {
                    angular.element('#projectCoordinator').val(val);
                }, 100);
            }
        }
    }).error(errorCallback);


    $scope.statusOpt = [{
        name: 'In Preparation',
        value: 'in_preparation'
    }, {
        name: 'Active',
        value: 'active'
    }, {
        name: 'Completed',
        value: 'completed'
    }, {
        name: 'Archivable',
        value: 'archivable'
    }, {
        name: 'Archived',
        value: 'Archived'
    }];

    if ($scope.routeOrderID) {
        rest.path = 'generalfolder/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            $scope.generalFolderCount = data.length;
        }).error(errorCallback);
    }

    if ($scope.routeOrderID && !$window.localStorage.genfC) {
        rest.path = 'generalfolder/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            $window.localStorage.genfC = 1;
        }).error(errorCallback);
    }


    //specialization Select/Deselect All
    $timeout(function () {
        $("#chkAll").click(function () {
            if ($("#chkAll").is(':checked')) {
                var data = ['Finance', 'General', 'General-Agricalture', 'General Art and Culture', 'General-Beauty-Fashion-Make-up',
                    'General Bussiness', 'General Casino & Poker', 'General Entertainment', 'IT-Search Engine Optimization (SEO)', 'IT-Software', 'IT-Software (UI)', 'Legal', 'Legal Patents', 'Medical', 'Medical CLinical Trials', 'Medical Dentisty', 'Medical Health Care',
                    'Technical', 'Technical Automotive', 'Technical Chemistry', 'Technical Electronics', 'Technical Engineering'
                ];
                var dataArray = [];
                $.each(data, function (i, e) { dataArray.push({ "id": i, "text": e }); });
                $("#specialization").select2("data", dataArray, true);
            } else {
                angular.element('#specialization').select2('val', '');
            }
        });
    }, 100);

    //customer
    //if ($window.localStorage.orderID) {
    if($scope.routeOrderID){        
        
        //rest.path = 'customer/' + $window.localStorage.orderID;
        $routeParams.id = ($routeParams.id) ? $routeParams.id : $window.localStorage.orderID;
        
        rest.path = 'customer/' + $routeParams.id;
        rest.get().success(function (res) {
            $scope.customer = res;
            
            if (res) {
                rest.path = 'client/' + $scope.customer.client;
                rest.get().success(function (cData) {
                    $scope.directClientData = cData
                }).error(function (data, error, status) { });

                $window.localStorage.setItem('directClientIdStore', $scope.customer.client);
                $scope.customerField = true;
                //general start                
                rest.path = 'general/' + $routeParams.id + '/' + $scope.customer.client;
                rest.get().success(function (data) {
                    $scope.general = data;
                    
                    $scope.projectOrderName = data.order_no;
                    $window.localStorage.setItem('projectOrderName', data.order_no);
                    angular.element('#order_number_id').val(data.order_no);
                    var check = false;
                    var getComma = /,/;
                    if (getComma.test(data.specialization) == true) {
                        check = true;
                    } else {
                        check = false;
                    }

                    $timeout(function () {
                        if (check) {
                            angular.element('#specialization').select2('val', data.specialization.split(','));
                        } else {
                            angular.element('#specialization').val(data.specialization).trigger('change');
                        }

                        angular.element('#project_status').select2('val', $scope.general.project_status).trigger('change');

                        angular.element('#projectCoordinator').select($scope.customer.vProjectCoordinator);
                        angular.element('#projectCoordinator').trigger('change');

                        angular.element('#projectManager').select($scope.customer.vProjectManager);
                        angular.element('#projectManager').trigger('change');

                        angular.element('#qaSpecialist').select($scope.general.vQASpecialist);
                        angular.element('#qaSpecialist').trigger('change');

                        angular.element('#project_type').select($scope.general.project_type);
                        angular.element('#project_type').trigger('change');

                        angular.element('#conatct-person').select($scope.customer.contact);
                        angular.element('#conatct-person').trigger('change');

                        angular.element('#indirect_customer').select($scope.customer.indirect_customer);
                        angular.element('#indirect_customer').trigger('change');
                        
                        if($scope.customer.sub_pm)
                            $scope.checksub_pm = 1;
                        if($scope.customer.sub_pc)
                            $scope.checksub_pc = 1;
                        if($scope.customer.sub_qa)
                            $scope.checksub_qa = 1;

                        angular.element('#projectBranch').select($scope.general.project_branch);
                        angular.element('#projectBranch').trigger('change');

                    }, 100);

                    $timeout(function () {
                        $scope.indirectCustomerName = $('#s2id_indirect_customer').find('.select2-chosen').text();
                        $window.localStorage.setItem('indirectCustomerName', $scope.indirectCustomerName);
                    }, 500);

                    $scope.item_number = data;
                    $scope.general.order_date = $scope.general.order_date;
                    $scope.general.order_date = moment($scope.general.order_date).format($window.localStorage.getItem('global_dateFormat') + ' - HH:mm');
                    var due_timeval = $scope.general.due_date.split(" ")[1];
                    $scope.general.due_date = moment($scope.general.due_date).format($window.localStorage.getItem('global_dateFormat'));
                    angular.element('#due_time').val(due_timeval);
                    if ($scope.general.expected_start_date) {
                        //$scope.general.expected_start_date = moment($scope.general.expected_start_date).format($window.localStorage.getItem('global_dateFormat')+' HH:mm A');
                        $scope.general.expected_start_date = moment($scope.general.expected_start_date).format($window.localStorage.getItem('global_dateFormat') + ' - HH:mm');
                    }

                    $cookieStore.put('generalEdit', $scope.general);
                }).error(errorCallback);
                //general end

                $window.localStorage.clientproCustomerName = $scope.customer.client;
                $window.localStorage.ContactPerson = $scope.customer.contact;
                $routeParams.ClientIdd = res['client'];
                $window.localStorage.clientproCustomerdataName = res['client'];
                $routeParams.id = $routeParams.ClientIdd;
                rest.path = 'contact';
                rest.model().success(function (data) {
                    var cont = [];
                    angular.forEach(data.data, function (val, i) {
                        cont.push({
                            'id': val.iContactId,
                            'text': val.vFirstName + ' ' + val.vLastName
                        });
                    });

                    angular.element('#conatct-person').select2({
                        allowClear: true,
                        data: cont
                    });
                }).error(errorCallback);

                if ($scope.customer.memo) {
                    $scope.warn = true;
                    $timeout(function () {
                        $scope.warn = false;
                    }, 10000);
                }
            }
        }).error(errorCallback);
    } else {
        
        $scope.order = [];
        if ($scope.order == "" || $scope.order == null || $scope.order == undefined) {
            $scope.order = {};
        }
        $scope.order.abbrivation = 1;
        rest.path = 'order';
        rest.post($scope.order).success(function (data) {
            $window.localStorage.iUserId = data.order_id;
            $window.localStorage.orderID = data.order_id;
            $scope.routeOrderID = data.order_id;
            
            $window.localStorage.userType = 3;
            //$route.reload(); //hide to create project multitab in browser 
        }).error(errorCallback);
    }


    $scope.getContact = function (id, element) {
        if(id && id != undefined){
            $window.localStorage.setItem('directClientIdStore', id);
            $routeParams.id = id;
            rest.path = 'contact';
            rest.model().success(function (data) {
                var cont = [];
                angular.forEach(data.data, function (val, i) {
                    var obj = {
                        'id': val.iContactId,
                        'text': val.vFirstName + ' ' + val.vLastName
                    };
                    cont.push(obj);
                });
                angular.element('#' + element).select2({
                    allowClear: true,
                    data: cont
                });
            }).error(errorCallback);

            rest.path = 'orderdataget/' + id;
            rest.get().success(function (data) {
                
                $scope.orderNumber(data);
            }).error(errorCallback);

            rest.path = 'client/' + $scope.customer.client;
            rest.get().success(function (cData) {
                $scope.directClientData = cData
            }).error(function (data, error, status) { });
        }    

    };

    //order number get
    $scope.orderNumber = function (id) {
        $window.localStorage.Checkordernm = id;
        rest.path = 'orderNumberget/' + id;
        rest.get().success(function (data) {
            $scope.code = id;
            $scope.number = data + 1;
            angular.element('#order_number_id').val($scope.code + pad($scope.number, 4));
            angular.element('#itemCode').text($scope.code + pad($scope.number, 4));
            $window.localStorage.setItem('projectOrderName', $scope.code + pad($scope.number, 4));
            //angular.element('#order_date').val(dateToformat($scope.date));
            angular.element('#order_date').val(moment($scope.date).format($window.localStorage.getItem('global_dateFormat') + ' - HH:mm'));
            angular.element('#companyCode').val(id);
            $scope.CompanyCodeVal = id;
            // $scope.orderNomberData($scope.code, $scope.number);
        }).error(errorCallback);
    }

    $scope.customerCntactpersonEmail = function (action, id) {
        switch (action) {
            case 'customer':
                $routeParams.id = id;
                rest.path = 'clientContactEmail/' + $routeParams.id + '/' + $scope.routeOrderID;
                rest.get().success(function (data) {
                    notification('Mail send successfully', 'success');
                    $route.reload();
                }).error(errorCallback);
                break;
            case 'contactperson':
                $window.localStorage.contactMsgId = id;
                if (id == undefined) {
                    notification('Please select contact person name', 'warning');
                } else {
                    var modalInstance = $uibModal.open({
                        animation: $scope.animationsEnabled,
                        templateUrl: 'tpl/contactperMsg.html',
                        controller: 'contactPerMsgController',
                        size: '',
                        resolve: {
                            items: function () {
                                return $scope.data;
                            }
                        }
                    });
                }
                break;
            case 'group':
                $window.localStorage.projectTeamMsg = id;
                if (id == undefined) {
                    notification('Please select contact person name', 'warning');
                } else {
                    var modalInstance = $uibModal.open({
                        animation: $scope.animationsEnabled,
                        templateUrl: 'tpl/projectteammsg.html',
                        controller: 'projectTeamMsgController',
                        size: '',
                        resolve: {
                            items: function () {
                                return $scope.data;
                            }
                        }
                    });
                }
        }
    }

    // keydown for number of item
    $scope.keydownevt = function () {
        if (event.keyCode == 69 || event.keyCode == 16) {
            notification('Only allow numbers.', 'warning');
            var val = angular.element('#no_of_items').val('');
            return false;
        }

    };

    $scope.startProject = function (status) {
        if (status == 1) {
            notification('Project already started.', 'warning');
        } else if (status == undefined) {
            notification('Please save data to start project.', 'warning');
        } else {
            var proStartStatus = {
                "project_start_status": 1
            }
            $routeParams.id = $scope.routeOrderID;
            rest.path = 'projectStartStatus';
            rest.put(proStartStatus).success(function (data) {
                if (data) {
                    notification('Project start successfully.', 'success');
                    $location.path('/items');
                }
            }).error(errorCallback);
        }
    }

    $scope.tmpOrderId = 0;
    $scope.saveGeneral = function (formId) {
        if ($window.localStorage.orderID) {
            if (angular.element("#" + formId).valid()) {
                //general
                if ($scope.general.general_id) {
                    var property = [];
                    var order_no = [];
                    $scope.general.order_no = angular.element("[id^=order_number_id]").val();
                    $scope.general.company_code = angular.element("[id^=companyCode]").val();

                    $scope.general.order_date = angular.element("[id^=order_date]").val();
                    $scope.general.order_date = originalDateFormatDash($scope.general.order_date);
                    $scope.general.order_date = moment($scope.general.order_date).format('YYYY-MM-DD HH:mm:ss');

                    $window.localStorage.orderNumber = $scope.general.order_no;
                    $scope.general.properties = JSON.stringify($scope.properties);
                    $routeParams.id = $scope.general.general_id;
                    var due_timeval1 = angular.element('#due_time').val();
                    $scope.general.due_date = angular.element('#due_date').val();
                    if ($scope.general.due_date) {
                        $scope.general.due_date = originalDateFormatDash($scope.general.due_date + ' - ' + due_timeval1);
                        $scope.general.due_date = moment($scope.general.due_date).format('YYYY-MM-DD HH:mm');
                    }

                    $scope.general.expected_start_date = angular.element('#expected_start_date').val();
                    if ($scope.general.expected_start_date) {
                        //$scope.general.expected_start_date = originalDateFormatNew($scope.general.expected_start_date);
                        $scope.general.expected_start_date = originalDateFormatDash($scope.general.expected_start_date);
                        $scope.general.expected_start_date = moment($scope.general.expected_start_date).format('YYYY-MM-DD HH:mm:ss');
                    }
                    //$scope.general.due_date = angular.element('#due_date').val();
                    $scope.general.project_price = parseFloat(angular.element('#project_price').val());
                    $scope.general.project_name = angular.element('#project_name').val();

                    //Project start recent activity store in cookie
                    if ($scope.general && $cookieStore.get('generalEdit')) {
                        var arr1 = $.map($scope.general, function (el) {
                            return el;
                        });
                        var arr2 = $.map($cookieStore.get('generalEdit'), function (el) {
                            return el;
                        });

                        if (array_diff(arr1, arr2) != "") {
                            var obj = [];
                            if ($cookieStore.get('projectRecentEdit') != undefined) {
                                angular.forEach($cookieStore.get('projectRecentEdit'), function (val, i) {
                                    obj.push(val);
                                });
                            }
                            obj.push($scope.routeOrderID);
                            $cookieStore.put('projectRecentEdit', obj);
                            $cookieStore.remove('generalEdit');
                        }
                    }

                    $scope.general.specialization = $scope.general.specialization.toString().includes(',') ? ($scope.general.specialization).split(',').pop() : $scope.general.specialization; 
                    
                    delete $scope.general['vProjectCoordinator'];
                    delete $scope.general['vProjectManager'];
                    delete $scope.general['vQASpecialist'];
                    //Project end  recent activity store in cookie
                    rest.path = 'general';
                    rest.put($scope.general).success(function (data) {

                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = $scope.general.order_id;
                        $scope.logMaster.log_title = $scope.general.order_no;
                        $scope.logMaster.log_type = "update";
                        $scope.logMaster.log_status = "project";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end

                        //set isNewProject to false
                        $window.localStorage.setItem("isNewProject", "false");

                        const subPm = angular.element('#subProjectManager').val();
                        if(subPm)
                            $scope.customer.sub_pm = subPm.includes(',') ? subPm.split(',')[1] : subPm; 
                        else
                            $scope.customer.sub_pm = 0;

                        const subPc = angular.element('#subProjectCoordinator').val();
                        if(subPc)
                            $scope.customer.sub_pc = subPc.includes(',') ? subPc.split(',')[1] : subPc; 
                        else
                            $scope.customer.sub_pc = 0;    
                        
                        const subQA = angular.element('#subQA').val();
                        if(subQA)
                            $scope.customer.sub_qa = subQA.includes(',') ? subQA.split(',')[1] : subQA; 
                        else
                            $scope.customer.sub_qa = 0;    
                        
                        //Update $scope.customer object data
                        $routeParams.id = $scope.customer.c_id;
                        rest.path = 'customer';
                        rest.put($scope.customer).success(function (data) {
                            
                            if (data.indirectData) {
                                $timeout(function () {
                                    $window.localStorage.setItem('indirectCustomerName', data.indirectData.vUserName)
                                    //$location.path('/items');
                                    $location.path('/items/'+$scope.general.order_id);
                                }, 500);
                            }

                        }).error(errorCallback);

                        //$location.path('/items');
                    }).error(errorCallback);
                } else {
                    var property = [];
                    var order_no = [];
                    angular.element("[id^=order_number_id]").each(function (i, val) {
                        order_no.push({
                            id: val.id,
                            value: val.value
                        });
                    });

                    $scope.general.company_code = angular.element("[id^=companyCode]").val();
                    $scope.general.properties = JSON.stringify($scope.properties);
                    $scope.general.order_no = angular.element("[id^=order_number_id]").val();

                    $scope.general.order_date = angular.element("[id^=order_date]").val();
                    //$scope.general.order_date = originalDateFormatNew($scope.general.order_date);
                    $scope.general.order_date = originalDateFormatDash($scope.general.order_date);
                    $scope.general.order_date = moment($scope.general.order_date).format('YYYY-MM-DD HH:mm:ss');

                    $scope.general.expected_start_date = angular.element('#expected_start_date').val();
                    if ($scope.general.expected_start_date) {
                        //$scope.general.expected_start_date = originalDateFormatNew($scope.general.expected_start_date);
                        $scope.general.expected_start_date = originalDateFormatDash($scope.general.expected_start_date);
                        $scope.general.expected_start_date = moment($scope.general.expected_start_date).format('YYYY-MM-DD HH:mm:ss');
                    }
                    /*$scope.general.due_date = angular.element('#due_date').val();
                    if($scope.general.due_date){
                        $scope.general.due_date = originalDateFormatNew($scope.general.due_date);
                        $scope.general.due_date = moment($scope.general.due_date).format('YYYY-MM-DD HH:mm:ss');
                    }*/
                    var due_timeval1 = angular.element('#due_time').val();
                    $scope.general.due_date = angular.element('#due_date').val();
                    if ($scope.general.due_date) {
                        $scope.general.due_date = originalDateFormatDash($scope.general.due_date + ' - ' + due_timeval1);
                        $scope.general.due_date = moment($scope.general.due_date).format('YYYY-MM-DD HH:mm');
                    }
                    $scope.general.specialization = $scope.general.specialization.toString().includes(',') ? ($scope.general.specialization).split(',').pop() : $scope.general.specialization;

                    $window.localStorage.orderNumber = $scope.general.order_no;
                    $scope.routeOrderID = $scope.routeOrderID ? $scope.routeOrderID : $window.localStorage.orderID;
                    
                    $scope.general.order_id = $scope.routeOrderID;
                    
                    $scope.general.project_status = $scope.proStatusData.pr_status_id;
                    $scope.general.project_createdBy = $window.localStorage.getItem('session_iUserId');
                    
                        
                    rest.path = 'general';
                    rest.post($scope.general).success(function (data) {
                        
                        $window.localStorage.setItem('tmpOrderId', data.order_data.order_id);
                        $scope.tmpOrderId = data.order_data.order_id;
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = $scope.general.order_id;
                        $scope.logMaster.log_title = $scope.general.order_no;
                        $scope.logMaster.log_type = "add";
                        $scope.logMaster.log_status = "project";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end

                        $cookieStore.put('projectRecentEdit', $scope.routeOrderID);
                        //$location.path('/items');
                        // if($scope.tmpOrderId)
                        //     $location.path('/items/'+$scope.tmpOrderId);
                        
                    }).error(errorCallback);

                    //customer
                    $timeout(function () {

                        if ($scope.customer.c_id) {
                            
                            $window.localStorage.ContactPerson = $scope.customer.contact;
                            $window.localStorage.clientproCustomerName = $scope.customer.client;
                            $routeParams.id = $scope.customer.c_id;
                            rest.path = 'customer';
                            rest.put($scope.customer).success(function (data) {

                            }).error(errorCallback);
                        } else {
                            
                            $window.localStorage.ContactPerson = $scope.customer.contact;
                            $window.localStorage.clientproCustomerName = $scope.customer.client;
                            $scope.project_coordinator = angular.element('#projectCoordinator').val();
                            $scope.project_manager = angular.element('#projectManager').val();
                            $scope.QA_specialist = angular.element('#qaSpecialist').val();
                            $scope.customer.project_coordinator = $scope.project_coordinator;
                            $scope.customer.project_manager = $scope.project_manager;
                            $scope.customer.QA_specialist = $scope.QA_specialist;
                            $scope.customer.order_id = $scope.routeOrderID;
                            rest.path = 'customer';
                            rest.post($scope.customer).success(function (data) {

                            }).error(errorCallback);

                            $scope.or = {};
                            $scope.order_number = angular.element("[id^=order_number_id]").val();
                            //$scope.abbrivation = angular.element("[id^=companyCode]").val();
                            $scope.or.order_number = $scope.order_number.slice(-4);
                            //$scope.or.abbrivation = $scope.abbrivation;
                            $scope.or.abbrivation = $scope.CompanyCodeVal;
                            $routeParams.id = $scope.routeOrderID;
                            rest.path = 'order';
                            rest.put($scope.or).success(function (data) {
                                
                                $window.localStorage.iUserId = data.order_id;
                                $window.localStorage.userType = 3;
                            }).error(errorCallback);

                            // //filemanager add order id                
                            // $scope.cu = {};
                            // $scope.order_number = angular.element("#order_number_id").val();
                            // $scope.cu.order_number = $scope.order_number;
                            // $routeParams.id = $window.localStorage.orderID;
                            // rest.path = 'orderfileSave';
                            // rest.put($scope.cu).success(function(data) {

                            // }).error(errorCallback);
                        }
                    }, 100);

                    /*Add Number Of Items in item Section defined in general section START*/
                    // var OId = $window.localStorage.getItem('tmpOrderId') 
                    // if(OId != null || OId !=undefined || OId !=''){
                    //     $timeout(function() {
                    //         $scope.ItemData =  {} 
                    //         $scope.ItemData.no_of_items = $scope.general.no_of_items;
                    //         $scope.ItemData.order_id = $window.localStorage.getItem('tmpOrderId');
                    //         rest.path = 'AddNumberOfItems';
                    //         rest.post($scope.ItemData).success(function(data) {

                    //         }).error(errorCallback);
                    //     },550);
                    // }else{
                    //     notification('error','warning');
                    // }

                    $timeout(function () {
                        
                        if($scope.tmpOrderId)
                            $location.path('/items/'+$scope.tmpOrderId);
                        else
                            $location.path('/items');
                        //set isNewProject to false
                        $window.localStorage.setItem("isNewProject", "false");
                    }, 1000);

                    /*Add Number Of Items in item Section defined in general section END*/
                }
            }
        } else {
            notification('Please Create order First', 'warning');
        }
    };

    $scope.generalFilemanager = function () {
        var checkOrder = angular.element("[id^=order_number_id]").val();
        if ($window.localStorage.orderID && checkOrder) {
            var property = [];
            var order_no = [];

            angular.element("[id^=order_number_id]").each(function (i, val) {
                order_no.push({
                    id: val.id,
                    value: val.value
                });
            });

            $scope.general.company_code = angular.element("[id^=companyCode]").val();
            $scope.general.properties = JSON.stringify($scope.properties);
            $scope.general.order_no = angular.element("[id^=order_number_id]").val();
            $scope.general.order_date = angular.element("[id^=order_date]").val();
            $scope.general.due_date = angular.element('#end_date').val();
            $window.localStorage.orderNumber = $scope.general.order_no;
            $scope.general.order_id = $scope.routeOrderID;

            rest.path = 'general';
            rest.post($scope.general).success(function (data) {
                $location.path('/filemanager/general');
            }).error(errorCallback);
        } else {
            notification("Please first create project customer", "warning");
        }
    }

    $scope.generalEmail = function (id) {
        if (id != undefined && id != " " && id != null) {
            $window.localStorage.generalMsg = id;
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/generalmsg.html',
                controller: 'generalmsgController',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.data;
                    }
                }
            });
        } else {
            notification('Please Add Email', 'warning');
        }
    };
    /* Redirect To Project Jobs Section */
    $scope.goTojobDetail = function () {
        $location.path('/jobs-detail/' + $scope.routeOrderID);
    }

    $scope.openProfile = function (directClientId) {
        $routeParams.clientId = directClientId;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/profileView.html',
            controller: 'profileViewController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
    };

    $scope.AccountChange = () => {
        var account = angular.element('#indirect_customer').select2('data');
        
        $scope.indirectCustomerName = account.text;
        $window.localStorage.setItem('indirectCustomerName', account.text);
    }
    $scope.accountPopup = function () {
        
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/account_popup.html',
            controller: 'accountPopupController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            // debugger;
            $scope.selected = selectedItem;
            rest.path = 'clientlistindirect_show';
            rest.get().success(function(data) {
                var indirectS2Arr = [];
                $.each(data, function(key, value) {
                    var obj = {
                        'id': value.iClientId,
                        'text': value.vUserName
                    };
                    indirectS2Arr.push(obj);
                });
                $timeout(function() {
                    angular.element('#indirect_customer').select2({
                        allowClear: true,
                        data: indirectS2Arr,
                        multiple:true,
                        closeOnSelect:true,
                    }).on("change", function (e) {
                        const inputIdS2 = '#s2id_'+$(this).attr('id');
                        if(e.added){
                            $(inputIdS2+' li').each(function() {
                                const childDiv = $(this).children();
                                let eleText = (childDiv[0]) ? childDiv[0].innerText : '';
                                if(eleText){
                                    if(eleText !== e.added.text){
                                        $(inputIdS2+' li').find( "div:contains("+ eleText +")").next().click();
                                    }    
                                }
                            });
                        }    
                    });
                }, 200);
            }).error(function(data, error, status) {});
        });
    };

    $scope.clientContactPopup = function (clientId) {
        let clientName = $('#s2id_clientId1 .select2-search-choice > div').text();;
        const obj = {
            iClientId : clientId,
            clientName : clientName
        }
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/add_clientcontact_popup.html',
            controller: 'clientContactPopupController',
            size: '',
            resolve: {
                items: function () {
                    return obj;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            
            // debugger;
            $scope.selected = selectedItem;
            $routeParams.id = clientId;
            rest.path = 'contact';
            rest.model().success(function (data) {
                var cont = [];
                angular.forEach(data.data, function (val, i) {
                    cont.push({
                        'id': val.iContactId,
                        'text': val.vFirstName + ' ' + val.vLastName
                    });
                });

                angular.element('#conatct-person').select2({
                    allowClear: true,
                    data: cont
                });
            }).error(errorCallback);

        });
    };
    
}).controller('accountPopupController', function ($scope, $log, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    $scope.info = {};
    var currentdate = new Date();

    //$scope.info.vClientNumber = randNumber();

    rest.path = "clientProfileNumber/2";
    rest.get().success(function (data) {
        $scope.info.vClientNumber = pad(data, 3);
    });

    $scope.info.dtCreationDate = currentdate.getDate() + "/" +
        (currentdate.getMonth() + 1) + "/" +
        currentdate.getFullYear() + " " +
        currentdate.getHours() + ":" +
        currentdate.getMinutes() + ":" +
        currentdate.getSeconds();
    
    $scope.saveAccountclient = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.imageSrc) {
                $scope.info.image = $scope.imageSrc;
            }
            $scope.fileId = angular.element('.fileId').text();
            $scope.info.fileId = $scope.fileId;
            rest.path = 'clientsaveindirect';
            rest.post($scope.info).success(function (data) {
                //$window.localStorage.setItem("IndirectClientId", data.iClientId);
                
                //log file start
                $scope.logMaster = {};
                $scope.logMaster.log_type_id = data.iClientId;
                $scope.logMaster.log_title = $scope.info.vUserName;
                $scope.logMaster.log_type = "add";
                $scope.logMaster.log_status = "indirect_cli";
                $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                rest.path = "saveLog";
                rest.post($scope.logMaster).success(function (data) { });

                $scope.selected = {
                    item: 'Saved'
                };
                $uibModalInstance.close($scope.selected.item);
                //$location.path('/client/2');
                //$route.reload();
            }).error(errorCallback);
        }
    };
    
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    
}).controller('clientContactPopupController', function ($scope, $log, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout, items) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    
    $scope.contact = {};
    $scope.contact.iClientId = items.iClientId;
    
    $scope.currentUserName = items.clientName;
    
    $scope.saveContact = function (formId, id) {
        
        if (angular.element("#" + formId).valid()) {
            //if (angular.element("#" + formId).valid() && $scope.isValidMobileNumber) {
            var countryCodeData = angular.element('#iphone').parent().find('.selected-flag').attr('title');
            var countryClass = angular.element('#iphone').parent().find('.selected-flag').find('.iti-flag').attr('class');
            var mobile = angular.element('#iphone').val();
            var countryObj = {
                "countryTitle": countryCodeData,
                "countryFlagClass": countryClass,
                "mobileNumber": mobile
            }
            // [_site_admin_email]
            $scope.contact.vPhone = JSON.stringify(countryObj);
            
            if ($scope.contact.iClientId) {
                rest.path = 'contactsave';
                rest.post($scope.contact).success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_title = $scope.currentUserName;
                    $scope.logMaster.log_type_id = $scope.contact.iClientId;
                    $scope.logMaster.log_type = "update - contact created";
                    $scope.logMaster.log_status = "direct_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $scope.selected = {
                        item: 'Saved'
                    };
                    $uibModalInstance.close($scope.selected.item);
                    //$scope.cancel();
                }).error(errorCallback);
            } else {
                notification('Please create User', 'warning');
                //$route.reload();
            }
            
        } 
        
    };
    
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('profileViewController', function ($scope, $log, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $routeParams.id = $routeParams.clientId;
    if ($routeParams.id) {
        rest.path = 'viewdirectdataget/' + $routeParams.id;
        rest.get().success(function (data) {
            
            $scope.info = data;
            /*rest.path = 'getTaxName/' + $scope.info.vTextType;
            rest.get().success(function(data) {
                $scope.info.vTextType = data.tax_name;
            }).error(errorCallback);*/
            if (data.address1Detail) {
                angular.forEach(JSON.parse(data.address1Detail), function (val, i) {
                    angular.element('#' + val.id).html(val.value);
                });
            }

            angular.element('#iBussinessDeveloper').html(data.iBussinessDeveloper);
            var CountryCode = JSON.parse(data.vPhone).countryTitle;
            var displayCode = '(+' + CountryCode.split('+')[1] + ')';
            $scope.info.vPhone = displayCode + ' ' + JSON.parse(data.vPhone).mobileNumber;
            if (data.Invoice) {
                angular.forEach(JSON.parse(data.Invoice), function (val, i) {
                    angular.element('#' + val.selectInvoice).text(val.invoice);
                });
            }

            $scope.email = data.Invoice ? JSON.parse(data.Invoice) : '';
            $scope.address1 = JSON.parse(data.address1Detail);
            $scope.address2 = JSON.parse(data.address2Detail);
        }).error(errorCallback);

        rest.path = 'viewcontactdirectEdit/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.contactlist = data;
        }).error(errorCallback);

        rest.path = 'getClientpayment/' + $routeParams.id;
        rest.get().success(function (data) {

            if (data == null) {
                $scope.paymentData = {};
            } else {
                $scope.paymentData = data;
            }

            if (data != null) {
                $scope.payment = JSON.parse(data.vPaymentInfo);
                $scope.bank = JSON.parse(data.vBankInfo);
            }

        }).error(errorCallback);

        rest.path = 'clientdirect_login_details/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.clientlist1 = data;
        }).error(errorCallback);

        rest.path = 'PriceListDirectEditgetone/' + $routeParams.id;
        rest.get().success(function (data) {
            
            $scope.price = data;
            if(data){
                var currency = (data && data.currancy_id) ? data.currancy_id.split(',') : 'EUR,€';
                $scope.currencySymbole = currency[1];
                $scope.currencyCode = currency[0];
                $scope.translate = JSON.parse(data['translation']);
                $scope.proofreading = JSON.parse(data['proofreading']);
                $scope.tep = JSON.parse(data['tep']);
            }
        })
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.editClient = function(id){
        $location.path('/edit-client/'+id)
    }

}).controller('generalmsgController', function ($scope, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.generalMsg;

    $scope.bccShow = function () {
        $scope.bccshow = true;
    }
    $scope.ccHideShow = function () {
        angular.element('#ccHideShow').toggleClass('none');
    }
    $scope.bccHideShow = function () {
        angular.element('#bccHideShow').toggleClass('none');
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

    $timeout(function () {
        angular.element('.ng-pristine .btn-toolbar .btn-group:nth-child(4) button:nth-child(2)').remove();
        angular.element('.ng-pristine .btn-toolbar .btn-group:nth-child(4) button:nth-child(3)').remove();
        angular.element('.ng-pristine .btn-toolbar .btn-group:nth-child(4) button:nth-child(4)').remove();
    }, 500);

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                $scope.attachementfile = result;
            });
        $scope.fileAttatchName = file.name;
    };

    rest.path = 'generalMsg';
    rest.get().success(function (data) {
        $scope.cPersonMsg = [];
        $scope.cPersonMsg = data;
        $scope.cPersonMsg.vEmailAddress = $window.localStorage.generalMsg;
        $scope.cPersonMsg.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.sign_detail + '</br><img src="' + data.sign_image + '" width="100px"></div>';
    }).error(errorCallback);

    $scope.ok = function (frmId, message) {
        var data = {
            "file": $scope.attachementfile,
            "data": message
        };

        if (angular.element("#" + frmId).valid()) {
            rest.path = 'sendgeneralMsg';
            rest.post(data).success(function (data) {
                notification('Mail send successfully', 'success');
            }).error(errorCallback);
            $timeout(function () {
                $uibModalInstance.close(data);
                $route.reload();
            }, 100)
        }
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('itemsController', function (allLanguages, $filter, $scope, $log, $window, $compile, $timeout, $uibModal, rest, $route, $rootScope, $routeParams, $location, $cookieStore, $interval, $q) {
    //$window.localStorage.scoopfolderId = $routeParams.id;
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.isNewProject = $window.localStorage.getItem("isNewProject");
    $scope.decimalNumber = $window.localStorage.getItem("DecimalNumber") ? $window.localStorage.getItem("DecimalNumber") : 2;
    if ($scope.isNewProject === 'true') {
        $location.path('/dashboard1');
        notification('Please create project.', 'warning');
        return false;
    }
    if ($window.localStorage.orderID == undefined) {
        $location.path('/dashboard1');
        notification('Please create project.', 'warning');
        return false;
    }
    $scope.routeOrderID = $routeParams.id ? $routeParams.id : $window.localStorage.orderID;
    $scope.orderUrlID = $scope.routeOrderID ? '/'+$scope.routeOrderID : '';
    
    
    $window.localStorage.jobitStatus = " ";
    $scope.EditedBy = $window.localStorage.getItem('sessionProjectEditedBy');
    $scope.dateFormatGlobal = $window.localStorage.getItem('global_dateFormat');
    $scope.itemList = [];
    $scope.specialization = [];
    $scope.specializationArr = '';

    $scope.jobDiscussion = function () {
        //$location.path('discussion/' + $window.localStorage.projectJobChainOrderId);
        $location.path('discussion/' + $scope.routeOrderID);
    }

    $timeout(function () {
        $scope.projectOrderName = $window.localStorage.getItem('projectOrderName');
        
        $scope.indirectCustomerName = $window.localStorage.getItem('indirectCustomerName');
    }, 1000);
    $scope.clientpriceList = {};
    $scope.customer = {};
    $scope.price_ClientID = 0;
    rest.path = 'customer/' + $scope.routeOrderID;
    rest.get().success(function (res) {
        $scope.customer = res;
        $scope.price_ClientID = $scope.customer.client;
        
    })

    if ($window.localStorage.clientproCustomerName) {
        var clinet_id;
        clinet_id = $window.localStorage.clientproCustomerName;
        rest.path = 'client/' + clinet_id;
        rest.get().success(function (data) {
            $scope.clientData = data;
            $timeout(function () {
                if ($scope.clientData.client_currency) {
                    $scope.ClientCurrency = $scope.clientData.client_currency.split(',')[1];
                    $scope.ClientCurrencyName = $scope.clientData.client_currency.split(',')[0];
                }
                angular.element('#crnt1Cur').text($scope.ClientCurrency);
                angular.element('#currency').text($scope.ClientCurrencyName);
            }, 100);
        }).error(errorCallback);
    }

    if ($window.localStorage.orderID) {
        //getting ProjectOrderName and indirect clint name
        rest.path = 'getClientIndirectClient/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            if (data.order_number) {
                $scope.projectOrderData = data;
                var projectOrderName = $scope.projectOrderData.abbrivation + pad($scope.projectOrderData.order_number, 4);
                $window.localStorage.setItem("projectOrderName", projectOrderName);
                $window.localStorage.setItem("indirectCustomerName", $scope.projectOrderData.indirect_customer);
            }
        }).error(errorCallback);


                
        //get single order Detail
        rest.path = 'getOrderSingle/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            $scope.orderData = data;
        }).error(errorCallback);

        rest.path = 'usertaskodueDategate/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            $scope.dueDateItem = data;
        }).error(errorCallback);

        rest.path = 'masterPriceitemget/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            $scope.masterPrice = data;
        }).error(errorCallback);

        $scope.newchildPriceArr = [];
        
        const promise3 = new Promise((resolve, reject) => {
        
        });

        // Get PriceList for client
        $scope.scoopSpecializationArr = '';
        $scope.customerpriceAll = [];
        $scope.custPriceAll = function (data) {
            var deferred = $q.defer();
            rest.path = 'customerpriceAll/' + 1;
            rest.get().success(function (data) {
                var newdata = data;
                $scope.customerpriceAll = data;
                $scope.clientpriceList = data.filter( function (data) {
                    if(data.price_basis)
                        data.price_basis = JSON.parse(data.price_basis)
                    if(data.price_language)
                        data.price_language = JSON.parse(data.price_language)    
                    if(data.specialization)
                        data.specialization = (data.specialization.toString()).split(',');     
                    return data.resource_id == $scope.customer.client;  
                });
                deferred.resolve(newdata);
            }).error(function () {
                deferred.reject();
            });

            return deferred.promise;
        };

        $scope.childPrice = [];
        $scope.childPriceAll = function (data) {        
            var deferredCh = $q.defer();
            rest.path = 'childPriceitemget';
            rest.get().success(function (data) {
                $scope.childPrice = data;
                
                deferredCh.resolve($scope.childPrice);
            }).error( function(){
                deferredCh.reject();
            })
            return deferredCh.promise;
        }    

        // Client Price list fetching
        $scope.changeClientPrice = function(priceId, item_id, specializationArr, langPair){
            
            if(priceId > 0){
                let clientPricelist = $scope.customerpriceAll.filter((e) => e.price_list_id == priceId )
                if(clientPricelist){
                    angular.forEach($scope.newchildPriceArr[item_id], function (val, newi) {
                        angular.forEach(clientPricelist, function (val2, i2) {
                            val2.price_basis.find(x => {
                                    if(val.child_price_id == x.childPriceId){
                                        if(val.child_price_id == x.childPriceId){
                                            if(val.itemId == item_id){
                                                $scope.newchildPriceArr[item_id][newi].rate = x.basePrice; 
                                                
                                            }
                                        }
                                        return x;
                                    }
                                });    
                        });    
                    });
                }
            }else{
                angular.forEach($scope.newchildPriceArr[item_id], function(val, i) {
                    $scope.newchildPriceArr[item_id][i].rate = 0;
                    angular.forEach($scope.clientpriceList, function (val2, i2) {
                        val2.price_basis.find(x => {
                            if(val.child_price_id == x.childPriceId){
                                const spclFound = specializationArr.some(r => (val2.specialization).indexOf(r) >= 0)
                                const lngPairFound = (val2.price_language).some(r => r.languagePrice == langPair)
                                
                                if(val.child_price_id == x.childPriceId && spclFound && lngPairFound){
                                    $scope.newchildPriceArr[item_id][i].rate = x.basePrice;  
                                }
                                return x;
                            }
                        });    
                    });    
                    
                });
            }
        }

        //currency update
        rest.path = 'orderCurrencyMatch/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            if (data.currency) {
                var cur = JSON.parse(data.currency);
                angular.element('#currencyCh').select2('val', cur[0].currency);
                angular.element('#crntCur').text(cur[0].currency);
                angular.element('#defCur').text(data.defCurrency);
                angular.element('#curRate').text(cur[0].curRate);
            }
        }).error(errorCallback);

        //check itemfile manager and delete
        rest.path = "itemFilemanager/" + $scope.routeOrderID;
        rest.delete().success(function (data) {
            if (data != 'No Item') {
                $route.reload();
            }
        }).error(errorCallback);
    }

    $scope.itemfolderOpen = function (id) {
        closeWindows();
        localStorage['scoopfolderId'] = id;
        $window.localStorage.ItemClient = '';
        $window.localStorage.ItemFolderid = id;
        // start to get downloaded folder name with client name
        rest.path = 'customer/' + $scope.routeOrderID;
        rest.get().success(function (res) {
            $scope.customer = res;
            if ($scope.customer) {
                rest.path = 'client/' + $scope.customer.client;
                rest.get().success(function (cData) {
                    $scope.directClientData = cData
                    $window.localStorage.ItemClient = $scope.directClientData.vUserName;
                }).error(function (data, error, status) { });
            }
        })
        // end
        var ItemcodeNumber = angular.element('.itemCode' + id).text();
        //var ItemClient = angular.element('.itemClient'+id).text();
        $window.localStorage.ItemcodeNumber = ItemcodeNumber;
        var itemPopup = $window.open('#/filemanage/item', "popup", "width=1000,height=650");
        itemPopup.addEventListener("beforeunload", function () {
            localStorage['parentId'] = ' ';
            var id1 = $window.localStorage.getItem("scoopFolderRoot");

            // files count 
            rest.path = 'getFilestotal/' + id;
            rest.get().success(function (data) {
                if (data) {
                    $scope.Filestotal = data[0].totalfile;
                }
                //angular.element('#filescount' + id).text($scope.Filestotal);
                $('#filescount' + id).text($scope.Filestotal);
            }).error(errorCallback);
            // files couunt end
            
            return false;
        }, false);

        openWindows.push(itemPopup);

        var pollTimer = window.setInterval(function () {
            if (itemPopup.closed !== false) { // !== is required for compatibility with Opera
                window.clearInterval(pollTimer);
                // files count //
                rest.path = 'getFilestotal/' + id;
                rest.get().success(function (data) {
                    if (data) {
                        $scope.Filestotal = data[0].totalfile;
                    }
                    angular.element('#filescount' + id).text($scope.Filestotal);
                }).error(errorCallback);
                // files couunt end //
            }
        }, 200);
    }
    var getCountScoopFolder = function () {
        var count = $window.localStorage.getItem("scoopFolderCount");
        if (!count) {
            count = 0;
        }
        var id = $window.localStorage.getItem("scoopfolderId");
        
        //$('#sourceCount-'+id).text(count);
        //$('#filescount'+id).text(count);
    }

    $interval(getCountScoopFolder, 1000);

    $scope.closeItem = function (frmId) {
        $route.reload();
    }

    $scope.itemAmountChilprice = function (id) {
        rest.path = 'childPriceitemAmountget/' + id;
        rest.get().success(function (data) {
            $scope.itemAmount = data.rate;
        })
    }

    $scope.$on('pls.onLanguageChanged', function (evt, lang) {
        
        lang.id = lang.id.replace(/[0-9]/g, '');
        var eleId = evt.targetScope.id.replace(/\D/g, '');
        if (lang.id == 'plsSourceLang') {
            angular.element('#source_lang' + eleId).text(lang.lang.name.trim());
            var sourceField = angular.element("div#" + evt.targetScope.id).children("a.pls-selected-locale");
            var sourceImg = sourceField.children('img');
            angular.element("div#" + evt.targetScope.id).children("a.pls-selected-locale").text('');
            sourceField.append(sourceImg);
            var sourceImg = sourceField.children('img').after(lang.lang.name);
        } else if (lang.id == 'plsTargetLang') {
            angular.element('#target_lang' + eleId).text(lang.lang.name.trim());
            var targetField = angular.element("div#" + evt.targetScope.id).children("a.pls-selected-locale");
            var targetImg = targetField.children('img');
            angular.element("div#" + evt.targetScope.id).children("a.pls-selected-locale").text('');
            targetField.append(targetImg);
            var targetImg = targetField.children('img').after(lang.lang.name);
        }
        var itemIndex = parseInt(angular.element("#indexItemSource" + eleId).text());

        var source = angular.element('#source_lang' + eleId).text();
        var target = angular.element('#target_lang' + eleId).text();
        
        if ($scope.itemList[itemIndex].item_number) {
            var item_number = pad($scope.itemList[itemIndex].item_number, 3);
        } else {
            var item_number = angular.element('#item_number' + eleId).text();
        }
        if ($scope.item == undefined || $scope.item == null || $scope.item == "") {
            $scope.item = {};
        }
        if (target == undefined || target == null || target == "") {
            target = '';
        }
        if (source == undefined || source == null || source == "") {
            source = '';
        }
        var indirectCustomerName = $window.localStorage.getItem('indirectCustomerName');
            if(indirectCustomerName == null)
                indirectCustomerName = '';
        if (source && !target) {
            //$scope.itemList[itemIndex].item_name = indirectCustomerName + ' | ' + source + ' - English (US)';
            $scope.itemList[itemIndex].item_name = indirectCustomerName + ' | ' + source + ' - ';
        } else if (!source && target) {
            //$scope.itemList[itemIndex].item_name = indirectCustomerName + ' | English (US) - ' + target;
            $scope.itemList[itemIndex].item_name = indirectCustomerName + ' |  - ' + target;
        } else {
            $scope.itemList[itemIndex].item_name = indirectCustomerName + ' | ' + source + '-' + target;
        }

        $scope.stLangPair = source + ' > ' + target;
        
        // Client price list base on language
        $scope.changeClientPrice(0, eleId, $scope.scoopSpecializationArr, $scope.stLangPair)
    });

    $scope.plsModel = {
        languages40: allLanguages,
    };
    $timeout(function () {
        if ($scope.plsModel) {
            angular.forEach($scope.plsModel.languages40, function (val, i) {
                
                if (val.is_favourite == 1) {
                    $('.allsourcelang').find('a[title="' + val.title + '"]').addClass('favlang');
                    $('.alltargetlang').find('a[title="' + val.title + '"]').addClass('favlang');
                }
            });
        }
    }, 2000);

    $scope.itemQuentityDelete = function (id, index, parentIndex) {
        // var totalPrice1 = $scope.itemList[parentIndex].total_price;
        // //var totalPrice = totalPrice1.toFixed(2);
        // var totalPrice = parseFloat(totalPrice1).toFixed(3);
        // var price1 = $scope.itemPriceUni[id][index].itemTotal;
        // var price = numberFormatCommaToPoint(price1);
        // if (totalPrice == price) {
        //     $scope.itemList[parentIndex].total_price = 0;
        // } else {
        //     var total = totalPrice - price;
        //     $scope.itemList[parentIndex].total_price = parseFloat(total).toFixed(2);
        // }
        $scope.itemPriceUni[id].splice(index, 1);
        var decimalPoint = 100;
        var grandTotal = 0;
        if($scope.itemPriceUni[id].length){
            var smPromise = new Promise((resolve, reject) => {
                $scope.itemPriceUni[id].forEach((element, indx, array) => {
                    let elVal = $scope.itemPriceUni[id][indx].itemTotal;
                    elVal = (elVal != 0 || elVal != '') ? CommaToPoint4Digit(elVal) : 0;
                    var subTtl = parseFloat(elVal);
                    grandTotal += isNaN(subTtl) ? 0 : subTtl;
                    if (indx === array.length -1) resolve();
                });
            });
            smPromise.then(() => {
                var decimalPoint = decimalNumberCount(grandTotal);    
                $scope.itemList[parentIndex].total_price = Math.round(grandTotal * decimalPoint)/decimalPoint;
            });
        }else{
            $scope.itemList[parentIndex].total_price = '00';
        }    
    }


    $scope.itemPriceUni = [];
    //change item price module scoop
    $scope.changeItemField = function (id, index, parentIndex, totalChng = 0) {
        var quantity = $scope.itemPriceUni[id][index].quantity;
        var itemPrice = $scope.itemPriceUni[id][index].itemPrice;
        var itemTtl = $scope.itemPriceUni[id][index].itemTotal;
        var itemAmt = $scope.itemPriceUni[id][index].amtSum;
        if (!quantity) {
            quantity = 0;
            $scope.itemPriceUni[id][index].quantity = 0;
        }
        if (!itemPrice) {
            itemPrice = 0;
            $scope.itemPriceUni[id][index].itemPrice = 0;
        }
        if (!itemTtl)
            itemTtl = 0;
        //$scope.itemPriceUni[id][index].itemTotal = numberFormatComma(itemTtl);
        quantity = CommaToPoint4Digit(quantity);
        if (quantity == '')
            itemPrice = 0;
        //itemPrice = numberFormatCommaToPoint(itemPrice);
        //itemPrice = CommaToPoint4Digit(itemPrice);
        itemPrice = commaToPoint(itemPrice);
        
        if (itemPrice == '')
            itemPrice = 0;

        var decimalPoint = decimalNumberCount(itemPrice);    
        //var decimalPoint = 100;    
    
        var price = parseFloat(quantity) * parseFloat(itemPrice);
        price = isNaN(price) ? 0 : Math.round(price * decimalPoint)/decimalPoint
        
        if (totalChng > 0) {
            $scope.itemPriceUni[id][index].itemTotal = itemTtl;
        } else {
            $scope.itemPriceUni[id][index].itemTotal = price ? numberFormatComma(price) : 0;
        }
        $scope.itemPriceUni[id][index].amtSum = price;
        //$scope.itemList[parentIndex].total_price = totalPrice;
        var grandTotal = 0;
        var smPromise = new Promise((resolve, reject) => {
            $scope.itemPriceUni[id].forEach((element, indx, array) => {
                let elVal = $scope.itemPriceUni[id][indx].itemTotal;
                elVal = (elVal != 0 || elVal != '') ? CommaToPoint4Digit(elVal) : 0;
                var subTtl = parseFloat(elVal);
                grandTotal += isNaN(subTtl) ? 0 : subTtl;
                if (indx === array.length -1) resolve();
            });
        });
        smPromise.then(() => {
            var decimalPoint = decimalNumberCount(grandTotal);    
            $scope.itemList[parentIndex].total_price = Math.round(grandTotal * decimalPoint)/decimalPoint;
        });
    }
    // End Change price
    
    //create item
    //$scope.createItems = function() {
    $scope.createItems = function (newscoop) {
        $scope.order_idddd = $scope.routeOrderID;

        if (newscoop) {
            $scope.numOfScoopItems = newscoop.split(',')[1];
            $('.scoopText input').attr("placeholder", "");
        }
        
        var noItemVal = $scope.numOfScoopItems;
        if (!noItemVal) {
            $('#numOfItems').parent().parent().addClass('has-error');
            $('#numOfItems').next().css('display', 'block');
            return false;
        } else {
            if (noItemVal > 0 && noItemVal <= 5) {
                $scope.ItemData = {}
                $scope.ItemData.no_of_items = noItemVal;
                $scope.ItemData.order_id = $scope.routeOrderID ? $scope.routeOrderID : $window.localStorage.getItem('orderID');
                rest.path = 'AddNumberOfItems';
                rest.post($scope.ItemData).success(function (data) {
                    notification('Items created successfully.', 'success');
                    $timeout(function () {
                        $route.reload();
                    }, 100);
                }).error(errorCallback);
            } else {
                notification('Please select scoop', 'warning');
                return false;
            }
        }



        /*rest.path = 'itemsNumberGet/' + $scope.order_idddd;
        rest.get().success(function(data) {
            $scope.item_number = data.itemNumber;
            $scope.itemId = data.itemId;
            var currentdate = new Date();
            $scope.item = {};
            $scope.item.itemId = $scope.itemId;
            $scope.item.start_date = currentdate.getDate() + "." +
                (currentdate.getMonth() + 1) + "." +
                currentdate.getFullYear() + " " +
                currentdate.getHours() + ":" +
                currentdate.getMinutes()
            angular.element("#itemstatus").select2('val', 'In preparation');
            $scope.disabledStatus = true;
        }).error(errorCallback);*/

        //getClient By OrderId
        rest.path = 'customer/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            rest.path = 'getIndirectClient/' + data.indirect_customer;
            rest.get().success(function (data) {
                
                $scope.indirectCustomer = data.vUserName;

                if($scope.item == undefined)
                    $scope.item = {};
                $timeout(function () {
                    $scope.item.item_name = $scope.indirectCustomer + ' | English (US) - English (US)';

                    //New Itemname with order(Project)number.
                    var itemName = $("#item_number").text();
                    $scope.item.item_name += ' - ' + $scope.projectOrderName + '-' + itemName;
                    $scope.item.scoop_name = $scope.item.item_name;

                    $("textarea#item_name").val($scope.item.item_name);
                }, 100);

            }).error(errorCallback);
        }).error(errorCallback);

        //currency
        rest.path = 'orderCurrencyMatch/' + $scope.routeOrderID;
        rest.get().success(function (data) {
            if (data.currency) {
                var cur = JSON.parse(data.currency);

                angular.element('#currencyCh').select2('val', cur[0].currency);
                angular.element('#defCur').text(data.defCurrency);
                angular.element('#crntCur').text(cur[0].currency);

                angular.element('#curRate').text(cur[0].curRate);
            }
        }).error(errorCallback);

        $routeParams.id = $window.localStorage.getItem('directClientIdStore');
        rest.path = 'contact';
        rest.model().success(function (data) {
            var cont = [];
            angular.forEach(data.data, function (val, i) {
                var obj = {
                    'id': val.iContactId,
                    'text': val.vFirstName + ' ' + val.vLastName
                };
                cont.push(obj);
            });
            angular.element('#contactPerson').select2({
                allowClear: true,
                data: cont
            });
        }).error(errorCallback);
        //$scope.myitems = true;


        //Default Values For language selector
        $scope.myitemhide = false;
        angular.element('#source_lang').text('English (US)');
        angular.element('#target_lang').text('English (US)');

        var sourceField = angular.element("div#plsSourceLang").children("a.pls-selected-locale");
        var targetField = angular.element("div#plsTargetLang").children("a.pls-selected-locale");
        var sourceImg = sourceField.children('img');
        var targetImg = targetField.children('img');

        angular.element("div#plsSourceLang").children("a.pls-selected-locale").text('');
        angular.element("div#plsTargetLang").children("a.pls-selected-locale").text('');

        sourceField.append(sourceImg);
        targetField.append(targetImg);

        sourceField.children().attr('data-ng-src', 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png');
        sourceField.children().attr('src', 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png');
        sourceField.children().attr('alt', 'United States');

        targetField.children().attr('data-ng-src', 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png');
        targetField.children().attr('src', 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png');
        targetField.children().attr('alt', 'United States');

        var sourceImg = sourceField.children('img').after('English (US)');
        var targetImg = targetField.children('img').after('English (US)');

        angular.element('#totalItemPrice').text('0.0');

        angular.element('[id^=totalItem_]').remove();

        $scope.itemPriceUni = [];

    }

    $scope.order_id = $scope.routeOrderID;
    if ($scope.order_id != " ") {
        $routeParams.id = $scope.order_id;
        rest.path = 'contactPerson';
        rest.model().success(function (data) {
            
            var cor = [];
            var man = [];
            angular.forEach(data, function (val, i) {
                if (val.vResourceType == 1) {
                    cor.push(val.iUserId);
                }

                if (val.vResourceType == 2) {
                    man.push(val.iUserId);
                }
            })

            $timeout(function () {
                angular.element('#manager').select2('val', man);
                angular.element('#coordinator').select2('val', cor);
            }, 1000);
        }).error(errorCallback);

    }

    $scope.ItemNext = function (formId, id) {

        $location.path('/jobs-detail/' + $scope.routeOrderID);
    }


    $scope.changeCurrency = function (id) {
        angular.element('#currency').text(id);
        var defaultCur = angular.element('#currencyDef').text();
        var newCur = id;
        rest.path = "itemCurrency/" + id;
        rest.get().success(function (data) {

            angular.element('#currencyCh').select2('val', data.currency);
            angular.element('#defCur').text(data.defCurrency);
            angular.element('#crntCur').text(data.currency);

            angular.element('#curRate').text(data.currencyRate);
        });
    }
    $scope.poNumberExist = false;
    $scope.checkPoNumberExist = function (id, searchText) {
        
        if(searchText.length > 1){
            rest.path = 'checkItemPonumberExist/' + id +'/' + searchText;
            rest.get().success(function (data) {
                if(data){
                    $scope.poNumberExist = true;
                    angular.element("#po_numberErr" + id).text('PO number has been used before');
                    $('#po_numberErr'+id).css('display','block');
                }else{
                    //$('#po_numberErr'+id).css('display','none');
                    angular.element("#po_numberErr" + id).text('');
                    $scope.poNumberExist = false;
                }
            });
        }else{
            angular.element("#po_numberErr" + id).text('');
            //$('#po_numberErr'+id).css('display','none');
            $scope.poNumberExist = false;
        }
    }
    $scope.workflowChange = false;
    $scope.changeWorkflow = function (id) {
        $scope.workflowChange = true; 
    }
    $scope.isAllScoopUpdated = false;
    $scope.jobi = {};

    $scope.saveitems = function (formId, formIndex) {
        // check PoNumber Exist call fun
        $scope.checkPoNumberExist($scope.itemList[formIndex].itemId, $scope.itemList[formIndex].po_number);

        if (angular.element('#item-form' + formId).valid()) {
            if ($window.localStorage.orderID) {
                if ($scope.itemList[formIndex].itemId) {
                    // single item save (same Po Number exist) 
                    //if(!$scope.isAllScoopUpdated){
                        //angular.element(document.getElementById('po_number'+$scope.itemList[formIndex].itemId)).triggerHandler('change');
                        //$scope.checkPoNumberExist($scope.itemList[formIndex].itemId, $scope.itemList[formIndex].po_number);
                        if($scope.poNumberExist){
                            notification('PO number has been used before.','warning')
                            //return false;
                        }    
                    //}
                    var formIdAllSave = $scope.isAllScoopUpdated ? $scope.itemList[0].itemId : formId;
                    var formIndexNew = $scope.isAllScoopUpdated ? 0 : formIndex;
                    
                    var srcLang = angular.element("div#plsSourceLang" + formIdAllSave).children("a.pls-selected-locale").text().trim();
                    var trgLang = angular.element("div#plsTargetLang" + formIdAllSave).children("a.pls-selected-locale").text().trim();
                    if(!srcLang || !trgLang){
                        notification('Please select source-target language','warning')
                        return false;
                    }

                    var itemPriceUnit = [];
                    itemPriceUnit = $scope.itemPriceUni[formId];
                    if (itemPriceUnit) {
                        for (var j = 0; j < itemPriceUnit.length; j++) {
                            //itemPriceUnit[j].itemTotal = numberFormatCommaToPoint(itemPriceUnit[j].itemTotal);
                            itemPriceUnit[j].itemTotal = CommaToPoint4Digit(itemPriceUnit[j].itemTotal);
                        }
                    }
                    $scope.itemList[formIndex].price = JSON.stringify(itemPriceUnit);
                    delete $scope.itemList[formIndex]['itemPrice'];
                    delete $scope.itemList[formIndex]['quantity'];

                    if ($scope.itemList[formIndex].item_number != undefined) {
                        $scope.itemList[formIndex].item_number;
                    } else {
                        $scope.itemList[formIndex].item_number = angular.element('#item_number').text();
                        $scope.itemList[formIndex].item_number = $scope.itemList[formIndex].item_number.replace(/^0+/, '');
                    }

                    $scope.itemList[formIndex].contact_person = $scope.itemList[formIndex].contact_person ? ($scope.itemList[formIndex].contact_person.toString()).split(',').pop() : '';

                    $scope.itemList[formIndex].order_id = $scope.routeOrderID;
                    $scope.itemList[formIndex].total_amount = $scope.total_amount;

                    var sourceField = angular.element("div#plsSourceLang" + formIdAllSave).children("a.pls-selected-locale");
                    var targetField = angular.element("div#plsTargetLang" + formIdAllSave).children("a.pls-selected-locale");

                    var sourceObj = {
                        sourceLang: srcLang,
                        dataNgSrc: sourceField.children().attr('data-ng-src'),
                        alt: sourceField.children().attr('alt')
                    }
                    var targetObj = {
                        sourceLang: trgLang,
                        dataNgSrc: targetField.children().attr('data-ng-src'),
                        alt: targetField.children().attr('alt')
                    }

                    $scope.itemList[formIndex].source_lang = JSON.stringify(sourceObj);
                    $scope.itemList[formIndex].target_lang = JSON.stringify(targetObj);

                    $scope.itemList[formIndex].total_amount = $scope.itemList[formIndex].total_price;
                    
                    /*if(!$scope.itemList[formIndex].total_amount || $scope.itemList[formIndex].price ==undefined){
                        $scope.itemList[formIndex].total_amount = 0
                        $scope.itemList[formIndex].total_price = 0
                        //$scope.itemList[formIndex].price = ''
                    }*/

                    // if ($scope.itemList[formIndex].attached_workflow) {
                    //     if ($('#jobchainName' + formId).val() !== 'select') {
                    //         var jobchainval = $('#jobchainName' + formId).val();
                    //         var jobchainName = $("#jobchainName" + formId + " option[value=" + jobchainval + "]").text();
                    //         var scoopitemData = $scope.TblItemList;
                    //         var chainworkflow = scoopitemData.filter(x => x.itemId == formId && x.attached_workflow == 'SingleJob -' + jobchainName).map(x => x.attached_workflow);
                    //         if (chainworkflow.length == 0) {
                    //             notification('workflow already attached', 'warning');
                    //         }
                    //     }
                    // } else {
                        if ($('#jobchainName' + formIdAllSave).val() == 'select' || $('#jobDropDown' + formIdAllSave).val() == 'select') {
                            notification('Please select workflow.', 'warning');
                            //setting total amount to 0 in table listing
                            $scope.TblItemList[formIndex].total_amount = 0;
                            return false;
                        } else {
                            if ($scope.jobi.jobSummery && $scope.workflowChange || ($scope.isAllScoopUpdated && $scope.workflowChange) ) {
                                
                                // gettingName of selected workflow job chain
                                
                                $scope.itemList[formIndex].attached_workflow = 'SingleJob -' + $('#jobchainName' + formIdAllSave).find(':selected').text();
                                let workflowSel = $('#jobchainName' + $scope.itemList[0].itemId).find(':selected').val();        
                                
                                $scope.jobitem = {};
                                var dd = $scope.isAllScoopUpdated ? workflowSel : $scope.jobi.jobSummery;
                                $scope.jobi.jobSummery = dd.substr(1);
                                $scope.matchjob = dd.slice(0, 1);
                                if ($scope.matchjob == 'j') {
                                    rest.path = 'jobpertjobGet/' + $scope.jobi.jobSummery + '/' + $scope.routeOrderID;
                                    rest.get().success(function (data) {
                                        $scope.itemdata = data;
                                        $scope.jobitem.item_id = $scope.itemList[formIndex].item_number;
                                        
                                        if ($scope.jobitem.item_id) {
                                            rest.path = 'jobitemsidget/' + $scope.jobitem.item_id + '/' + $scope.routeOrderID;
                                            rest.get().success(function (data) {
                                                $scope.iData = data;
                                                
                                                var contact_person = [];
                                                var job_id = [];
                                                var order_id = [];
                                                var job_no = [];
                                                var due_date = [];
                                                var item_status = [];
                                                $scope.job_id = $scope.jobi.jobSummery;
                                                $scope.job_code = $scope.itemdata.job_code;
                                                $scope.order_id = $scope.routeOrderID;
                                                $scope.job_no = $scope.itemdata.job_no;
                                                $scope.master_job_id = $scope.itemdata.job_id;

                                                if ($scope.iData != null) {
                                                    //$scope.contact_person = $scope.iData.contact_person;
                                                    $scope.contact_person = $scope.iData.manager;
                                                    //$scope.due_date = $scope.iData.due_date;
                                                    $scope.due_date = '';
                                                    $scope.item_status = $scope.iData.item_status;
                                                } else {
                                                    $scope.contact_person = "";
                                                    $scope.due_date = "";
                                                    $scope.item_status = "";
                                                }

                                                $scope.jobitem.job_no = $scope.job_no;
                                                $scope.jobitem.job_id = $scope.job_id;
                                                $scope.jobitem.job_code = $scope.job_code;
                                                //$scope.jobitem.contact_person = $scope.contact_person;
                                                $scope.jobitem.contact_person = $scope.contact_person;
                                                $scope.jobitem.order_id = $scope.routeOrderID;
                                                $scope.jobitem.due_date = $scope.due_date;
                                                $scope.jobitem.master_job_id = $scope.master_job_id;
                                                if ($scope.job_no == undefined) {
                                                    $scope.job_no = 1;
                                                }
                                                if ($scope.iData) {
                                                    $scope.po_number = $scope.iData.abbrivation + pad($scope.iData.order_number, 4) + '_' + $scope.job_code + pad($scope.job_no, 3);
                                                    $scope.jobitem.tmp_po_number = $scope.po_number;
                                                }

                                                /* Job Status To New When Creating New Job*/
                                                $scope.jobitem.item_status = 'In preparation';

                                                // Remove if Display Assign PO Link
                                                //$scope.jobitem.po_number = '';
                                                $scope.jobitem.po_number = $scope.jobitem.tmp_po_number;
                                                $scope.jobitem.ItemLanguage = srcLang + ' > ' + trgLang;
                                                $scope.jobitem.price = '';
                                                $scope.jobitem.total_price = parseFloat(0.00);
                                                $scope.jobitem.item_id = $scope.itemList[formIndex].item_number;
                                                
                                                rest.path = 'jobSummarySave';
                                                rest.post($scope.jobitem).success(function (data) {
                                                    if (data) {
                                                        var obj = [];
                                                        if ($cookieStore.get('jobRecentAdd') != undefined) {
                                                            angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                                                obj.push(val);
                                                            });
                                                        }
                                                        obj.push(data['order_id']);
                                                        $cookieStore.put('jobRecentAdd', obj);
                                                        //$route.reload();
                                                    } else {
                                                        notification('Job already exists in this scoop.', 'error');
                                                    }
                                                })
                                            })
                                        }
                                    }).error(errorCallback);
                                } else {
                                    var chainId = $scope.itemList[formIndex].item_number;
                                    
                                    // gettingName of selected workflow job chain
                                    $scope.itemList[formIndex].attached_workflow = 'jobChain -' + $('#jobchainName'+formIdAllSave).find(':selected').text();
                                    if (chainId != undefined  && $scope.workflowChange) {
                                        rest.path = 'jobpertjobChainGet/' + $scope.jobi.jobSummery + '/' + $scope.routeOrderID + '/' + chainId;
                                        rest.get().success(function (data) {
                                            $scope.jobnumchain = data.job_no += 1;
                                            $scope.ijNum = 1;
                                            if (data.newJob == "") {
                                                notification('No job in jobchain', 'warning');
                                            } else {
                                                angular.forEach(data.newJob, function (val, i) {
                                                    if (chainId) {
                                                        rest.path = 'jobitemsidget/' + chainId + '/' + $scope.routeOrderID;
                                                        rest.get().success(function (data) {
                                                            $scope.iData = data;
                                                            var contact_person = [];
                                                            var job_id = [];
                                                            var order_id = [];
                                                            var job_no = [];
                                                            var due_date = [];
                                                            var item_status = [];
                                                            $scope.job_id = $scope.jobi.jobSummery;
                                                            $scope.job_code = val.job_code;
                                                            $scope.order_id = $scope.routeOrderID;
                                                            $scope.master_job_id = val.job_id;
                                                            $scope.job_no = $scope.jobnumchain++;
                                                            if (!$scope.job_no) {
                                                                $scope.job_no = $scope.ijNum++;
                                                            }

                                                            if ($scope.iData != null) {
                                                                $scope.contact_person = $scope.iData.manager;
                                                                $scope.due_date = '';
                                                                $scope.item_status = $scope.iData.item_status;
                                                            } else {
                                                                $scope.contact_person = "";
                                                                $scope.due_date = "";
                                                                $scope.item_status = "";
                                                            }
                                                            if ($scope.jobitem == undefined || $scope.jobitem == "" || $scope.jobitem == null) {
                                                                $scope.jobitem = {};
                                                            }

                                                            $scope.jobitem.job_no = $scope.job_no;
                                                            $scope.jobitem.master_job_id = $scope.master_job_id;
                                                            $scope.jobitem.job_id = $scope.master_job_id;
                                                            // $scope.jobitem.job_id = $scope.job_id;
                                                            $scope.jobitem.job_code = $scope.job_code;
                                                            $scope.jobitem.contact_person = $scope.contact_person;
                                                            $scope.jobitem.order_id = $scope.routeOrderID;
                                                            $scope.jobitem.due_date = $scope.due_date;
                                                            if ($scope.job_no == undefined) {
                                                                $scope.job_no = 1;
                                                            }
                                                            if ($scope.iData) {
                                                                $scope.po_number = $scope.iData.abbrivation + pad($scope.iData.order_number, 4) + '_' + $scope.job_code + pad($scope.job_no, 3);
                                                                $scope.jobitem.tmp_po_number = $scope.po_number;
                                                            }

                                                            $scope.jobitem.item_status = 'In preparation';
                                                            $scope.jobitem.po_number = $scope.jobitem.tmp_po_number;
                                                            $scope.jobitem.ItemLanguage = srcLang + ' > ' + trgLang;

                                                            $scope.jobitem.job_chain_id = $scope.jobi.jobSummery;
                                                            $scope.jobitem.item_id = $scope.itemList[formIndex].item_number;

                                                            rest.path = 'jobSummarySave';
                                                            rest.post($scope.jobitem).success(function (data) {
                                                                var obj = [];
                                                                if ($cookieStore.get('jobRecentAdd') != undefined) {
                                                                    angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                                                        obj.push(val);
                                                                    });
                                                                }
                                                                obj.push(data['order_id']);
                                                                $cookieStore.put('jobRecentAdd', obj);
                                                                //$route.reload();
                                                            })
                                                        })
                                                    }
                                                })
                                            }
                                        });
                                    } else {
                                        notification('Please select item', 'warning');
                                    }
                                }
                            }
                        }
                    //}
                    
                    const hasKeySpclz = 'specialization' in $scope.itemList[formIndex];
                    if(hasKeySpclz)    
                        delete $scope.itemList[formIndex].specialization;
                    
                    
                    $scope.itemList[formIndexNew].itemId ,$scope.itemList[formIndexNew].due_date;
                    if($scope.isAllScoopUpdated && formIndex != 0 ){    
                        $scope.itemList[formIndex].due_date = moment($scope.itemList[formIndexNew].due_date).format("YYYY-MM-DD HH:mm");
                    
                    }else{
                        $scope.itemList[formIndex].due_date = $scope.itemList[formIndex].due_date.split(' ')[0].split('.').reverse().join('-');
                        $scope.itemList[formIndex].due_date = $scope.itemList[formIndex].due_date;
                        var due_timevl1 = angular.element('#due_time' + formIndex).val();
                        $scope.itemList[formIndex].due_date = moment($scope.itemList[formIndex].due_date + ' ' + due_timevl1).format("YYYY-MM-DD HH:mm");
                    }    
                        
                    //$scope.itemList[formIndex].due_date = originalDateFormatNew($scope.itemList[formIndex].due_date);
                    //$scope.itemList[formIndex].due_date = moment($scope.itemList[formIndex].due_date).format('YYYY-MM-DD HH:mm:ss');
                    $scope.itemList[formIndex].start_date = originalDateFormatNew($scope.itemList[formIndex].start_date);
                    $scope.itemList[formIndex].start_date = moment($scope.itemList[formIndex].start_date).format('YYYY-MM-DD HH:mm:ss');
                    
                    if($scope.itemList[formIndex].upcomingDate){
                        $scope.itemList[formIndex].upcomingDate = originalDateFormatNew($scope.itemList[formIndex].upcomingDate);
                        $scope.itemList[formIndex].upcomingDate = moment($scope.itemList[formIndex].upcomingDate).format('YYYY-MM-DD HH:mm:ss');
                        if(! isNaN(Date.parse($scope.itemList[formIndex].upcomingDate))){
                            $scope.itemList[formIndex].start_date = $scope.itemList[formIndex].upcomingDate;
                        }
                    }else{
                        $scope.itemList[formIndex].upcomingDate = '0000-00-00';
                    }
                    if($scope.isAllScoopUpdated && formIndex != 0 && $scope.itemList[formIndexNew].heads_up == 1){    
                        $scope.itemList[formIndex].upcomingDate = $scope.itemList[formIndexNew].upcomingDate;
                        
                        if(! isNaN(Date.parse($scope.itemList[formIndexNew].upcomingDate))){
                            $scope.itemList[formIndex].start_date = $scope.itemList[formIndexNew].upcomingDate;
                        }
                    }

                    
                    console.log('checksubPm',$scope.checksubPm[formIndex] )
                    $scope.itemList[formIndex].subPm = $scope.checksubPm[formIndex] ? ($scope.itemList[formIndex].subPm).toString().split(',').pop() : ''; 
                    $scope.itemList[formIndex].subPc = $scope.checksubPc[formIndex] ? ($scope.itemList[formIndex].subPc).toString().split(',').pop() : ''; 
                    $scope.itemList[formIndex].subQa = $scope.checksubQa[formIndex] ? ($scope.itemList[formIndex].subQa).toString().split(',').pop() : ''; 
                    
                    $scope.itemList[formIndex].manager = ($scope.itemList[formIndex].manager).toString().split(',').pop();     
                    $scope.itemList[formIndex].coordinator = ($scope.itemList[formIndex].coordinator).toString().split(',').pop();
                    $scope.itemList[formIndex].qaSpecialist = ($scope.itemList[formIndex].qaSpecialist).toString().split(',').pop();     
                
                    // const hasKeyStsName = 'item_status_name' in $scope.itemList;
                    // if(hasKeyStsName)    
                    //  delete $scope.itemList.item_status_name;
                    if($scope.isAllScoopUpdated){
                        $scope.itemList[formIndex].project_type = $scope.itemList[0].project_type; 
                        //$scope.itemList[formIndex].po_number = $scope.itemList[0].po_number; 
                        $scope.itemList[formIndex].item_status = $scope.itemList[0].item_status; 
                        $scope.itemList[formIndex].project_pricelist = $scope.itemList[0].project_pricelist; 
                        $scope.itemList[formIndex].place_of_delivery = $scope.itemList[0].place_of_delivery; 
                        $scope.itemList[formIndex].item_email_subject = $scope.itemList[0].item_email_subject; 
                        $scope.itemList[formIndex].item_name = $scope.itemList[0].item_name; 
                    }    
                    
                    $routeParams.id = $scope.itemList[formIndex].itemId
                    rest.path = 'ItemUpdate';
                    rest.put($scope.itemList[formIndex]).success(function () {
                        $('#jobchainName' + formId).val('select');
                        //Updating current updated row data(item)
                        $scope.getItems();

                        $scope.itemList[formIndex].due_date = moment($scope.itemList[formIndex].due_date).format($scope.dateFormatGlobal);
                        $scope.itemList[formIndex].start_date = moment($scope.itemList[formIndex].start_date).format($scope.dateFormatGlobal);
                    
                        $scope.workflowChange = false;
                        //log file start
                        $scope.logMaster = {};
                        //$scope.logMaster.log_title = $scope.projectOrderName;
                        $scope.logMaster.log_title = $scope.projectOrderName +'-'+ $scope.itemList[formIndex].item_number.toString().padStart(3, '0');
                        $scope.logMaster.log_type_id = $scope.itemList[formIndex].order_id;
                        $scope.logMaster.task_id = $scope.itemList[formIndex].itemId;
                        $scope.logMaster.log_type = "update";
                        $scope.logMaster.log_status = "project_scoop";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                        //$route.reload();
                                
                        if(!$scope.isAllScoopUpdated){
                            notification('Item successfully updated.', 'success');
                        }else{
                            if( $scope.itemList[$scope.itemList.length-1].itemId == $scope.itemList[formIndex].itemId ){
                                notification('All items successfully updated.', 'success');
                                $scope.isAllScoopUpdated = false;
                                $route.reload();
                            }
                        }
                    }).error(function (data, error, status) { 
                        $scope.isAllScoopUpdated = false;
                    });
                } else {
                    //if source and target language not selected
                    var source = angular.element('#source_lang').text();
                    var target = angular.element('#target_lang').text();
                    if (target == undefined || target == null || target == "") {
                        notification('Please select target language', 'warning');
                        return false;
                    }
                    if (source == undefined || source == null || source == "") {
                        notification('Please select source language', 'warning');
                        return false;
                    }

                    $scope.item.due_date = angular.element("[id^=end_date]").val();
                    $scope.item.start_date = angular.element("[id^=start_date]").val();
                    $scope.item.manager = $window.localStorage.managerName;
                    $scope.item.coordinator = $window.localStorage.CoordinationName;
                    $scope.item.item_number = id;
                    $scope.item.item_number = $scope.item.item_number.replace(/^0+/, '');
                    var itemPriceUnit = [];
                    for (var i = 1; i <= angular.element("[id^=totalItem_]").length; i++) {
                        var quantity = angular.element('#itemQuantity' + i).val();
                        var pricelist = angular.element('#priceList' + i).text();
                        var itemPrice = angular.element('#itemPrice' + i).val();
                        var itemTotal1 = angular.element('#itemTotal' + i).text();
                        var itemTotal = numberFormatCommaToPoint(itemTotal1);
                        
                        itemPriceUnit.push({
                            'quantity': quantity,
                            'pricelist': pricelist,
                            'itemPrice': itemPrice,
                            'itemTotal': itemTotal
                        });
                    }
                    $scope.price = JSON.stringify(itemPriceUnit);
                    $scope.total_price = angular.element('#totalItemPrice').text();
                    $scope.item_name = angular.element('#item_name').text();
                    $scope.total_amount = $scope.total_price;
                    $scope.item.price = $scope.price;
                    $scope.item.total_price = $scope.total_price;
                    $scope.item.item_name = $scope.item_name;
                    $scope.item.total_amount = $scope.total_amount;
                    $scope.item.order_id = $scope.routeOrderID;
                    
                    const hasKeySpclz = 'specialization' in $scope.item;
                    if(hasKeySpclz)    
                        delete $scope.item.specialization;
                    
                    rest.path = 'ItemSave';
                    rest.post($scope.item).success(function (data) {
                        //log file start 
                        $scope.logMaster = {};
                        //$scope.logMaster.log_title = $scope.projectOrderName;
                        $scope.logMaster.log_title = $scope.projectOrderName +'-'+ $scope.item.item_number.toString().padStart(3, '0');
                        $scope.logMaster.task_id = $scope.item.itemId;
                        $scope.logMaster.log_type_id = $scope.item.order_id;
                        $scope.logMaster.log_type = "update";
                        $scope.logMaster.log_status = "project_scoop";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                        //$scope.myitems = false;
                        $route.reload();
                        notification('Item successfully created.', 'success');
                        //$scope.getItems();
                    });
                }
            } else {
                //notification('Please Create project First', 'information');
            }
        }
    }

    // Save all scoop data (only left side value)
    $scope.scoopAllSave = function() {
        //debugger
        $scope.isAllScoopUpdated = true;    
        jQuery('.scoopall').removeAttr('required');
        //$(".scoopall").attr('required', '');
        angular.forEach($scope.itemList, function (val, index) {
            //debugger
            angular.element(document.getElementById('po_number'+val.itemId)).triggerHandler('change');
            $scope.isAllScoopUpdated = true; 
            $('#project_type'+val.itemId).removeAttr('required');
            $('#upcomingDate'+val.itemId).removeAttr('required');
            //$('#EmailSub'+val.itemId).removeAttr('required');
            //$scope.workflowChange = false;
            if($scope.itemList[0].heads_up == 1 && index != 0)
                $('#headsup'+val.itemId).click();
            if($scope.itemList[0].heads_up != 1 )    
                $('#upcomingDate'+val.itemId).css('display','none');    

            let selectedWorkflow = $('#jobchainName' + $scope.itemList[0].itemId).find(':selected').val();
            
            if($('#jobchainName'+val.itemId).find(':selected').val() == 'select' && selectedWorkflow != 'select' ){
                $scope.workflowChange = true;
                $('#jobchainName'+val.itemId).find('option').val(selectedWorkflow).trigger('click');
            }else{
                $scope.workflowChange = $scope.workflowChange ? $scope.workflowChange : false;
            }
            
            $scope.saveitems(val.itemId, index);
        
        })
    }    
    // substitute pm,cm,qa 
    $scope.checksubPm = [];
    $scope.checksubPc = [];
    $scope.checksubQa = [];

    $scope.getItems = function () {
        var popitemList = [];
        $scope.order_idd = $scope.routeOrderID;
        rest.path = 'itemsGet/' + $scope.order_idd;
        rest.get().success(function (data) {
            $scope.itemList = data;
            $scope.TblItemList = data;

            $scope.projectItemEmpty = jQuery.isEmptyObject(data);
            $scope.totalPrice = 0;
            var cont = [];

            var newitemData = data;
            // ----->>>>  Price List Client <<<<---------
            $scope.childPriceAll().then((chData) => {
                newitemData.forEach( function(eleVal, index, arr){
                    $scope.scoopSpecializationArr = '';
                    if(eleVal.specialization)
                        $scope.scoopSpecializationArr = (eleVal.specialization.toString()).split(',')                    
                    var sourceLang = 'English (US)';
                    var targetLang = 'English (US)';
                    if(eleVal.target_lang){
                        sourceLang = JSON.parse(eleVal.source_lang)
                        sourceLang = sourceLang.sourceLang
                    }
                    if(eleVal.target_lang){
                        targetLang = JSON.parse(eleVal.target_lang)
                        targetLang = targetLang.sourceLang
                    }
                    var langPair = sourceLang+' > '+targetLang;
                    
                    const searchedPrice = $scope.childPrice.map(child => {
                        return Object.assign({}, child, {
                        itemId: arr[index].itemId
                        })
                    })
                    //newArr2[eleVal.itemId] = Object.assign({}, ...newArr1)
                    
                    $scope.newchildPriceArr[eleVal.itemId] = searchedPrice;
                    
                    $scope.custPriceAll().then((prData) => {
                        if(searchedPrice && $scope.newchildPriceArr[eleVal.itemId] && eleVal.project_pricelist)
                            $scope.changeClientPrice(eleVal.project_pricelist, eleVal.itemId)
                        if(searchedPrice && $scope.newchildPriceArr[eleVal.itemId] && !eleVal.project_pricelist){
                            $scope.changeClientPrice(0, eleVal.itemId, $scope.scoopSpecializationArr, langPair)
                        }
                    });    
                })
            });    

            
            angular.forEach(data, function (val, i) {

                //getClient By OrderId while edit item
                rest.path = 'customer/' + $scope.routeOrderID;
                rest.get().success(function (data) {
                    console.log('data-itemsss', data)
                    
                    angular.element('#manager' + val.itemId).select2('val', data.project_manager);
                    angular.element('#coordinator' + val.itemId).select2('val', data.project_coordinator);
                    //angular.element('#coordinator' + val.itemId).select2('val', data.project_coordinator);
                    angular.element('#QA_specialist' + val.itemId).val(data.QA_specialist);

                    $scope.custPriceAll().then((prData) => {
                        let customerpriceFltr =  $scope.customerpriceAll ;
                        //angular.element('#currency'+ val.itemId).text('Eur');
                        customerpriceFltr.filter( (el) => {
                            if(val.project_pricelist){
                                if(el.price_list_id == val.project_pricelist){
                                    let price_currency = el.price_currency.includes(',') ? el.price_currency.split(',')[0] : 'Eur';
                                    //angular.element('#currency'+ val.itemId).text(price_currency);
                                    return el;
                                }
                            }else{
                                if(el.resource_id == data.client){
                                    let price_currency = el.price_currency.includes(',') ? el.price_currency.split(',')[0] : 'Eur';
                                    //angular.element('#currency'+ val.itemId).text(price_currency);
                                    return el;
                                }
                            }
                        });
                    })
                    
                    var jobChainoption = $scope.jobchainoption;
                    

                    var chaintext = val.attached_workflow.split('jobChain -');
                    
                    var chainworkflow = jobChainoption.filter(x => x.job_name == chaintext[1]).map(x => x.job_chain_id);
                    
                    if (chainworkflow.length > 0)
                        $('#jobchainName' + val.itemId).val('c' + chainworkflow);

                    var joboption = $scope.joboption;
                    var jobtext = val.attached_workflow.split('SingleJob -');
                    
                    var jobworkflow = joboption.filter(x => x.service_name + ' (' + x.job_code + ')' == jobtext[1]).map(x => x.job_id);
                    
                    if (jobworkflow.length > 0)
                        $('#jobchainName' + val.itemId).val('j' + jobworkflow);

                    if ($('#jobchainName' + val.itemId).val() !== 'select') {
                        //$('#jobchainName' + val.itemId).attr('disabled',true);
                    }

                    $scope.checksubPm[i] = $scope.itemList[i].subPm ? 1 : 0;
                    $scope.checksubPc[i] = $scope.itemList[i].subPc ? 1 : 0;
                    $scope.checksubQa[i] = $scope.itemList[i].subQa ? 1 : 0;
                    
                    $scope.itemList[i].manager = $scope.itemList[i].manager ? $scope.itemList[i].manager : data.project_manager;
                    $scope.itemList[i].coordinator = $scope.itemList[i].coordinator ? $scope.itemList[i].coordinator : data.project_coordinator;
                    $scope.itemList[i].qaSpecialist = $scope.itemList[i].qaSpecialist ? $scope.itemList[i].qaSpecialist : data.QA_specialist;
                    
                    if (val.price) {

                        $scope.itemPriceUni[val.itemId] = JSON.parse(val.price);
                        for (var j = 0; j < $scope.itemPriceUni[val.itemId].length; j++) {
                            $scope.itemPriceUni[val.itemId][j].itemTotal = numberFormatComma($scope.itemPriceUni[val.itemId][j].itemTotal);
                        }
                    }
                    
                    if( isNaN(Date.parse($scope.itemList[i].start_date)) )
                        $scope.itemList[i].start_date = moment($scope.itemList[i].created_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                    else
                        $scope.itemList[i].start_date = moment($scope.itemList[i].start_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                    //$scope.itemList[i].start_date = moment($scope.itemList[i].start_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                    
                    
                    if( isNaN(Date.parse($scope.itemList[i].upcomingDate)) )
                        $scope.itemList[i].upcomingDate = '';
                    else
                        $scope.itemList[i].upcomingDate = moment($scope.itemList[i].upcomingDate).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                    

                    if ($scope.itemList[i].due_date) {
                        var new_due_date = moment($scope.itemList[i].due_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                        //var due_timevl = $scope.itemList[i].due_date.split(" ")[1];
                        var due_timevl = new_due_date.split(" ")[1];
                        $scope.itemList[i].due_date = moment($scope.itemList[i].due_date).format($window.localStorage.getItem('global_dateFormat'));
                        angular.element('#due_time' + i).val(due_timevl);

                    }

                    if ($scope.itemList[i].source_lang && $scope.itemList[i].target_lang) {
                        var sourceData = JSON.parse($scope.itemList[i].source_lang);
                        var targetData = JSON.parse($scope.itemList[i].target_lang);
                        angular.element('#source_lang' + val.itemId).text(sourceData.sourceLang);
                        angular.element('#target_lang').text(targetData.sourceLang);
                    } else {
                        angular.element('#source_lang' + val.itemId).text('English (US)');
                        angular.element('#target_lang' + val.itemId).text('English (US)');
                    }


                    var sourceField = angular.element("#plsSourceLang" + val.itemId).children("a.pls-selected-locale");
                    
                    var targetField = angular.element("#plsTargetLang" + val.itemId).children("a.pls-selected-locale");
                    var sourceImg = sourceField.children('img');
                    var targetImg = targetField.children('img');

                    angular.element("#plsSourceLang" + val.itemId).children("a.pls-selected-locale").text('');
                    angular.element("#plsTargetLang" + val.itemId).children("a.pls-selected-locale").text('');

                    sourceField.append(sourceImg);
                    targetField.append(targetImg);

                    if ($scope.itemList[i].source_lang.length == 0 && $scope.itemList[i].target_lang.length == 0) {
                        let defaultImgSrc = 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png';
                        let defaultLangName = 'English (US)';
                        let defaultAltName = 'United States';
                        sourceField.children().attr('data-ng-src', '');
                        sourceField.children().attr('src', '');
                        sourceField.children().attr('alt', 'Select');
                        
                        //targetField.children().attr('data-ng-src', defaultImgSrc);
                        targetField.children().attr('data-ng-src', '');
                        targetField.children().attr('src', '');
                        targetField.children().attr('alt', 'Select');

                        var sourceImg = sourceField.children('img').after('');
                        var targetImg = targetField.children('img').after('');
                    } else {
                        sourceField.children().attr('data-ng-src', sourceData.dataNgSrc);
                        sourceField.children().attr('src', sourceData.dataNgSrc);
                        sourceField.children().attr('alt', sourceData.alt);

                        targetField.children().attr('data-ng-src', targetData.dataNgSrc);
                        targetField.children().attr('src', targetData.dataNgSrc);
                        targetField.children().attr('alt', targetData.alt);
                        var targetImg = targetField.children('img').after(targetData.sourceLang);
                        var sourceImg = sourceField.children('img').after(sourceData.sourceLang);
                    }
                }).error(errorCallback);

                /*if($scope.TblItemList[i].due_date){
                    $timeout(function() {
                        $scope.TblItemList[i].due_date = $scope.TblItemList[i].due_date.split(' ')[0]+' | ' +$scope.TblItemList[i].due_date.split(' ')[1];
                    },200);
                }else{

                }*/
                
                $scope.totalPrice += val.total_amount;
                if (val.itemId) {
                    $routeParams.id = val.itemId;
                    rest.path = 'itemsjobStatusGet/' + $routeParams.id + '/' + $scope.routeOrderID;
                    rest.get().success(function (data) {
                        if (!data) {
                            $('#noJobNew' + val.itemId).text('false');
                        } else {
                            $('#noJobNew' + val.itemId).text('true');
                        }
                        $scope.jobitemStatus = data;
                        var appr = [];
                        var other = [];
                        angular.forEach(data, function (val, i) {
                            if (val.item_status == 'Approved') {
                                appr.push(val.item_status);
                            }
                            if (val.item_status != 'Approved') {
                                other.push(val.item_status);
                            }
                        });
                        $scope.it = {};
                        $scope.total = appr.length + other.length;
                        $scope.divis = 100 / $scope.total;
                        $scope.percent = Math.ceil($scope.divis * appr.length);
                        angular.element('#itemPer' + i).html($scope.percent);
                        angular.element('.itemPer' + i).val($scope.percent);
                        if ($scope.percent == 100) {
                            if(! $('#sumimg'+i+' img').length)
                                angular.element('#sumimg' + i).append('<img src="assets/img/wf_4.png" alt=""/> Completed /');
                        } else if ($scope.percent < 100 && $scope.percent != 0) {
                            if(! $('#sumimg'+i+' img').length)
                                angular.element('#sumimg' + i).append('<img src="assets/img/wf_3.png" alt=""/> Started /');
                        } else if ($scope.percent == 0) {
                            if(! $('#sumimg'+i+' img').length){
                                //if($('#sumimg'+i+' img').attr('src') != 'assets/img/wf_1.png')
                                angular.element('#sumimg' + i).append('<img src="assets/img/wf_1.png" alt=""/> Not started /');
                            }
                            
                            
                        } else {
                            if(! $('.jbClassDel' + val.itemId).text() )
                                $('#noJob' + i).append('No jobs');
                            angular.element('#progress' + i).remove();
                            angular.element('#sumimg' + i).remove();
                        }
                    }).error(errorCallback);
                }
                rest.path = 'jobItemIconsetdata/' + val.item_number + '/' + $scope.routeOrderID;
                rest.get().success(function (data) {
                    $scope.dueDate = data;
                }).error(errorCallback);

                $scope.Filestotal = 0;
                rest.path = 'getFilestotal/' + val.itemId;
                rest.get().success(function (data) {
                    if (data) {
                        $scope.Filestotal = data[0].totalfile;
                    }
                    angular.element('#filescount' + val.itemId).text($scope.Filestotal);
                }).error(errorCallback);



            })
        });
    }
    
    $scope.getItems();

    $scope.getitemsId = function (id, eID) {
        angular.element('[id^=totalItem_]').remove();
        $routeParams.id = id;
        rest.path = 'itemsgetone/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.myitems = true;
            $scope.myitemhide = true;
            $timeout(function () {
                $routeParams.id = data.contact_person;
                rest.path = 'checkContactClientId';
                rest.model().success(function (res) {
                    $routeParams.id = res.iClientId;
                    rest.path = 'contact';
                    rest.model().success(function (data) {
                        var cont = [];
                        angular.forEach(data.data, function (val, i) {
                            var obj = {
                                'id': val.iContactId,
                                'text': val.vFirstName + ' ' + val.vLastName
                            };
                            cont.push(obj);
                        });
                        angular.element('#contactPerson').select2({
                            allowClear: true,
                            data: cont
                        });
                    }).error(errorCallback);
                }).error(errorCallback);
                angular.element("#contactPerson").select2('val', data.contact_person);
                
                angular.element("#priceunit").select2('val', data.price);
                angular.element("#itemstatus").select2('val', data.item_status);
                angular.element('#source_lang').select2('val', data.source_lang);
                angular.element('#target_lang').select2('val', data.target_lang);
                angular.element('#childprice').select2('val', data.childprice);
                // angular.element('#manager').select2('val', data.manager);
                // angular.element('#coordinator').select2('val', data.coordinator);
                angular.element('#project_type').select2('val', data.project_type);
            }, 100);

            $scope.item = data;

            if ($scope.item.due_date) {
                $scope.item.due_date = moment($scope.item.due_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
            } else {
                $scope.item.due_date = '';
            }

            $scope.item.start_date = moment($scope.item.start_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');

            //getClient By OrderId while edit item
            rest.path = 'customer/' + $scope.routeOrderID;
            rest.get().success(function (data) {
                angular.element('#manager').select2('val', data.project_manager);
                angular.element('#coordinator').select2('val', data.project_coordinator);
                rest.path = 'getIndirectClient/' + data.indirect_customer;
                rest.get().success(function (data) {
                    $scope.indirectCustomer = data.vUserName;
                }).error(errorCallback);
            }).error(errorCallback);

            if ($scope.item.source_lang && $scope.item.target_lang) {
                var sourceData = JSON.parse($scope.item.source_lang);
                var targetData = JSON.parse($scope.item.target_lang);
                angular.element('#source_lang').text(sourceData.sourceLang);
                angular.element('#target_lang').text(targetData.sourceLang);
            } else {
                angular.element('#source_lang').text('English (US)');
                angular.element('#target_lang').text('English (US)');
            }


            var sourceField = angular.element("div#plsSourceLang").children("a.pls-selected-locale");
            var targetField = angular.element("div#plsTargetLang").children("a.pls-selected-locale");
            var sourceImg = sourceField.children('img');
            var targetImg = targetField.children('img');

            angular.element("div#plsSourceLang").children("a.pls-selected-locale").text('');
            angular.element("div#plsTargetLang").children("a.pls-selected-locale").text('');

            sourceField.append(sourceImg);
            targetField.append(targetImg);

            if (data.source_lang.length == 0 && data.target_lang.length == 0) {
                sourceField.children().attr('data-ng-src', 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png');
                sourceField.children().attr('src', 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png');
                sourceField.children().attr('alt', 'United States');

                targetField.children().attr('data-ng-src', 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png');
                targetField.children().attr('src', 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png');
                targetField.children().attr('alt', 'United States');

                var sourceImg = sourceField.children('img').after('English (US)');
                var targetImg = targetField.children('img').after('English (US)');
            } else {
                sourceField.children().attr('data-ng-src', sourceData.dataNgSrc);
                sourceField.children().attr('src', sourceData.dataNgSrc);
                sourceField.children().attr('alt', sourceData.alt);

                targetField.children().attr('data-ng-src', targetData.dataNgSrc);
                targetField.children().attr('src', targetData.dataNgSrc);
                targetField.children().attr('alt', targetData.alt);
                var sourceImg = sourceField.children('img').after(sourceData.sourceLang);
                var targetImg = targetField.children('img').after(targetData.sourceLang);
            }

            if (data.price) {
                $scope.itemPriceUni = JSON.parse(data.price);
            }
            if (data.total_price.length == 0) {
                angular.element('#totalItemPrice').text('0.0');
            } else {

                //angular.element('#totalItemPrice').text(data.total_price);
            }

            $cookieStore.put('projectItem', $scope.item);
            //currency
            rest.path = 'orderCurrencyMatch/' + $scope.routeOrderID;
            rest.get().success(function (data) {
                angular.element('#defCur').text(data.defCurrency);
                if (data.currency) {
                    var cur = JSON.parse(data.currency);
                    angular.element('#currencyCh').select2('val', cur[0].currency);
                    angular.element('#crntCur').text(cur[0].currency);
                    angular.element('#curRate').text(cur[0].curRate);
                }
            }).error(errorCallback);
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.itemJobs = [];
    if($scope.routeOrderID){
        rest.path = 'select2Jobdata';
        rest.get().success(function (data) {
            const itemJobs = data.filter( el => {
                if (el.order_id == $scope.routeOrderID)
                    return el;
            })
            $scope.itemJobs = itemJobs;
        });    
    }

    $scope.deleteItemsId = function (itemId, itemNnumber) {
        itemId = itemId + '-' + itemNnumber;
        const itemJobsExist = $scope.itemJobs.filter( el => {
            if (el.item_id == itemNnumber)
                return el;
        })
        //var deleteMessage = "Are you sure you want to <b>DELETE</b> this scoop?";
        //if(itemJobsExist.length){
            let deleteInput = `<div class="checkbox" style="margin-top:20px"> <label class="i-checks i-checks-sm"> <input type='checkbox' name='scoopdelete${itemId}' id='scoopdelete${itemId}' value='1'> <i></i> Yes, I want to delete the scoop </label> </div>`;
            //deleteMessage = "Jobs are available in the scoop. You can not delete.";
            var deleteMessage = "<p> Are you sure you want to delete this scoop? </p><p> It might have jobs connected to it.</p> " + deleteInput;
        //}
        
        bootbox.confirm(deleteMessage, function (result) {
            deleteMessage = '';
            if (result == true) {
                if($('#scoopdelete'+itemId).is(':checked')){
                    rest.path = 'itemDelete/' + itemId + '/' + $scope.routeOrderID;
                    rest.get().success(function (data) {
                        if (data.status == 422) {
                            notification(data.msg, 'error');
                        } else {
                            var hideId = itemId.split('-')[0];
                            $('#item-form' + hideId).hide('slow', function () { $('#item-form' + hideId).remove(); });
                            $('#trRowId' + hideId).hide('slow', function () { $('#trRowId' + hideId).remove(); });
                            notification('Scoop deleted successfully.', 'success');
                            // /$route.reload();
                        }
                    }).error(errorCallback);
                }else{
                    notification('Scoop not deleted.', 'information');
                }
                
            }
        });
    }

    $scope.jobitemsIdStatus = function (id) {
        $window.localStorage.jobitStatus = id;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/jobitemstatus.html',
            controller: 'jobitemStatusController',
            size: '',
            width: 1000,
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
            $route.reload();
        });
    };

    $scope.itemOverView = function () {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/itemoverview.html',
            controller: 'itemOverviewStatusController',
            size: '',
            width: 1000,
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
            $route.reload();
        });
    }

    /* Redirect To Project Jobs Section */
    $scope.goTojobDetail = function () {
        $location.path('/jobs-detail/' + $scope.routeOrderID);
    }

    rest.path = 'Jobsummeryget';
    rest.get().success(function (data) {
        $scope.joboption = data;
    }).error(errorCallback)

    //Pass OrderId to get Client ID To Display jobchain assign to client
    rest.path = 'masterJobchainget/' + $scope.routeOrderID;
    rest.get().success(function (data) {
        $scope.jobchainoption = data;
    }).error(errorCallback)

}).controller('contactPerMsgController', function ($scope, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.contactMsgId;

    $scope.bccShow = function () {
        $scope.bccshow = true;
    }
    $scope.ccHideShow = function () {
        angular.element('#ccHideShow').toggleClass('none');
    }
    $scope.bccHideShow = function () {
        angular.element('#bccHideShow').toggleClass('none');
    }

    $timeout(function () {
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(2)').prop('disabled', true);
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(3)').prop('disabled', true);
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(4)').prop('disabled', true);
    }, 500);

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope).then(function (result) {
            $scope.fileAttatchName = file.name;
            $scope.attachementfile = result;
        });
    };

    rest.path = 'contactPerMessage/' + $window.localStorage.contactMsgId;
    rest.get().success(function (data) {
        $scope.cPersonMsg = data.data;
        $scope.cPersonMsg.vUserName = data.data.vFirstName + " " + data.data.vLastName
        $scope.cPersonMsg.messageData = '<div>&nbsp;</div><div id="msgData" class="signimgdata">' + data.info.sign_detail + '</br><img src="' + data.info.sign_image + '" width="100px"></div>';
    }).error(errorCallback);

    $scope.ok = function (frmId, message) {
        var data = {
            "file": $scope.attachementfile,
            "data": message
        };
        if (angular.element("#" + frmId).valid()) {
            rest.path = 'sendcontactPerMsg';
            rest.post(data).success(function (data) {
                notification('Mail send successfully', 'success');
            }).error(errorCallback);
            $timeout(function () {
                $uibModalInstance.close(data);
                $route.reload();
            }, 100)
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}).controller('jobDetailController', function ($interval, $filter, $scope, $window, $compile, $timeout, $uibModal, $log, rest, $route, $rootScope, $routeParams, $location, DTOptionsBuilder, $cookieStore, $q) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.EditedBy = $window.localStorage.getItem('sessionProjectEditedBy');
    //$scope.projectOrderName = projectOrderName ? projectOrderName : $window.localStorage.getItem('projectOrderName');
    $scope.isNewProject = $window.localStorage.getItem("isNewProject");
    if ($scope.isNewProject === 'true') {
        $location.path('/dashboard1');
        notification('Please create project.', 'warning');
        return false;
    }
    if ($window.localStorage.orderID == undefined) {
        $location.path('/dashboard1');
        notification('Please create project.', 'warning');
        return false;
    }
    $window.localStorage.iUserId = " ";
    $window.localStorage.resourceType = " ";
    $window.localStorage.currentUserName = " ";
    $window.localStorage.ResourceMsg = " ";
    $window.localStorage.projectJobChainOrderId = $routeParams.id;
    $window.localStorage.jobDetailId = " ";
    $window.localStorage.orderID = $routeParams.id;
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.jobfolderId = " ";
    $window.localStorage.jobstatusName = " ";
    $window.localStorage.pId = " ";
    $window.localStorage.countSt = " ";
    $window.localStorage.projectJobChainSummeryItemNum = " ";

    $scope.orderUrlID = $routeParams.id ? '/'+$routeParams.id : '';
    $scope.indirectCustomerName,$scope.projectOrderName = '';
    if ($routeParams.id) {
        rest.path = 'getClientIndirectClient/' + $routeParams.id;
        rest.get().success(function (data) {
            
            if (data.order_number) {
                $scope.indirectCustomerName = data.indirect_customer ? data.indirect_customer : $window.localStorage.getItem('indirectCustomerName');
                $scope.projectOrderData = data;
                var projectOrderName = $scope.projectOrderData.abbrivation + pad($scope.projectOrderData.order_number, 4);
                $scope.projectOrderName = projectOrderName ? projectOrderName : $window.localStorage.getItem('projectOrderName');
                $window.localStorage.setItem("projectOrderName", projectOrderName);
                $window.localStorage.setItem("indirectCustomerName", $scope.projectOrderData.indirect_customer);
                
            }
        }).error(errorCallback);
    }
    //$scope.indirectCustomerName = $window.localStorage.getItem('indirectCustomerName');
        
    //check itemfile manager and delete
    if ($routeParams.id) {
        rest.path = "itemFilemanager/" + $routeParams.id;
        rest.delete().success(function (data) {
            if (data != 'No Item') {
                $route.reload();
            }
        }).error(errorCallback);
    }

    $scope.jobDiscussion = function () {
        $location.path('discussion/' + $routeParams.id);
    }

    //set status auto update
    $timeout(function () {
        var temp = [];
        var autoUpdateS = [];
        var autoUpdateR = [];
        var Autocheck = [];
        angular.element(".jStatus").each(function (i) {
            angular.element(this).addClass('StatusData' + i);
            angular.element('.StatusData' + i + ' .joStatus').addClass('jobStatusData' + i);
            angular.element('.StatusData' + i + ' .jAuto').addClass('jStatusAuto' + i);
            angular.element('.StatusData' + i + ' .jsumeryIdAuto').addClass('jsumId' + i);
            angular.element('.StatusData' + i + ' .jjobnum').addClass('jjobnum' + i);
            angular.element('.StatusData' + i + ' .jduedate').addClass('jduedate' + i);
            angular.element('.StatusData' + i + ' .jobEmail').addClass('jobEmail' + i);
            angular.element('.StatusData' + i + ' .jobResource').addClass('jobResource' + i);
            angular.element('.StatusData' + i + ' .jobstatApp').addClass('jobstatsApp' + i);
            var status = angular.element('.jobStatusData' + i).text();
            var auto = angular.element('.jStatusAuto' + i).text();
            var summeryId = angular.element('.jsumId' + i).text();
            var jobnumber = angular.element('.jjobnum' + i).text();
            var jduedate = angular.element('.jduedate' + i).text();
            var jobEmail = angular.element('.jobEmail' + i).text();
            var jobResource = $('.jobResource' + i).text();
            if (auto == 'Auto' && status != 'Approved' && i == 0 && status != 'Requested') {
                if ($scope.jobdetail == undefined || $scope.jobdetail == null || $scope.jobdetail != '') {
                    $scope.jobdetail = {};
                }
                Autocheck.push(i);
                if (status == 'In preparation' && jobResource) {
                    $scope.item_status = "Requested";
                    $scope.jobdetail.jobnumber = jobnumber;
                    $scope.jobdetail.jduedate = jduedate;
                    $scope.jobdetail.jobEmail = jobEmail;
                    $scope.jobdetail.item_status = $scope.item_status;
                    $routeParams.id = summeryId;
                    rest.path = 'jobSummeryDetailsUpdate';
                    rest.put($scope.jobdetail).success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                }
            } else if (auto == 'Auto' && status == 'Approved') {
                temp.push(i + 1);
            } else if (auto == 'Auto' && status != 'Requested' && status != 'Approved') {
                autoUpdateS.push(i);
            } else if (auto == 'Auto' && status == 'Requested') {
                autoUpdateR.push(i);
            }
        });

        if (autoUpdateR == "") {
            var statusfirst = autoUpdateS[0];
        }

        var statusLast = temp.slice(-1).pop();
        var acheck = Autocheck[0];
        if (statusLast && acheck == undefined || statusfirst != undefined && acheck == undefined) {
            if (statusLast) {
                var status = angular.element('.jobStatusData' + statusLast).text();
                var auto = angular.element('.jStatusAuto' + statusLast).text();
                var summeryId = angular.element('.jsumId' + statusLast).text();
                var jobnumber = angular.element('.jjobnum' + statusLast).text();
                var jduedate = angular.element('.jduedate' + statusLast).text();
                var jobEmail = angular.element('.jobEmail' + statusLast).text();
                var jobResource = angular.element('.jobResource' + statusLast).text();
            } else {
                var status = angular.element('.jobStatusData' + statusfirst).text();
                var auto = angular.element('.jStatusAuto' + statusfirst).text();
                var summeryId = angular.element('.jsumId' + statusfirst).text();
                var jobnumber = angular.element('.jjobnum' + statusfirst).text();
                var jduedate = angular.element('.jduedate' + statusfirst).text();
                var jobEmail = angular.element('.jobEmail' + statusfirst).text();
                var jobResource = angular.element('.jobResource' + statusfirst).text();
            }

            if (auto == 'Auto' && status != 'Requested') {
                if ($scope.jobdetail == undefined || $scope.jobdetail == null || $scope.jobdetail != '') {
                    $scope.jobdetail = {};
                }
                if (status == 'In preparation' && jobResource) {
                    $scope.item_status = "Requested";
                    $scope.jobdetail.jobnumber = jobnumber;
                    $scope.jobdetail.jduedate = jduedate;
                    $scope.jobdetail.jobEmail = jobEmail;
                    $scope.jobdetail.item_status = $scope.item_status;
                    $routeParams.id = summeryId;
                    rest.path = 'jobSummeryDetailsUpdate';
                    rest.put($scope.jobdetail).success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                }
            }
        }
    }, 1000);

    //approved file data send to requested item
    $timeout(function () {
        var findApproved = [];
        for (var i = 0; i < angular.element('[class^=joStatus]').length; i++) {
            var status = angular.element('.jobStatusData' + i).text();
            var autoUpdate = angular.element('.jStatusAuto' + i).text();
            if (status === 'Approved' && autoUpdate != undefined) {
                findApproved.push(parseInt(i));
            }
        }

        var obj = [];
        for (var i = 0; i < angular.element('[class^=joStatus]').length; i++) {
            var lastApproved = $(findApproved).get(-1);
            if (lastApproved == 0 || lastApproved != "" && lastApproved != undefined) {
                var getStatus = lastApproved + 1;
                var status = angular.element('.jobStatusData' + getStatus).text();
                var approveStatus = angular.element('.jobStatusData' + lastApproved).text()
                var approveId = angular.element('.jsumId' + lastApproved).text();
                var requestId = angular.element('.jsumId' + getStatus).text();
                var appstat = angular.element('.jobstatsApp' + lastApproved).text();
                if (appstat == 0) {
                    if (approveId != "" && requestId != "") {
                        obj.push({
                            approveId: approveId,
                            requestId: requestId,
                            appSt: appstat
                        });
                    }
                }
            }
        }

        var last = obj.slice(-1)[0];
        if (last != undefined) {
            if (last.approveId != undefined && last.requestId != undefined && last.appSt == 0) {
                rest.path = "filemanagerApproveSend/" + last.approveId + '/' + last.requestId;
                rest.get().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }

    }, 1000);

    $scope.resouceEdit1 = function (id, item, resource) {
        angular.element('input#resources' + id + item).select2('val', resource);
        $scope.resourceStatus = id + "" + item;
    }
    $scope.resouceEdit = function (id, item, resource) {
        angular.element('input#resources' + id + item).select2('val', resource);
        $scope.resourceStatus = id + "" + item;
    }

    $scope.resourceSave = function (sumId, resourceId) {
        if ($scope.jobd == "" || $scope.jobd == undefined || $scope.jobd == null) {
            $scope.jobd = {};
        }

        $scope.resource = resourceId;
        $scope.jobd.resource = $scope.resource;
        $routeParams.id = sumId;
        

        rest.path = 'jobSummeryJobDetailsUpdate';
        rest.put($scope.jobd).success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }

    $scope.hoverIn = function () {
        this.hoverEdit = true;
    };

    $scope.hoverOut = function () {
        this.hoverEdit = false;
    };

    // DataTables configurable options
    $scope.dtOptions = DTOptionsBuilder.newOptions().withOption('scrollY', '100%').withOption('scrollX', '100%').withOption('scrollCollapse', true).withOption('paging', false).withOption('paging', false).withOption('paging', false);

    $scope.lang_st = [];
    if ($routeParams.id) {
        
        rest.path = 'jobitemsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.jobitList = [];
            

            angular.forEach(data, function (val, i) {
            
                /* var newSourceLang1 = newSourceLang.sourceLang
                var newTargetLang = angular.toJson(val.target_lang);
                 */
                if (val.due_date != null) {
                    /*var sales = val.total_amount
                    sales = $filter('customNumber')(sales);
                    var html = "<table><tr><td>Sales : </td><td>" + sales + "</td></tr><tr><td>Expense I (Prices) : </td><td>0.0<td></tr><tr><td>Gross profit : </td><td>0.0</td></tr><tr><td>Profit margin : </td><td>100%</td></tr></table>";
                    $timeout(function() {
                        angular.element("#myPopover" + i).popover({
                            title: '',
                            content: html,
                            html: true,
                        });
                    }, 3000);*/
                    // To get language list when create new job (insert)
                    var newSourceLang = '';
                    var newTargetLang = '';
                    if (val.source_lang)
                        newSourceLang = JSON.parse(val.source_lang).sourceLang;
                    if (val.target_lang)
                        newTargetLang = JSON.parse(val.target_lang).sourceLang;
                    var objLan = {
                        order_id: val.order_id,
                        itemId: val.itemId,
                        item_number: val.item_number,
                        newSourceLang: newSourceLang,
                        newTargetLang: newTargetLang
                    }
                    $scope.lang_st.push(objLan);

                    $scope.jobitList.push(val);
                }
            });
        })
    }

    $scope.countAction = function (id, name) {
        closeWindows();
        localStorage['jobfolderId'] = id;
        localStorage['typeOfJobFolder'] = name;
        $window.localStorage.ItemClient = '';
        var ItemcodeNumber = angular.element('#itemCode').text();
        // start to get downloaded folder name with client name
        rest.path = 'customer/' + $window.localStorage.orderID;
        rest.get().success(function (res) {
            $scope.customer = res;
            if (res) {
                rest.path = 'client/' + $scope.customer.client;
                rest.get().success(function (cData) {
                    $scope.directClientData = cData
                    $window.localStorage.ItemClient = $scope.directClientData.vUserName;
                }).error(function (data, error, status) { });
            }
        })
        // end
        $window.localStorage.ItemcodeNumber = ItemcodeNumber;

        var JobFolders = window.open('#/filemanager/' + name, "popup", "width=1000,height=750");
        JobFolders.addEventListener("beforeunload", function () {
            var id1 = $window.localStorage.getItem("jobFolderRoot");
            var type1 = $window.localStorage.getItem("jobFoldertype");
            
            var externalResourceUserId1 = null;
            var count;
            rest.path = 'filefolderGet/' + id1 + '/' + type1 + '/' + externalResourceUserId1;
            rest.get().success(function (data) {
                count = data.length;
                if (!count) {
                    count = 0;
                }
                if (type1) {
                    if (type1 == 'source') {
                        $('#sourceCount-' + id).text(count);

                    }
                    if (type1 == 'target') {
                        $('#targetCount-' + id).text(count);
                    }
                }
            }).error(errorCallback);

            localStorage['parentId'] = ' ';
            $window.localStorage.setItem("jobFoldertype", '');
            return false;
        }, false);
        openWindows.push(JobFolders);
    }

    var getCountJobFolder = function () {
        var count = $window.localStorage.getItem("sourceFolderCount");
        if (!count) {
            count = 0;
        }
        var type = $window.localStorage.getItem("jobFoldertype");
        var id = $window.localStorage.getItem("jobfolderId");
        
        if (type) {
            if (type == 'source') {
                //$('#sourceCount-' + id).text(count);
                $('.sourceC' + id).text(count);
            }
            if (type == 'target') {
                //$('#targetCount-' + id).text(count);
                $('.sourceC' + id).text(count);
            }
        }
    }
    $interval(getCountJobFolder, 1000);

    $scope.jobNoDetails = function (id) {
        scrollBodyToTop();
        //$location.path('job-summery-details/' + id);
        $routeParams.id = id;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/jobEditPopup.html',
            controller: 'jobSummeryDetailsController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
    }

    $scope.timerview = false;

    $scope.tabledetail = function () {
        $scope.tableshow = false;
        $scope.tableshow1 = false;
        $scope.tableshowAll = false;
    }

    $scope.tabledetail1 = function () {
        $scope.tableshow1 = true;
        $scope.tableshow = true;
        $scope.tableshowAll = true;
    }

    $scope.tabledetailIndependent = function () {
        if ($scope.tableshow1 == true) {
            $scope.tableshow1 = false;
            $scope.tableshow == false;
        } else {
            $scope.tableshow1 = true;
            $scope.tableshow == true;
        }
    }

    $scope.timerShow = function () {
        if ($scope.timerview == true) {
            $scope.$broadcast('timer-stop');
            $scope.timerview = false;
        } else {
            $scope.$broadcast('timer-start');
            $scope.timerview = true;
        }

        $scope.$on('timer-stopped', function (event, data) {
            alert('Timer Stopped - data = ', data);
        });
    }

    $scope.tabledetailAll = function (index) {
        angular.element('.ta' + index).toggleClass('none');
        angular.element('#down' + index).toggleClass('fa-chevron-down');
        angular.element('#down' + index).toggleClass('fa-chevron-right');
    }

    $scope.resourceRedirect = function (resource) {
        rest.path = 'resourceRedirect/' + resource;
        rest.get().success(function (data) {
            var id = data;
            if ($location.path('/viewinternal/' + id)) {
                $location.path('/viewinternal/' + id);
            } else {
                $location.path('viewExternal/' + id);
            }
        }).error(errorCallback);
    }

    //manual job add
    $scope.manualAuto = function (status, id) {
        rest.path = 'autostatusUpdate/' + id + '/' + status + '/' + $routeParams.id;
        rest.get().success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }

    //auto job add
    $scope.Automanual = function (status, id) {
        rest.path = 'autostatusUpdate/' + id + '/' + status + '/' + $routeParams.id;
        rest.get().success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }

    $scope.autoIdChecked = function (id) {
        rest.path = 'autostatusChecked/' + id;
        rest.get().success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }

    $scope.jumptoItem = function () {
        $window.localStorage.orderID = $routeParams.id;
        //set isNewProject to false
        $window.localStorage.setItem("isNewProject", "false");
        const prevUrl = $routeParams.id ? '/'+$routeParams.id : '';
        $location.path('/items'+prevUrl);
    }

    $scope.newJobAdd = function (job, set) {
        if (job) {
            $scope.jobSummeryChain = job.substr(1);
            $scope.matchjob = job.slice(0, 1);
            if ($scope.matchjob == 'j') {
                rest.path = 'jobpertjobGet/' + $scope.jobSummeryChain + '/' + $routeParams.id;
                rest.get().success(function (data) {
                    $scope.itemdata = data;
                    if ($scope.jobSummeryChain) {
                        rest.path = 'jobitemsidget/' + $scope.jobSummeryChain + '/' + $routeParams.id;
                        rest.get().success(function (data) {
                            $scope.iData = data;
                            var contact_person = [];
                            var job_id = [];
                            var order_id = [];
                            var job_no = [];
                            var due_date = [];
                            var item_status = [];
                            $scope.job_id = $scope.jobSummeryChain;
                            $scope.job_code = $scope.itemdata.job_code;
                            $scope.order_id = $routeParams.id;
                            $scope.job_no = $scope.itemdata.job_no;
                            $scope.master_job_id = $scope.itemdata.job_id;
                            if ($scope.iData != null) {
                                $scope.contact_person = $scope.iData.contact_person;
                                $scope.due_date = $scope.iData.due_date;
                                $scope.item_status = $scope.iData.item_status;
                            } else {
                                $scope.contact_person = " ";
                                $scope.due_date = " ";
                                $scope.item_status = " ";
                            }

                            if ($scope.jobitem == undefined || $scope.jobitem == "" || $scope.jobitem == null) {
                                $scope.jobitem = {};
                            }

                            $scope.jobitem.job_no = $scope.job_no;
                            $scope.jobitem.job_id = $scope.job_id;
                            $scope.jobitem.job_code = $scope.job_code;
                            $scope.jobitem.contact_person = $scope.contact_person;
                            $scope.jobitem.order_id = $routeParams.id;
                            $scope.jobitem.due_date = $scope.due_date;
                            $scope.jobitem.master_job_id = $scope.master_job_id;
                            //$scope.jobitem.item_status = $scope.item_status;
                            $scope.jobitem.item_id = set;
                            rest.path = 'jobSummarySave';
                            rest.post($scope.jobitem).success(function (data) {
                                var obj = [];
                                if ($cookieStore.get('jobRecentAdd') != undefined) {
                                    angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                        obj.push(val);
                                    });
                                }
                                obj.push(data['order_id']);
                                $cookieStore.put('jobRecentAdd', obj);
                                $route.reload();
                            })
                        })
                    }
                }).error(errorCallback);
            } else {
                var chainId = set;
                rest.path = 'jobpertjobChainGet/' + $scope.jobSummeryChain + '/' + $routeParams.id + '/' + chainId;
                rest.get().success(function (data) {
                    $scope.jobnumchain = data.job_no += 1;
                    if (data.newJob == "") {
                        notification('No job in jobchain', 'warning');
                    } else {
                        angular.forEach(data.newJob, function (val, i) {
                            if (chainId != null || chainId != undefined || chainId != " " || chainId == '0') {
                                rest.path = 'jobitemsidget/' + chainId + '/' + $routeParams.id;
                                rest.get().success(function (data) {
                                    $scope.iData = data;
                                    var contact_person = [];
                                    var job_id = [];
                                    var order_id = [];
                                    var job_no = [];
                                    var due_date = [];
                                    var item_status = [];
                                    $scope.job_id = $scope.jobSummeryChain;
                                    $scope.job_code = val.job_code;
                                    $scope.order_id = $routeParams.id;
                                    $scope.job_no = $scope.jobnumchain++;
                                    $scope.master_job_id = val.job_id;
                                    if ($scope.iData != null) {
                                        $scope.contact_person = $scope.iData.contact_person;
                                        $scope.due_date = $scope.iData.due_date;
                                        $scope.item_status = $scope.iData.item_status;
                                    } else {
                                        $scope.contact_person = "";
                                        $scope.due_date = "";
                                        $scope.item_status = "";
                                    }
                                    if ($scope.jobitem == undefined || $scope.jobitem == "" || $scope.jobitem == null) {
                                        $scope.jobitem = {};
                                    }
                                    $scope.jobitem.job_no = $scope.job_no;
                                    $scope.jobitem.job_id = $scope.job_id;
                                    $scope.jobitem.job_code = $scope.job_code;
                                    $scope.jobitem.contact_person = $scope.contact_person;
                                    $scope.jobitem.order_id = $routeParams.id;
                                    $scope.jobitem.due_date = $scope.due_date;
                                    $scope.jobitem.master_job_id = $scope.master_job_id;
                                    //$scope.jobitem.item_status = $scope.item_status;
                                    $scope.jobitem.item_id = set;
                                    rest.path = 'jobSummarySave';
                                    rest.post($scope.jobitem).success(function (data) {
                                        var obj = [];
                                        if ($cookieStore.get('jobRecentAdd') != undefined) {
                                            angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                                obj.push(val);
                                            });
                                        }
                                        obj.push(data['order_id']);
                                        $cookieStore.put('jobRecentAdd', obj);
                                        $route.reload();
                                    })
                                })
                            } else {
                                var job_no = [];
                                $scope.job_id = $scope.jobSummeryChain;
                                $scope.job_code = val.job_code;
                                $scope.order_id = $routeParams.id;
                                $scope.job_no = $scope.jobnumchain++;
                                $scope.master_job_id = val.job_id;
                                if ($scope.jobitem == undefined || $scope.jobitem == "" || $scope.jobitem == null) {
                                    $scope.jobitem = {};
                                }
                                $scope.jobitem.job_no = $scope.job_no;
                                $scope.jobitem.job_id = $scope.job_id;
                                $scope.jobitem.job_code = $scope.job_code;
                                $scope.jobitem.order_id = $routeParams.id;
                                $scope.jobitem.master_job_id = $scope.master_job_id;
                                $scope.jobitem.item_id = 0;
                                rest.path = 'jobSummarySave';
                                rest.post($scope.jobitem).success(function (data) {
                                    var obj = [];
                                    if ($cookieStore.get('jobRecentAdd') != undefined) {
                                        angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                            obj.push(val);
                                        });
                                    }
                                    obj.push(data['order_id']);
                                    $cookieStore.put('jobRecentAdd', obj);
                                    $route.reload();
                                })
                            }
                        })
                    }
                });
            }
        }
    }

    if ($routeParams.id) {
        $scope.item = $routeParams.id;
        rest.path = 'jobitemsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.itemjobList = data;
            
        }).error(errorCallback);
        rest.path = 'jobDetailLanguageGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.language = data;
        }).error(errorCallback);

        //getting ProjectOrderName and indirect clint name
        // rest.path = 'getClientIndirectClient/' + $routeParams
        rest.path = 'getClientIndirectClient/' + $routeParams.id;
        rest.get().success(function (data) {
            if (data.order_number) {
                $scope.projectOrderData = data;
                var projectOrderName = $scope.projectOrderData.abbrivation + pad($scope.projectOrderData.order_number, 4);
                $window.localStorage.setItem("projectOrderName", projectOrderName);
                $window.localStorage.setItem("indirectCustomerName", $scope.projectOrderData.indirect_customer);
            }
        }).error(errorCallback);
    }

    var allitCheked = [];
    $scope.itemAll = [];
    if ($routeParams.id) {
        rest.path = 'itemsGet/' + $routeParams.id;
        rest.get().success(function (data1) {
            $scope.itemLength = data1;
            
            rest.path = 'jobsummeryGet/' + $routeParams.id;
            rest.get().success(function (data) {

                $scope.itemListFinal = [];
                rest.path = "getsaveSortedJobsData/" + $window.localStorage.orderID;
                rest.get().success(function (d) {
                    $scope.availableSortedJobs = d;

                    if ($scope.availableSortedJobs.length > 0) {
                        $scope.itemList = d;
                    } else {
                        $scope.itemList = data;
                    }

                    angular.forEach($scope.itemLength, function (e, i) {
                        $scope.itemListFinal.push($scope.itemList.filter(function (e1, i1) {
                            return e1.item_id == e.item_number;
                        }));
                        
                    });

                    angular.forEach($scope.itemList, function (val, i) {
                        if (val.job_summmeryId) {
                            rest.path = 'jobSummeryDetailsGet/' + val.job_summmeryId;
                            rest.get().success(function (data) {
                                $timeout(function () {
                                    //count file
                                    if (data) {
                                        rest.path = 'filefolderstget/' + data[0].fmanager_id + '/' + $routeParams.id;
                                        rest.get().success(function (data) {
                                            var sourceFile = [];
                                            var targetFile = [];
                                            angular.element('.sourceC' + val.job_summmeryId).text(data.source);
                                            angular.element('.targteC' + val.job_summmeryId).text(data.target);
                                        }).error(errorCallback);
                                    }
                                }, 100);
                            }).error(errorCallback);
                        }
                    })

                    $timeout(function () {
                        $('#tblDataLoading').css('display', 'none');
                    }, 300);

                    // calcualtion for profit margin
                    angular.forEach($scope.itemjobList, function (val, i) {
                        var scoopItem = val.item_number;
                        var totalJobAmount = 0;
                        angular.forEach($scope.itemList, function (value, j) {
                            //$timeout(function() {
                            if (val.item_number == value.item_id && val.order_id == value.order_id) {
                                var tPrice = (value.total_price) ? value.total_price : parseInt(0);
                                if (tPrice) {
                                    totalJobAmount += parseFloat(tPrice);
                                }
                            }
                            //}, 100);
                        })
                        if (totalJobAmount == undefined) {
                            totalJobAmount = 0.00;
                        }
                        if(val.source_lang)
                            val.source_lang = JSON.parse(val.source_lang);
                        if(val.target_lang)
                            val.target_lang = JSON.parse(val.target_lang);
                        val.stLang = (val.source_lang && val.target_lang ) ? val.source_lang.sourceLang + ' > ' + val.target_lang.sourceLang : '';
                        var scoopAmount = $scope.itemjobList[i].total_amount ? parseFloat($scope.itemjobList[i].total_amount) : 0;
                        var jobAmount = parseFloat(totalJobAmount);
                        var profit = scoopAmount - jobAmount;
                        if (scoopAmount) {
                            var marginloss = 0;
                            var profitMargin = ((scoopAmount - jobAmount) * 100) / parseFloat(scoopAmount);
                        } else {
                            var marginloss = 1;
                            if (jobAmount > 0) {
                                profitMargin = -100;
                            } else {
                                profitMargin = 0;
                            }
                        }
                        var grossProfit = scoopAmount - jobAmount;
                        var grossProfit = grossProfit ? grossProfit : 0.00;
                        if (profitMargin) {
                            profitMargin = profitMargin.toFixed(2);
                            var isNegetive = Math.sign(profitMargin);
                            if (isNegetive == -1 || isNegetive == -0) {
                                var marginloss = 1;
                            }
                            profitMargin = $filter('NumbersCommaformat')(profitMargin) + "%";
                        } else {
                            profitMargin = '0,00' + "%";
                            var marginloss = 1;
                        }

                        angular.element('#profitMargin' + $scope.itemjobList[i].item_number).text(profitMargin);
                        if (marginloss) {
                            $('#profitMargin' + $scope.itemjobList[i].item_number).css("color", "red");
                        }
                        if (val.due_date != null) {
                            var sales = val.total_amount
                            sales = $filter('NumbersCommaformat')(sales);
                            var sales = sales ? sales : '0,00';
                            var expense = $filter('NumbersCommaformat')(jobAmount);
                            var expense = expense ? expense : '0,00';
                            var grossProfit = $filter('NumbersCommaformat')(grossProfit);
                            var grossProfit = grossProfit ? grossProfit : '0,00';
                            var html = "<table><tr><td>Sales : </td><td>" + sales + "</td></tr><tr><td>Expense I (Prices) : </td><td> " + expense + " <td></tr><tr><td>Gross profit : </td><td> " + grossProfit + "</td></tr><tr><td>Profit margin : </td><td> " + profitMargin + "</td></tr></table>";
                            $timeout(function () {
                                angular.element("#myPopover" + i).popover({
                                    title: '',
                                    content: html,
                                    html: true,
                                });

                            }, 3000);
                        }
                    })

                    if (!$scope.itemList.length || $scope.itemList == "" || $scope.itemList == "") {
                        $scope.displayNodata = true;
                    }
                }).error(errorCallback);

                $scope.itemjobDataId = [];
                angular.forEach(data, function (val, i) {
                    if (val.item_id != 0) {
                        $scope.itemjobDataId = 1;
                    }
                })

                $scope.checkAll = function (id) {
                    console.log('id-all-clickedd', id)
                    switch (id) {
                        case "1":
                            console.log('$scope.itemalldata', $scope.itemalldata)
                                
                            if ($scope.itemalldata == true) {
                                $scope.itemalldata = false;
                            } else {
                                $scope.itemalldata = true;
                            }
                            var itemAlldataChecked = [];
                            angular.forEach($scope.itemList, function (it) {
                                it.itemAllChecked = $scope.itemalldata;
                                allitCheked.push({
                                    id: it.job_summmeryId,
                                    contactPerson: it.contact_person,
                                    item_id: it.item_id
                                });
                            });
                            break;
                        case "2":
                            if ($scope.itemlanguageindependentall == true) {
                                $scope.itemlanguageindependentall = false;
                            } else {
                                $scope.itemlanguageindependentall = true;
                            }
                            var itemindependentChecked = [];
                            angular.forEach($scope.itemList, function (it) {
                                it.itemindependentChecked = $scope.itemlanguageindependentall;
                                allitCheked.push({
                                    id: it.job_summmeryId,
                                    contactPerson: it.contact_person,
                                    item_id: it.item_id
                                });
                            });
                            break;
                        default:
                            $scope.itemall = true;
                            if ($scope.selectedAll == true) {
                                $scope.selectedAll = false;
                            } else {
                                $scope.selectedAll = true;
                            }
                            var itemChecked = [];
                            angular.forEach($scope.itemList, function (it) {
                                it.itemChecked = $scope.selectedAll;
                                allitCheked.push({
                                    id: it.job_summmeryId,
                                    contactPerson: it.contact_person,
                                    item_id: it.item_id
                                });
                            });
                            break;
                    }
                }
            }).error(errorCallback);

        })

        $scope.manual = false;
        $scope.auto = true;
    }

    $scope.sendEmailemidiatly = function () {
        if (allitCheked != null && allitCheked != undefined && allitCheked != "") {
            $scope.itemAll = JSON.stringify(allitCheked);
            var data = JSON.parse($scope.itemAll);
            var contactper = [];

            if ($scope.it == undefined || $scope.it == null || $scope.it == "") {
                $scope.it = {};
            }

            angular.forEach(data, function (val, i) {
                if (val.contactPerson) {
                    rest.path = 'jobselectContactName/' + val.contactPerson;
                    rest.get().success(function (data) {
                        $scope.userEmail = data;
                        $scope.it.userEmail = $scope.userEmail;
                        $routeParams.id = val.id;
                        rest.path = 'jobselectUserEmail';
                        rest.put($scope.it).success(function (data) {
                            notification('Mail send successfully', 'success');
                            $route.reload();
                        }).error(errorCallback);
                    })
                }
            })
        }
    }

    $scope.selectionAction = function (action) {

        switch (action) {
            case "Select All":
                $scope.setContactperson = false;
                $scope.setItemStatus = false;
                $scope.setDuedate = false;
                $scope.assignResource = false;
                $scope.MoveSelectedJobs = false;
                break;
            case "Remove Selection":
                $scope.setContactperson = false;
                $scope.setItemStatus = false;
                $scope.setDuedate = false;
                $scope.assignResource = false;
                $scope.MoveSelectedJobs = false;
                break;
            case "Delete":
                $scope.setContactperson = false;
                $scope.setItemStatus = false;
                $scope.setDuedate = false;
                $scope.assignResource = false;
                $scope.MoveSelectedJobs = false;
                break;
            case "Send e-mail":
                $scope.setContactperson = false;
                $scope.setItemStatus = false;
                $scope.setDuedate = false;
                $scope.assignResource = false;
                $scope.MoveSelectedJobs = false;
                break;
            case "Set project manager to":
                $scope.setContactperson = true;
                $scope.setItemStatus = false;
                $scope.setDuedate = false;
                $scope.assignResource = false;
                $scope.MoveSelectedJobs = false;
                break;
            case "Change Status to":
                $scope.setContactperson = false;
                $scope.setItemStatus = true;
                $scope.setDuedate = false;
                $scope.assignResource = false;
                $scope.MoveSelectedJobs = false;
                break;
            case "Set due date to":
                $scope.setContactperson = false;
                $scope.setItemStatus = false;
                $scope.setDuedate = true;
                $scope.assignResource = false;
                $scope.MoveSelectedJobs = false;
                break;
            case "Assign Resource":
                $scope.setContactperson = false;
                $scope.setItemStatus = false;
                $scope.setDuedate = false;
                $scope.assignResource = true;
                $scope.MoveSelectedJobs = false;
                break;
            case "Move selected Jobs":
                //alert('Move selected Jobs');
                $scope.MoveSelectedJobs = true;
                $scope.setContactperson = false;
                $scope.setItemStatus = false;
                $scope.setDuedate = false;
                $scope.assignResource = false;
                break;
        }
    }

    /*JobCheckBox Check/uncheck code START*/
    Array.prototype.remove = function () {
        var what, a = arguments,
            L = a.length,
            ax;
        while (L && this.length) {
            what = a[--L];
            while ((ax = this.indexOf(what)) !== -1) {
                this.splice(ax, 1);
            }
        }
        return this;
    };


    $scope.checkBoxCheckFromMultiple = function (val, jobSummeryId) {
        var isChecked = $("#jobId-" + jobSummeryId).prop("checked");
        if (isChecked) {
            var obj = {
                'id': jobSummeryId
            }
            allitCheked.push(obj);
        } else {
            angular.forEach(allitCheked, function (value, key) {
                if (value.id == jobSummeryId) {
                    allitCheked.splice(key, 1);
                }
            });
        }
    }
    /*JobCheckBox Check/uncheck code END*/
    // all check base on scoop
    $scope.checkAlljobsScoop = function(scoopId){
        let isChecked = $("#scoopJobs"+scoopId).prop("checked");
        angular.forEach($scope.itemList, function (it) {
            if(it.item_id == scoopId){
                if(isChecked){
                    $("#jobId-" + it.job_summmeryId).prop("checked", true);
                    var obj = {
                        'id': it.job_summmeryId
                    }
                    allitCheked.push(obj);
                }else{
                    $("#jobId-" + it.job_summmeryId).prop("checked", false);
                    const indexOfObject = allitCheked.findIndex(object => {
                        return object.id === it.job_summmeryId;
                    });
                    allitCheked.splice(indexOfObject, 1);
                }
                console.log('allitCheked', allitCheked)

            }
        });
    }
    

    $scope.selectionActionOption = function (action) {

        if (action == 'select') {
            notification('Please select option.', 'warning');
            return false;
        }
        switch (action) {
            case "Move selected Jobs":
                var jobNotMoved = [];
                var itemSelect = angular.element("#move_job_item_id").val();
                if (itemSelect == 'select') {
                    notification('Please select item to move job', 'warning');
                    $('#move_job_item_id').css('border', '1px solid red');
                    $('#move_job_item_id').addClass('face');
                    $timeout(function () {
                        $('#move_job_item_id').removeClass('face');
                        $('#move_job_item_id').css('border', '0px solid red');
                    }, 3000);
                    return false;
                }
                if (allitCheked.length != 0) {
                    angular.forEach(allitCheked, function (val, i) {
                        var JobSummeryId = val.id;
                        var job_id = angular.element("#jobSummeryId" + JobSummeryId).val();
                        var ItemId = angular.element("#move_job_item_id").val();
                        var jobItemLanguage = '';
                        var newLag = $scope.lang_st.filter((st) => st.item_number == ItemId);
                        if (newLag.length > 0) {
                            var newlangIns = newLag[0].newSourceLang + ' > ' + newLag[0].newTargetLang;
                            jobItemLanguage = newlangIns;
                        }
                        var JobObj = {
                            "item_id": ItemId,
                            "job_id": job_id,
                            "oId": $window.localStorage.orderID,
                        }
                        if (jobItemLanguage)
                            JobObj.ItemLanguage = jobItemLanguage;

                        $routeParams.id = JobSummeryId;
                        rest.path = 'moveJob';
                        rest.put(JobObj).success(function (data) {
                            if (data.status == 422) {
                                jobNotMoved.push(data.jobNumber);
                            }
                        }).error(errorCallback);
                    })
                    var html1 = '';
                    var listArray = [
                        'list-group-item-success',
                        'list-group-item-info',
                        'list-group-item-warning',
                        'list-group-item-danger'
                    ];

                    $timeout(function () {
                        if (jobNotMoved.length > 0) {
                            angular.forEach(jobNotMoved, function (val, i) {
                                var ListClass = listArray[Math.floor(Math.random() * listArray.length)];
                                html1 += '<li class="list-group-item ' + ListClass + '"><i class="fa fa-arrow-circle-right" aria-hidden="true"></i>' + ' ' + val + '</li>';
                            })

                            $timeout(function () {
                                $('#jobNumberModal').find('.modal-body ul').html(html1);
                                $('#jobNumberModal').find('.modal-body p').text('The Following jobs are already exists in the item you select.');
                                $('#jobNumberModal').modal('show');
                            }, 400);
                        } else {
                            notification('Jobs moved successfully', 'success')
                            $route.reload();
                        }
                    }, 1000);

                    /*Reload Page After closing modal popup START*/
                    $timeout(function () {
                        $('#jobNumberModal').on('hidden.bs.modal', function () {
                            $route.reload();
                        })
                    }, 200);
                    /*Reload Page After closing modal popup END*/
                } else {
                    notification('Please select job', 'warning');
                }
                break;
            case "Select All":
                if ($routeParams.id) {
                    //allitCheked clear to add new all checked values
                    allitCheked = [];

                    $.each($("[id^='jobId']"), function () {
                        $("#" + this.id).prop("checked", true);
                        var jobSummmeryId = this.id.split('-')[1];
                        allitCheked.push({
                            id: jobSummmeryId
                        });
                    });
                    notification('All jobs selected successfully.', 'success');
                }
                break;
            case "Remove Selection":
                //uncheck all checkbox and allitCheked clear
                $.each($("[id^='jobId']"), function () {
                    $("#" + this.id).prop("checked", false);
                });
                allitCheked = [];
                notification('All jobs selection remove successfully.', 'success');
                break;
            case "Delete":
                if (allitCheked != null && allitCheked != undefined && allitCheked != "") {
                    var invoiceAddedJobs = [];
                    bootbox.confirm("Are you sure you want to delete this row?", function (result) {
                        if (result == true) {
                            var itemAll = [];
                            $scope.itemAll = JSON.stringify(allitCheked);
                            var data = JSON.parse($scope.itemAll);
                            angular.forEach(data, function (val, i) {
                                if (val.id) {
                                    rest.path = 'jobitemDelete/' + val.id;
                                    rest.delete().success(function (res) {
                                        if (res.status == 422) {
                                            invoiceAddedJobs.push(res.jobNumber);
                                        }
                                        // /$route.reload();
                                    }).error(errorCallback);
                                }
                            })

                            var html1 = '';
                            var listArray = [
                                'list-group-item-success',
                                'list-group-item-info',
                                'list-group-item-warning',
                                'list-group-item-danger'
                            ];

                            $timeout(function () {
                                if (invoiceAddedJobs.length > 0) {
                                    angular.forEach(invoiceAddedJobs, function (val, i) {
                                        var ListClass = listArray[Math.floor(Math.random() * listArray.length)];
                                        html1 += '<li class="list-group-item ' + ListClass + '"><i class="fa fa-arrow-circle-right" aria-hidden="true"></i>' + ' ' + val + '</li>';
                                    })
                                    $timeout(function () {
                                        $('#jobNumberModal').find('.modal-body ul').html(html1);
                                        $('#jobNumberModal').modal('show');
                                    }, 400);
                                } else {
                                    notification('Jobs deleted successfully', 'success')
                                    $route.reload();
                                }
                            }, 1000);

                            /*Reload Page After closing modal popup START*/
                            $timeout(function () {
                                $('#jobNumberModal').on('hidden.bs.modal', function () {
                                    $route.reload();
                                })
                            }, 200);
                            /*Reload Page After closing modal popup END*/

                        }
                    });
                } else {
                    notification('Please select job', 'warning');
                }
                break;

            case "Send e-mail":
                if (allitCheked != null && allitCheked != undefined && allitCheked != "") {
                    $scope.itemAll = JSON.stringify(allitCheked);
                    var data = JSON.parse($scope.itemAll);
                    var contactper = [];
                    if ($scope.it == undefined || $scope.it == null || $scope.it == "") {
                        $scope.it = {};
                    }
                    angular.forEach(data, function (val, i) {
                        if (val.contactPerson) {
                            rest.path = 'jobselectContactName/' + val.contactPerson;
                            rest.get().success(function (data) {
                                $scope.userEmail = data;
                                $scope.it.userEmail = $scope.userEmail;
                                $routeParams.id = val.id;
                                rest.path = 'jobselectUserEmail';
                                rest.put($scope.it).success(function (data) {
                                    notification('Mail send successfully', 'success');
                                    $route.reload();
                                }).error(errorCallback);
                            })
                        }
                    })
                } else {
                    notification('Please select job', 'warning');
                }
                break;
            case "Set project manager to":
                var setcontactPerson = $('#setcontactPerson').val();
                if (setcontactPerson == 0) {
                    notification('Please select contact person.', 'warning');
                    $('#s2id_setcontactPerson').css('border', '1px solid red');
                    $('#s2id_setcontactPerson').addClass('face');
                    $timeout(function () {
                        $('#s2id_setcontactPerson').removeClass('face');
                        $('#s2id_setcontactPerson').css('border', '0px solid red');
                    }, 3000);
                    return false;
                }

                if (allitCheked != null && allitCheked != undefined && allitCheked != "") {
                    if (allitCheked.length == 0) {
                        notification('Please select job', 'warning');
                        return false;
                    }
                    var itemAll = [];
                    $scope.itemAll = JSON.stringify(allitCheked);
                    var data = JSON.parse($scope.itemAll);
                    if ($scope.it == undefined || $scope.it == null || $scope.it == "") {
                        $scope.it = {};
                    }
                    angular.forEach(data, function (val, i) {
                        if (val.id) {
                            var contact_person = angular.element("#setcontactPerson").val();
                            $scope.contact_person = contact_person;
                            $scope.it.contact_person = $scope.contact_person;
                            $routeParams.id = val.id;
                            rest.path = 'jobselectContactNameupdate';
                            rest.put($scope.it).success(function (data) {
                                $scope.setContactperson = false;
                                $route.reload();
                            }).error(errorCallback);
                        }
                    })
                    notification('jobs updated successfully.', 'success');
                } else {
                    notification('Please select job', 'warning');
                }
                break;

            case "Change Status to":
                var setItemStatus = $('#setItemStatus').val();
                
                if (setItemStatus == 0) {
                    notification('Please select status.', 'warning');
                    $('#s2id_setItemStatus').css('border', '1px solid red');
                    $('#s2id_setItemStatus').addClass('face');
                    $timeout(function () {
                        $('#s2id_setItemStatus').removeClass('face');
                        $('#s2id_setItemStatus').css('border', '0px solid red');
                    }, 3000);
                    return false;
                }
                if (allitCheked != null && allitCheked != undefined && allitCheked != "") {
                    var itemAll = [];
                    $scope.itemAll = JSON.stringify(allitCheked);
                    var data = JSON.parse($scope.itemAll);
                    if ($scope.it == undefined || $scope.it == null || $scope.it == "") {
                        $scope.it = {};
                    }
                    angular.forEach(data, function (val, i) {
                        if (val.id) {
                            var setItem_Status = angular.element("#setItemStatus").val();
                            $scope.item_status = setItem_Status;
                            $scope.it.item_status = $scope.item_status;
                            $routeParams.id = val.id;
                            rest.path = 'jobselectContactNameupdate';
                            rest.put($scope.it).success(function (data) {
                                $scope.setItemStatus = false;
                                $route.reload();
                            }).error(errorCallback);
                        }
                    })
                    notification('jobs updated successfully.', 'success');
                } else {
                    notification('Please select job', 'warning');
                }
                break;

            case "Set due date to":
                var setDueDate = $('#setDueDate').val();

                if (setDueDate == 0) {
                    notification('Please select due date.', 'warning');
                    $('#setDueDate').css('border', '1px solid red');
                    $('#setDueDate').addClass('face');
                    $timeout(function () {
                        $('#setDueDate').removeClass('face');
                        $('#setDueDate').css('border', '0px solid red');
                    }, 3000);
                    return false;
                }
                if (allitCheked != null && allitCheked != undefined && allitCheked != "") {
                    var itemAll = [];
                    $scope.itemAll = JSON.stringify(allitCheked);
                    var data = JSON.parse($scope.itemAll);
                    if ($scope.it == undefined || $scope.it == null || $scope.it == "") {
                        $scope.it = {};
                    }
                    angular.forEach(data, function (val, i) {
                        if (val.id) {
                            var setdue_date = angular.element("#setDueDate").val();

                            var time = moment().format('HH:mm:ss');
                            $scope.it.due_date = originalDateFormatNew(setdue_date);
                            $scope.it.due_date = moment($scope.it.due_date).format('YYYY-MM-DD' + ' ' + time);

                            $routeParams.id = val.id;
                            rest.path = 'jobselectContactNameupdate';
                            rest.put($scope.it).success(function (data) {
                                $scope.setDuedate = false;
                                $route.reload();
                            }).error(errorCallback);
                        }
                    })
                    notification('jobs updated successfully.', 'success');
                } else {
                    notification('Please select job', 'warning');
                }
                break;

            case "Assign Resource":
                var assigndataResource = $('#assigndataResource').val();
                if (assigndataResource == "true") {
                    notification('Please select resource.', 'warning');
                    $('#s2id_assigndataResource').css('border', '1px solid red');
                    $('#s2id_assigndataResource').addClass('face');
                    $timeout(function () {
                        $('#s2id_assigndataResource').removeClass('face');
                        $('#s2id_assigndataResource').css('border', '0px solid red');
                    }, 3000);
                    return false;
                }

                if (allitCheked != null && allitCheked != undefined && allitCheked != "") {
                    var itemAll = [];
                    $scope.itemAll = JSON.stringify(allitCheked);
                    var data = JSON.parse($scope.itemAll);
                    if ($scope.it == undefined || $scope.it == null || $scope.it == "") {
                        $scope.it = {};
                    }
                    angular.forEach(data, function (val, i) {
                        if (val.id) {
                            var assignResource = angular.element("#assigndataResource").val();
                            $scope.resource = assignResource.split(',').pop().trim();
                            $scope.it.resource = $scope.resource;
                            $routeParams.id = val.id;
                            rest.path = 'jobselectContactNameupdate';
                            rest.put($scope.it).success(function (data) {
                                $scope.assignResource = false;
                                $route.reload();
                            }).error(errorCallback);
                        }
                    })
                    notification('jobs updated successfully.', 'success');
                } else {
                    notification('Please select job', 'warning');
                }
                break;
        }
    }

    
    $scope.jobsumResource = function (resourceName, jobSummeryId) {
        $window.localStorage.ResourceMsg = resourceName;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/jobresourcemsg.html',
            controller: 'jobResourceMsgController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });

    }

    $scope.jobSendRequest = function (resourceName, jobSummeryId) {
        $window.localStorage.ResourceMsg = resourceName;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/job-send-request.html',
            controller: 'jobSendRequestController',
            size: '',
            resolve: {
                items: function () {
                    return jobSummeryId;
                }
            }
        });

    }


    $scope.editJobList = function () {
        $scope.job = [];
        $scope.itemAll = JSON.stringify(allitCheked);
        var data = JSON.parse($scope.itemAll);
        $scope.it = {};
        angular.forEach(data, function (val, i) {
            if (val.id) {
                $scope.job[i] = true;
            }
        })
    }

    $scope.edit = function (jobId) {
        
        scrollBodyToTop();
        //$location.path('/job-summery-details/' + id);
        $routeParams.id = jobId;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/jobEditPopup.html',
            controller: 'jobSummeryDetailsController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
    }

    $scope.saveItem = function (id, jitem) {
        $routeParams.id = id;
        rest.path = 'jobSummeryitemUpdate';
        rest.put(jitem).success(function (data) {
            $route.reload();
        })
    }

    $scope.editJobListItemData = function () {
        rest.path = 'jobSummeryitemCheckEdit';
        rest.get().success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }


    $scope.deletejobsDetails = function (id, orderId, taskName) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'jobitemDelete/' + id;
                rest.delete().success(function (res) {
                    if (res.status) {
                        notification('You can not delete invoice created job.', 'error');
                    } else {
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = orderId;
                        $scope.logMaster.task_id = id;
                        $scope.logMaster.log_title = taskName;
                        $scope.logMaster.log_type = "delete";
                        $scope.logMaster.log_status = "task";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                    }
                    $route.reload();
                }).error(errorCallback);
            }
        });
    }

    $scope.jobList_jobChingetOne = function (data) {
        var deferred = $q.defer();
        rest.path = 'jobChingetOne/' + $scope.jobi.jobSummery;
        rest.get().success(function (res) {
            //
            if (res.sortedJobsJson) {
                $scope.savedSortedList = JSON.parse(res.sortedJobsJson);
                $scope.StoreAsSortJob = [];
                angular.forEach($scope.savedSortedList, function (v, i) {
                    var Searchedobj = data.newJob.find(function (obj) { return obj.new_job_id == v.id; });
                    if (Searchedobj) {
                        $scope.StoreAsSortJob.push(Searchedobj);
                    }
                });
                deferred.resolve($scope.StoreAsSortJob);
            } else {
                deferred.resolve(data.newJob);
            }
        }).error(function () {
            deferred.reject();
        });
        return deferred.promise;
    };


    $scope.jobList = function (id) {

        if ($('#jobchainName').val() == 'select' || $('#jobDropDown').val() == 'select') {
            notification('Please select option.', 'warning');
            return false;
        } else {

            if ($scope.jobi.jobSummery) {
                var dd = $scope.jobi.jobSummery;
                //var dd = $scope.jobi.jobSummery[0];
                $scope.jobi.jobSummery = dd.substr(1);
                $scope.matchjob = dd.slice(0, 1);
                
                if ($scope.matchjob == 'j') {
                    rest.path = 'jobpertjobGet/' + $scope.jobi.jobSummery + '/' + $routeParams.id;
                    rest.get().success(function (data) {
                        $scope.itemdata = data;
                        if ($scope.jobitem.item_id) {
                            rest.path = 'jobitemsidget/' + $scope.jobitem.item_id + '/' + $routeParams.id;
                            rest.get().success(function (data) {
                                $scope.iData = data;
                                var contact_person = [];
                                var job_id = [];
                                var order_id = [];
                                var job_no = [];
                                var due_date = [];
                                var item_status = [];
                                $scope.job_id = $scope.jobi.jobSummery;
                                $scope.job_code = $scope.itemdata.job_code;
                                $scope.order_id = $routeParams.id;
                                $scope.job_no = $scope.itemdata.job_no;
                                $scope.master_job_id = $scope.itemdata.job_id;

                                if ($scope.iData != null) {
                                    
                                    //$scope.contact_person = $scope.iData.contact_person;
                                    $scope.contact_person = $scope.iData.manager;
                                    $scope.due_date = $scope.iData.due_date;
                                    $scope.item_status = $scope.iData.item_status;
                                } else {
                                    $scope.contact_person = "";
                                    $scope.due_date = "";
                                    $scope.item_status = "";
                                }

                                $scope.jobitem.job_no = $scope.job_no;
                                $scope.jobitem.job_id = $scope.job_id;
                                $scope.jobitem.job_code = $scope.job_code;
                                $scope.jobitem.contact_person = $scope.contact_person;
                                $scope.jobitem.order_id = $routeParams.id;
                                //$scope.jobitem.due_date = $scope.due_date;
                                $scope.jobitem.due_date = '';
                                $scope.jobitem.master_job_id = $scope.master_job_id;
                                if ($scope.job_no == undefined) {
                                    $scope.job_no = 1;
                                }
                                if ($scope.iData) {
                                    $scope.po_number = $scope.iData.abbrivation + pad($scope.iData.order_number, 4) + '_' + $scope.job_code + pad($scope.job_no, 3);
                                    $scope.jobitem.tmp_po_number = $scope.po_number;
                                }

                                /* Job Status To New When Creating New / In preparation Job*/
                                $scope.jobitem.item_status = 'In preparation';
                                
                                // Remove if Display Assign PO Link
                                //$scope.jobitem.po_number = '';
                                $scope.jobitem.po_number = $scope.jobitem.tmp_po_number;
                                /* var checkisArrat = Array.isArray($scope.jobitem.item_id);
                                $scope.jobitem.item_id = $scope.jobitem.item_id[0]; */
                                var newLag = $scope.lang_st.filter((st) => st.item_number == $scope.jobitem.item_id);
                                if (newLag.length > 0) {
                                    var newlangIns = newLag[0].newSourceLang + ' > ' + newLag[0].newTargetLang;
                                    $scope.jobitem.ItemLanguage = newlangIns;
                                }
                                
                                rest.path = 'jobSummarySave';
                                rest.post($scope.jobitem).success(function (data) {
                                    if (data) {
                                        var obj = [];
                                        if ($cookieStore.get('jobRecentAdd') != undefined) {
                                            angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                                obj.push(val);
                                            });
                                        }
                                        obj.push(data['order_id']);
                                        $cookieStore.put('jobRecentAdd', obj);
                                        $route.reload();
                                    } else {
                                        notification('Job already exists in this item.', 'error');
                                    }
                                })
                            })
                        }
                    }).error(errorCallback);
                } else {
                    var chainId = angular.element('.job_chain_id').val();
                    if (chainId != undefined) {
                        rest.path = 'jobpertjobChainGet/' + $scope.jobi.jobSummery + '/' + $routeParams.id + '/' + chainId;
                        rest.get().success(function (data) {
                            $scope.jobnumchain = data.job_no += 1;
                            $scope.ijNum = 1;
                            if (data.newJob == "") {
                                notification('No job in jobchain', 'warning');
                            } else {
                                $scope.jobList_jobChingetOne(data)
                                    .then(function (_StoreAsSortJob) {
                                        angular.forEach(_StoreAsSortJob, function (val, i) {
                                            if (chainId) {
                                                rest.path = 'jobitemsidget/' + chainId + '/' + $routeParams.id;
                                                rest.get().success(function (data) {
                                                    $scope.iData = data;
                                                    var contact_person = [];
                                                    var job_id = [];
                                                    var order_id = [];
                                                    var job_no = [];
                                                    var due_date = [];
                                                    var item_status = [];
                                                    $scope.job_id = $scope.jobi.jobSummery;
                                                    $scope.job_code = val.job_code;
                                                    $scope.order_id = $routeParams.id;
                                                    $scope.master_job_id = val.job_id;
                                                    $scope.job_no = $scope.jobnumchain++;
                                                    if (!$scope.job_no) {
                                                        $scope.job_no = $scope.ijNum++;
                                                    }

                                                    if ($scope.iData != null) {
                                                        //$scope.contact_person = $scope.iData.contact_person;
                                                        $scope.contact_person = $scope.iData.manager;
                                                        $scope.due_date = $scope.iData.due_date;
                                                        $scope.item_status = $scope.iData.item_status;
                                                    } else {
                                                        $scope.contact_person = "";
                                                        $scope.due_date = "";
                                                        $scope.item_status = "";
                                                    }
                                                    if ($scope.jobitem == undefined || $scope.jobitem == "" || $scope.jobitem == null) {
                                                        $scope.jobitem = {};
                                                    }

                                                    $scope.jobitem.job_no = $scope.job_no;
                                                    $scope.jobitem.master_job_id = $scope.master_job_id;
                                                    $scope.jobitem.job_id = $scope.master_job_id;
                                                    // $scope.jobitem.job_id = $scope.job_id;
                                                    $scope.jobitem.job_code = $scope.job_code;
                                                    $scope.jobitem.contact_person = $scope.contact_person;
                                                    $scope.jobitem.order_id = $routeParams.id;
                                                    //$scope.jobitem.due_date = $scope.due_date;
                                                    $scope.jobitem.due_date = '';
                                                    if ($scope.job_no == undefined) {
                                                        $scope.job_no = 1;
                                                    }
                                                    if ($scope.iData) {
                                                        $scope.po_number = $scope.iData.abbrivation + pad($scope.iData.order_number, 4) + '_' + $scope.job_code + pad($scope.job_no, 3);
                                                        $scope.jobitem.tmp_po_number = $scope.po_number;
                                                    }

                                                    /* Job Status To New When Creating New Job*/
                                                    $scope.jobitem.item_status = 'In preparation';
                                                    //$scope.jobitem.po_number = '';
                                                    // to insert lang pair in job
                                                    var newLag = $scope.lang_st.filter((st) => st.item_number == $scope.jobitem.item_id);
                                                    if (newLag.length > 0) {
                                                        var newlangIns = newLag[0].newSourceLang + ' > ' + newLag[0].newTargetLang;
                                                        $scope.jobitem.ItemLanguage = newlangIns;
                                                    }
                                                    $scope.jobitem.po_number = $scope.jobitem.tmp_po_number;
                                                    //$scope.jobitem.chainId = chainId;
                                                    $scope.jobitem.job_chain_id = $scope.jobi.jobSummery;
                                                    //return;
                                                    rest.path = 'jobSummarySave';
                                                    rest.post($scope.jobitem).success(function (data) {
                                                        var obj = [];
                                                        if ($cookieStore.get('jobRecentAdd') != undefined) {
                                                            angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                                                obj.push(val);
                                                            });
                                                        }
                                                        obj.push(data['order_id']);
                                                        $cookieStore.put('jobRecentAdd', obj);
                                                        $route.reload();
                                                    })
                                                })
                                            }
                                        })
                                    });
                            }
                        });
                    } else {
                        notification('Please select item', 'warning');
                    }
                }
            }
        }
    }

    $scope.sortableOptions = {
        axis: "y",
        activate: function () { },
        beforeStop: function () { },
        change: function () { },
        create: function (event, ui) {
            //
        },
        deactivate: function () { },
        out: function () { },
        over: function () { },
        receive: function () { },
        remove: function () { },
        sort: function () { },
        start: function (event, ui) { },
        update: function (e, ui) {
            // /
        },
        stop: function (e, ui) {
            $scope.saveJobSorting();
        }
    };

    $scope.saveJobSorting = function () {
        rest.path = "saveSortedJobsData";
        rest.post($scope.itemListFinal).success(function (data) {
            
            //
            if (data.status == 200) {
                notification(data.msg, 'success');
            }
        }).error(errorCallback);
    }

    $scope.itemoverview = function () {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/item-overview.html',
            controller: 'itemoverviewController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
    };

    rest.path = 'Jobsummeryget';
    rest.get().success(function (data) {
        $scope.joboption = data;
    }).error(errorCallback)

    //Pass OrderId to get Client ID To Display jobchain assign to client
    rest.path = 'masterJobchainget/' + $window.localStorage.orderID;
    rest.get().success(function (data) {
        $scope.jobchainoption = data;
    }).error(errorCallback)

    // Comapre - cheapest linguist
    $scope.findLinguist = function (order_id,item_number,stLanguage) {
        const obj = {
            'order_id' : order_id,
            'item_number' : item_number,
            'stLanguage' : stLanguage,
        }
        if(order_id != '' && item_number !=''){
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'tpl/findLinguistPopup.html',
                controller: 'findLinguistController',
                size: '',
                resolve: {
                    items: function () {
                        return obj;
                    }
                }
            });
        }    
    }  

}).controller('commentController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $cookieStore, $timeout, $compile) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    var loginid = $window.localStorage.getItem("session_iUserId");
    var userprofilepic = $window.localStorage.getItem("session_vProfilePic");

    $scope.login_userid = $window.localStorage.getItem("session_iUserId");

    rest.path = 'viewProjectCustomerDetail';
    rest.model().success(function (data) {
        $scope.customer = data;
        $window.localStorage.clientproCustomerName = $scope.customer.client;
        $window.localStorage.ContactPerson = $scope.customer.contact;
        $routeParams.ClientIdd = data['client'];
        $window.localStorage.ClientName = $routeParams.ClientIdd;
        if ($scope.customer.memo) {
            $scope.warn = true;
            $timeout(function () {
                $scope.warn = false;
            }, 10000);
        }
    }).error(errorCallback);

    //$routeParams.id;
    $scope.jobLinguist = [];
    var linguistObj = [];
    if ($routeParams.id) {
        rest.path = 'jobsummeryGet/' + $routeParams.id;
        rest.get().success(function (data) {
            //$scope.jobLinguist = data;
            angular.forEach(data, function (val, i) {
                if (val.resource) {
                    $scope.jobLinguist.push(val);
                }
            });
            $scope.jobLinguist = UniqueArraybyId($scope.jobLinguist, 'resource');

        });
    }
    var projectTeam = [];
    rest.path = 'contactPerson';
    rest.model().success(function (data) {
        
        angular.forEach(data, function (val, i) {
            if (val.vResourcePosition == 3) {
                angular.element('#coordinatorIcon').html(val.vUserName);
                var coordpic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                angular.element('.coordinatorIcon').html(coordpic);

            } else if (val.vResourcePosition == 2) {
                angular.element('#managerDesignation').html(val.vUserName);
                var managerpic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                angular.element('.managerIcon').html(managerpic);
            } else if (val.vResourcePosition == 4) {
                angular.element('#QASpecialist').html(val.vUserName);
                var QApic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                angular.element('.QAIcon').html(QApic);
            }
        })
    }).error(errorCallback);

    $routeParams.id = $routeParams.id;
    rest.path = 'generalVieData/' + $routeParams.id + '/' + $window.localStorage.ClientName;
    rest.get().success(function (data) {
        $scope.general = data;
        //$scope.general.order_date = $scope.general.order_date;
        //$scope.general.order_date = moment($scope.general.order_date).format($window.localStorage.getItem('global_dateFormat'));
        //$scope.general.due_date = $scope.general.due_date.split(' ')[0].split('.').reverse().join('-');
        if ($scope.general.due_date)
            $scope.general.due_date = moment($scope.general.due_date).format("DD-MM-YYYY | HH:mm");
        if ($scope.general.heads_up) {
            if ($scope.general.expected_start_date && $scope.general.expected_start_date != '0000-00-00 00:00:00' && $scope.general.expected_start_date != "Invalid Date") {
                $scope.general.expected_start_date = $scope.general.expected_start_date.split(' ')[0].split('.').reverse().join('-');
                $scope.general.expected_start_date = moment($scope.general.expected_start_date).format("DD-MM-YYYY");
            } else {
                $scope.general.expected_start_date = '-';
            }
        } else {
            if ($scope.general.order_date) {
                $scope.general.expected_start_date = $scope.general.order_date.split(' ')[0].split('.').reverse().join('-');
                $scope.general.expected_start_date = moment($scope.general.order_date).format("DD-MM-YYYY");
            } else {
                $scope.general.expected_start_date = '-';
            }
        }

        // if ($scope.general.order_date == undefined) {
        //     var currentdate = new Date();
        //     $scope.general.order_date = getDatetime(currentdate);
        // }
        $scope.generaldata = {};
        //$scope.generaldata.order_no = $window.localStorage.orderNo;
        //$scope.generaldata.abbrivation = $window.localStorage.abbrivation;

        if ($scope.general == null) {
            $scope.general = {};
            $scope.generaldata = {};
            //$scope.generaldata.order_no = $window.localStorage.orderNo;
            //$scope.generaldata.abbrivation = $window.localStorage.abbrivation;
            // if ($scope.general.order_no == "") {

            // }
        }
    }).error(errorCallback);

    $scope.projectPriceChat = 0;
    if ($routeParams.id) {
        rest.path = 'itemsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            angular.forEach(data, function (val, i) {
                
                if (val.total_price) {
                    $scope.projectPriceChat += val.total_price;
                }
            });
            
        });

        //-- project Team Users --//
        $scope.teamArray = [];
        rest.path = "users";
        rest.get().success(function (data) {
            angular.forEach(data.data, function (val, i) {
                //if(val.iUserId != loginid && val.freelancer == 'freelancer' ){
                if (val.iUserId != loginid) {
                    $scope.teamArray.push(val.iUserId);
                }
            });
        }).error(errorCallback);

    }

    if ($scope.isNewProject === 'true' && $scope.userRight == 1) {
        $location.path('/dashboard1');
        notification('Please create project.', 'warning');
    }
    $window.localStorage.getItem("session_iUserId");
    $window.localStorage.getItem("session_vUserName");
    $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.backtoPage = function () {
        if ($window.localStorage.getItem("session_iFkUserTypeId") == 1) {
            $location.path('jobs-detail/' + $window.localStorage.orderID);
        } else {
            $location.path('dashboard1');
        }
    }


    if ($routeParams.id) {

        var commentsArray = [];
        var NewcommentsArray = [];
        $scope.commentReadArray = [];
        var promises = [];
        var usercommentsArr = [];
        var newUserCommentsArr = [];
        $scope.msgIDArr = [];
        $scope.commentsArrayAll = async function () {
            rest.path = "discussionOrder/" + $routeParams.id;
            rest.get().success(function (data) {
                setTimeout(function () {
                    //var setintrvlMenu = setInterval(function() {
                    angular.forEach(data, function (val, i) {
                        var dataId = val.id;

                        /*if (val.content == "") {
                            var dataId = val.id;
                            var hrefClass = 'attachment';
                            var hrefTarget = '_blank';
                            var data = '<a class=' + hrefClass + ' href=' + val.fileURL + ' target=' + hrefTarget + '><img src=' + val.fileURL + '></img></a>';
                            if(val.user_id == 1){
                                //$('li[data-id=' + dataId + ']').addClass('cmtright');
                                //$(time).addClass('cmtright');
                            }
                            $('li[data-id=' + dataId + ']').find('.content').html(data);
                            $('li[data-id=' + dataId + ']').clone(true).appendTo('#attachment-list');
                        }*/

                        var msgReadArr = val.read_id.split(",");
                        var msgReadArrFilter = msgReadArr.filter(function (el) {
                            if ($scope.teamArray.indexOf(parseInt(el)) != -1) {
                                return el;
                            }
                            return 0;
                        });

                        $('#comment-list').find(' > li[data-id^=c]').hide();
                        //$('#comment-list').find(' > li[data-id^=c]').css('display','none');
                        //$('li[data-id=c' + val.id + ']').addClass('pull-right cmtright');
                        //$('.upload').html('<i class="fa fa-paperclip"></i><input id="discussionFileUpload" type="file" data-role="none" multiple="multiple">');

                        if (userprofilepic) {
                            $('.commenting-field .profile-picture').replaceWith('<img src=" uploads/profilePic/' + userprofilepic + '" class="img-circle round userpic" alt="...">');
                        }
                        var filedata = '';
                        if (val.fileURL != "") {
                            var filetype = val.fileMimeType;
                            var filetype1 = filetype.includes("image/");
                            var file_format = '';
                            var file_type = '';
                            var mimeTypeParts = val.fileMimeType.split('/');
                            if (mimeTypeParts.length == 2) {
                                file_format = mimeTypeParts[1];
                                file_type = mimeTypeParts[0];
                            }
                            // Icon
                            var availableIcons = ['archive', 'audio', 'code', 'excel', 'image', 'movie', 'pdf', 'photo',
                                'picture', 'powerpoint', 'sound', 'video', 'word', 'zip'
                            ];

                            var iconClass = 'fa fa-file-o';
                            // File Extension name
                            var extName = '';
                            var extParts = val.fileURL.split('/');
                            var extFileName = extParts[extParts.length - 1];
                            var extFileName = extFileName.split('?')[0];
                            extName = extFileName.split('.')[1];

                            if (availableIcons.indexOf(file_format) > 0) {
                                iconClass = 'fa fa-file-' + file_format + '-o';
                            } else if (availableIcons.indexOf(file_type) > 0) {
                                iconClass = 'fa fa-file-' + file_type + '-o';
                            } else if (extName == 'docx') {
                                iconClass = 'fa fa-file-word-o';
                            } else if (extName == 'xlsx' || extName == 'xlsm') {
                                iconClass = 'fa fa-file-excel-o';
                            } else if (extName == 'zip') {
                                iconClass = 'fa fa-file-archive-o';
                            }

                            //$window.localStorage.setItem("chatimg_"+val.fileURL, val.fileURL);
                            //var cmtimgName = $window.localStorage.getItem("chatimg_"+val.fileURL);
                            var cmtimgName = val.fileURL + '?v=' + jQuery.now();

                            if (file_type == 'image') {
                                var filehtml = '<img src=' + cmtimgName + '></img>';
                            } else if (file_type == 'video') {
                                var filehtml = '<video src=' + cmtimgName + ' controls="controls"></video>';
                            } else {
                                var filename = val.fileURL;
                                var filehtml = '<i class="' + iconClass + '"></i> ' + filename.replace('uploads/discussionfile/', '');
                            }
                            var hrefClass = 'attachment';
                            var hrefTarget = '_blank';
                            filedata = '<a class=' + hrefClass + ' href=' + val.fileURL + ' target=' + hrefTarget + '>' + filehtml + '</a>';

                        }
                        if (val.user_id == loginid) {
                            //$('li[data-id=' + val.id + ']').addClass('pull-right cmtright');
                            $('li[data-id=' + val.id + ']').find('.usrnamespan').addClass('hideusername');

                            if (val.content == '' || val.content == null) {
                                //$('li[data-id=' + dataId + ']').find('.content').html(filedata);
                                //$('li[data-id=' + dataId + ']').clone(true).appendTo('#attachment-list');
                            } else {
                                //var htmldata = '<a href class="pull-right thumb-sm avatar"><img src=" '+ val.profile_picture_url +'" class="img-circle" alt="..."></a> <div class="m-r-xxl"> <div class="pos-rlt wrapper bg-info r r-2x"> <span class="arrow right pull-up arrow-info"></span> <p class="m-b-none"> '+ val.content +' </p> </div> <small class="text-muted">1 minutes ago</small> </div>';
                                //$('li[data-id=' + val.id + ']').find('.content').html(htmldata);
                            }
                            if (msgReadArrFilter.length > 0) {
                                $('li[data-id=' + dataId + ']').find(' .comment-wrapper').after('<div style="color: #27c24c;position: absolute;right: 40px;font-size: 12px;"><i class="fa fa-check" aria-hidden="true"></i></div>');
                            }
                        } else {
                            //$('li[data-id=' + val.id + ']').addClass('pull-left cmtleft');
                            //$('li[data-id=' + val.id + ']').find('.profile-picture').addClass('pull-left thumb-sm avatar');
                            if (val.content == "" || val.content == null) {
                                //$('li[data-id=' + dataId + ']').find('.content').html(filedata);
                                //$('li[data-id=' + dataId + ']').clone(true).appendTo('#attachment-list');
                            }
                        }
                        // if (file_type == 'image' || file_type == 'video') {
                        //     $('li[data-id=' + dataId + ']').find('.wrapper').addClass('imgblock');
                        // }
                        
                        if (val.content) {
                            $('li[data-id=' + dataId + ']').find('.content').html(val.content);
                        }
                        //$compile(val.content)($scope);
                        // ------------ Script for date seperating in chat box --------------//
                        var ndt = new Date(data[i].created);
                        var mm = ("0" + (ndt.getMonth() + 1)).slice(-2);
                        var dd = ("0" + ndt.getDate()).slice(-2);
                        var yy = ndt.getFullYear();
                        //var timeText = dd + '-' + mm + '-' + yy;
                        //var dateSeprt = dd + '-' + mm + '-' + yy;
                        var dateSeprt = commentDateToformat(data[i].created);

                        // const todayDate = new Date();
                        // if (ndt.getDate() == todayDate.getDate() &&
                        //     ndt.getMonth() == todayDate.getMonth() &&
                        //     ndt.getFullYear() == todayDate.getFullYear()) {
                        //     $('li[data-id=' + dataId + ']').prepend('<div id="dtseperator"></div>');
                        //     var timeText = 'Today';
                        // }
                        var timeText = commentDatetimeToText(data[i].created);
                        if (timeText == "Today") {
                            $('li[data-id=' + dataId + ']').prepend('<div id="dtseperator"></div>');
                        }
                        // ------count total attachment------//
                        let totalAttachment = 0;
                        totalAttachment = $('#attachment-list').find('li .attachment').length;
                        //$('.att_count').text(totalAttachment);


                        if (i > 0) {
                            var ndt1 = new Date(data[i - 1].created);
                            // var mm = ("0" + (ndt.getMonth() + 1)).slice(-2);
                            // var dd = ("0" + ndt.getDate()).slice(-2);
                            // var yy = ndt.getFullYear();
                            //var dateSeprt2 = dd + '-' + mm + '-' + yy;
                            var dateSeprt2 = commentDateToformat(data[i - 1].created);

                            if (dateSeprt != dateSeprt2) {
                                if ($('li[new-id=' + dataId + ']').length === 0)
                                    $('#comment-list').find(' > li[data-id=' + dataId + ']').before('<li class="seperatordate comment" new-id=' + dataId + '> <span>' + timeText + '</span> </li>');
                                //$('#comment-list').find(' > li[data-id=' + dataId + ']').before('<li class="seperatordate comment" new-id=' + dataId + '> <span>' + timeText + '</span> </li>');
                            }
                        } else {
                            if ($('li[new-id=' + dataId + ']').length === 0)
                                $('#comment-list').find(' > li[data-id=' + dataId + ']').before('<li class="seperatordate comment" new-id=' + dataId + '> <span>' + timeText + '</span> </li>');
                            //$('#comment-list').find(' > li[data-id=' + dataId + ']').before('<li class="seperatordate comment" new-id=' + dataId + '> <span>' + timeText + ' </span></li>');
                        }


                        var msgRead_id = val.read_id;

                        if (msgRead_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)"))) {
                            
                        } else {
                            var cmtObj = {
                                id: val.id,
                                read_id: loginid
                            }
                            $scope.commentReadArray.push(cmtObj);
                        }
                        // Read/ Unread - check comment id exist in db
                        promises.push(val);

                        if (val.user_id != loginid) {
                            usercommentsArr.push(val.user_Id)
                        }
                        if (val.id) {
                            $scope.msgIDArr.push(val.id)
                        }


                    });

                    $(".comment-wrapper").each(function (i, v) {
                        /*var dateTime = $(this).find('time')[0].innerText;
                        
                        //dateTime = moment(dateTime).format($window.localStorage.getItem('global_dateFormat'));
                        dateTime = moment(dateTime).format('DD-MM-YYYY');
                        $(this).find('time')[0].innerText = dateTime;*/

                        //$(this).find('time')[0].append("testing");
                    });

                    if (data.length == promises.length) {
                        //jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                    }

                }, 1500);
                commentsArray = data;
                
                //var usercommentsArr = commentsArray.filter(function(commentsArray) { return commentsArray.user_id != loginid });
                
            }).error(errorCallback);


        }

        $scope.commentsArrayAll();

    }


    if ($routeParams.id) {
        $scope.usersArray = [];
        rest.path = "users";
        //$timeout(function () {
        rest.get().success(function (data) {
            angular.forEach(data.data, function (val, i) {
                var uObj = {
                    id: val.iUserId,
                    fullname: val.vUserName,
                    email: val.vEmailAddress,
                    profile_picture_url: "uploads/profilePic/user-icon.png"
                }
                $scope.usersArray.push(uObj);
            });

        }).error(errorCallback);
        
        //}, 100);
        // emoji text
        $scope.emojitext = [];
        /*rest.path = "emojitext";
        $timeout(function() {
            rest.get().success(function(data) {
                
                    angular.forEach(data, function(val, i) {
                        var eObj = {
                            id              : val.id,
                            emojiname        : val.emojiname,
                            emojipic          : val.emojipic,
                        }
                        $scope.emojitext.push(eObj);
                    });
                
            }).error(errorCallback);
        }, 200);*/
    }

    //emoji text change
    //$timeout(function() {
    //$scope.emojimap=[];
    // we are using this for emoji
    var emojimap = {
        "<3": "\u2764\uFE0F",
        "</3": "\uD83D\uDC94",
        ":D": "\uD83D\uDE00",
        //":)": "\uD83D\uDE03",
        ":)": "🙂",
        ";)": "\uD83D\uDE09",
        ":(": "\uD83D\uDE12",
        ":p": "\uD83D\uDE1B",
        ";p": "\uD83D\uDE1C",
        ":'(": "\uD83D\uDE22",
        ":o)": "\uD83D\uDE2E",
        ":*": "\uD83D\uDC8B",
        ":>": "\uD83D\uDE06",
        ":blush": "\uD83D\uDE0A",
        ">:(": "\uD83D\uDE20",
        ":-)": "\uD83D\uDE42",
        ":'(": "\uD83D\uDE22",
        "):": "\uD83D\uDE1E",
        ":-\\\\": "\uD83D\uDE15",
        "<\\/3": "\uD83D\uDC94",
        "8)": "\uD83D\uDE0E",
        ":|": "\uD83D\uDE10",
        ":o": "\uD83D\uDE2E"
    };

    $timeout(function () {
        if ($routeParams.id) {
            //$timeout(function() {
            rest.path = "discussionCommentread";
            rest.put($scope.commentReadArray).success(function (res) {
                if (res.status == 1) {
                    jQuery('.cmtclr' + $routeParams.id).css({ "color": "green" });
                }
            });
            //},2300);
        }

        //  Scroll to bottom  
        //jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
        //jQuery('#attachment-list').scrollTop(jQuery('#attachment-list')[0].scrollHeight);

        //$('.textarea-wrapper').before('<input type="text" id="addemoji" data-emoji-placeholder=":smiley:" />');

        jQuery("#addemoji").emojioneArea({
            autoHideFilters: true,
            useSprite: true,
            //accepts values: 'image',
            //default: 'unicode',
            //accepts values: 'unicode' | 'shortname' | 'image'
            //pickerPosition: "bottom"
        });

    }, 2800);

    $timeout(function () {

        var el = $("#addemoji").emojioneArea();
        el[0].emojioneArea.on("emojibtn.click", function () {
            const emoji1 = $('.emojibtn').find('.emojioneemoji').attr('src');
            //const emoji = $('.emojionearea-editor').find('img[src="' + emoji1 + '"]').attr('alt');
            const emoji = '<img class="emojiImg" src="' + emoji1 + '">';
            $('.textarea').append(emoji).trigger("change");

            //$('.textarea').val($('.textarea').val()+emoji);
        });

        //jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
        //jQuery('#attachment-list').scrollTop(jQuery('#attachment-list')[0].scrollHeight);

    }, 3000);

    var CommentedElement = $('#comments-container').comments({ //profilePictureURL: 'https://viima-app.s3.amazonaws.com/media/user_profiles/user-icon.png',
        roundProfilePictures: true,
        textareaRows: 1,
        enableAttachments: true,
        enablePinging: true,
        currentUserId: loginid,
        enableHashtags: true,
        textareaPlaceholderText: 'Type message here...',
        getComments: function (success, error) {

            $timeout(function () {
                if ($routeParams.id) {
                    var interval = setInterval(() => {
                        rest.path = "discussionOrder/" + $routeParams.id;
                        rest.get().success(function (data) {
                            var NewcommentsArray = data;
                            var newUserCommentsArr = NewcommentsArray.filter(function (NewcommentsArray) { return NewcommentsArray.user_id != loginid });
                            var cmtArr = [];
                            var cmtArr = NewcommentsArray.filter(function (NewcommentsArray) { var isReadtrue = NewcommentsArray.read_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)")); return (!isReadtrue) });

                            var newcmtArr = commentsArray.filter(function (commentsArray) { var isReadtrue = commentsArray.read_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)")); return (!isReadtrue) });

                            // --- update read id //
                            $scope.newCommentReadArray = [];
                            if (cmtArr) {
                                angular.forEach(cmtArr, function (cmtval, cmti) {
                                    var newCmtObj = {
                                        id: cmtval.id,
                                        read_id: loginid
                                    }
                                    $scope.newCommentReadArray.push(newCmtObj);
                                    if ($scope.newCommentReadArray.length == cmtArr.length) {
                                        
                                        rest.path = "discussionCommentread";
                                        rest.put($scope.newCommentReadArray).success(function (res) {
                                            
                                            if (res.status == 1) {
                                                //jQuery('.cmtclr' + $routeParams.id).css({ "color": "green" });
                                            }
                                        });
                                    }
                                });
                            }
                            //if( (NewcommentsArray.length > commentsArray.length && ) )
                            
                            var arrayNotload = $('#comment-list').find(' > li').length;
                            if (newUserCommentsArr.length > usercommentsArr.length || cmtArr.length > 0 || (!arrayNotload)) {
                                $('#comment-list').find(' > li[data-id^=c]').hide();
                                rest.path = "discussionCommentread";
                                rest.put($scope.commentReadArray).success(function (res) {
                                    if (res.status == 1) {
                                        jQuery('.cmtclr' + $routeParams.id).css({ "color": "green" });
                                    }
                                });
                                $scope.commentsArrayAll();
                                success(NewcommentsArray);
                                $('ul.navigation').find('li[data-sort-key="oldest"]').trigger('click');
                                if ($('.cmtleft').length > 0 || $('.cmtright').length > 0)
                                    jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                                $('#comment-list').find(' > li[data-id^=c]').hide();
                                // to remove same li date div
                                // var seen = {};
                                // $('.seperatordate').each(function() {
                                //     var txt = $(this).text();
                                //     if (seen[txt])
                                //         $(this).remove();
                                //     else
                                //         seen[txt] = true;
                                // });
                                // end script
                                usercommentsArr = [];
                            }
                        });
                        
                        //interval
                        var urlExist = window.location.href;
                        if (!(urlExist.includes('#/discussion/'))) {
                            clearInterval(interval);
                        }

                    }, 5000);
                }
                success(commentsArray);

                $('ul.navigation').find('li[data-sort-key="oldest"]').trigger('click');
                //jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                //jQuery('#attachment-list').scrollTop(jQuery('#attachment-list')[0].scrollHeight);
                $('.userprof').on('dragstart', function (event) { event.preventDefault(); });
                $('#comment-list').on('dragstart', function (event) { event.preventDefault(); });

            }, 1500);
        },
        getTeamusers: function (success, error) {
            setTimeout(function () {
                success($scope.usersArray);
            }, 200);
        },
        searchUsers: function (term, success, error) {
            setTimeout(function () {
                success($scope.usersArray.filter(function (user) {

                    var containsSearchTerm = user.fullname.toLowerCase().indexOf(term.toLowerCase()) != -1;
                    var isNotSelf = user.id != loginid;
                    return containsSearchTerm && isNotSelf;
                }));
            }, 1000);
        },

        searchEmojitext: function (term, success, error) {
            setTimeout(function () {
                success($scope.emojitext.filter(function (emojitxt) {
                    var containsSearchTerm = emojitxt.emojiname.toLowerCase().indexOf(term.toLowerCase()) != -1;
                    return containsSearchTerm;
                }));
            }, 500);
        },
        postComment: function (data, success, error) {
            // data.order_id = $routeParams.id;
            // data.user_id = $window.localStorage.getItem("session_iUserId");
            // data.fullname = $window.localStorage.getItem("session_vUserName");
            // data.profile_picture_url = 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic");
            // data.pings = '';
            // data.read_id = $window.localStorage.getItem("session_iUserId") + ',';
            // rest.path = "discussionOrder";
            // rest.post(data).success(function (info) {

            // }).error(errorCallback);
            // $timeout(function () {
            //     success(data);
            // }, 500);
            data.job_id = 0;
            data.order_id = $routeParams.id;
            data.user_id = $window.localStorage.getItem("session_iUserId");
            data.fullname = $window.localStorage.getItem("session_vUserName");
            data.profile_picture_url = 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic");
            data.read_id = $window.localStorage.getItem("session_iUserId") + ',';

            function escapeSpecialChars(regex) {
                return regex.replace(/([()[{*+.$^\\|?])/g, '\\$1');
            }
            for (var i in emojimap) {
                var regex = new RegExp(escapeSpecialChars(i), 'gim');
                data.content = data.content.replace(regex, emojimap[i]);
            }

            var pingsvalue = [];
            if (data.content) {
                $(Object.keys(data.pings)).each(function (index, userId) {
                    var fullname = data.pings[userId];
                    var pingText = '@' + fullname;
                    data.content = data.content.replace(new RegExp('@' + userId, 'g'), pingText);

                    pingsvalue[index] = Object.keys(data.pings)[index];
                });
            }
            
            data.pings = pingsvalue.toString();
            rest.path = "discussionOrder";
            rest.post(data).success(function (info) {

            }).error(errorCallback);
            $timeout(function () {
                success(data);
            }, 500);
        },
        putComment: function (data, success, error) {
            $routeParams.id = data.id;
            data.login_userid = $window.localStorage.getItem("session_iUserId");
            rest.path = 'discussionOrder';
            rest.put(data).success(function (res) {
                if (res.Status == 401) {
                    notification("You can not edit other user message", "error");
                    $timeout(function () {
                        location.reload();
                    }, 1000);
                } else if (res.Status == 200) {
                    notification("Successfully edited", "success");
                } else {
                    notification("Please try later", "warning");
                }
            }).error(errorCallback);
            $timeout(function () {
                success(data);
            }, 500);
        },
        deleteComment: function (data, success, error) {
            data.login_userid = $window.localStorage.getItem("session_iUserId");
            rest.path = 'discussionOrder/' + data.id + '/' + data.login_userid;
            rest.delete(data).success(function (data) {
                if (data.Status == 401) {
                    notification("You can not edit other user message", "error");
                    $timeout(function () {
                        location.reload();
                    }, 1000);
                } else if (data.Status == 200) {
                    notification("Successfully edited", "success");
                } else {
                    notification("Please try later", "warning");
                }
            }).error(errorCallback);
            $timeout(function () {
                success();
            }, 500);
        },
        upvoteComment: function (data, success, error) {
            $routeParams.id = data.id;
            rest.path = 'discussionOrder';
            rest.put(data).success(function (data) {

            }).error(errorCallback);
            $timeout(function () {
                success(data);
            }, 500);
        },
        uploadAttachments: function (dataArray, success, error, data) {
            /*"fileURL":dataArray[0].file_url,*/
            $(dataArray).each(function (index, dataArrays) {
                var obj = {
                    "order_id": $routeParams.id,
                    "user_id": $window.localStorage.getItem("session_iUserId"),
                    "fullname": $window.localStorage.getItem("session_vUserName"),
                    "profile_picture_url": 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic"),
                    "fileURL": "uploads/discussionfile/" + dataArray[index].file.name2,
                    "fileMimeType": dataArray[index].file.type,
                    "created": dataArray[index].created,
                    "modified": dataArray[index].modified,
                    "created_by_current_user": '1',
                    "upvote_count": '0',
                    "job_id": 0,
                    "user_has_upvoted": '0',
                    "read_id": $window.localStorage.getItem("session_iUserId") + ',',

                }
                rest.path = "discussionOrder";
                rest.post(obj).success(function (info) {

                }).error(errorCallback);
                dataArray[0].fullname = $window.localStorage.getItem("session_vUserName");
                dataArray[0].profile_picture_url = 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic");
            });
            $timeout(function () {
                success(dataArray);
            }, 500);
        }
    });
}).controller('userstatusController', function ($scope, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    rest.path = 'statustype/1';
    rest.get().success(function (data) {
        $scope.userStatus = data;
        $scope.userstatusEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'userstatus';
        rest.model().success(function (data) {
            $scope.status = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.status.status_id) {
                $routeParams.id = $scope.status.status_id;
                rest.path = 'userstatus';
                rest.put($scope.status).success(function () {
                    $route.reload();
                }).error(errorCallback);
            } else {
                $scope.status.status_type = 1;
                rest.path = 'userstatus';
                rest.post($scope.status).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'userstatus/' + id;
                rest.delete().success(function () {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('resourcePositionController', function ($scope, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    rest.path = 'GetuserPosition';
    rest.get().success(function (data) {
        $scope.userPosition = data;
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'GetuserPosition';
        rest.model().success(function (data) {
            $scope.position = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.position.position_id) {
                $routeParams.id = $scope.position.position_id;
                rest.path = 'userPosition';
                rest.put($scope.position).success(function () {
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'userPosition';
                rest.post($scope.position).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'userPosition/' + id;
                rest.delete().success(function () {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('clientstatusController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    rest.path = 'statustype/2';
    rest.get().success(function (data) {
        $scope.userStatus = data;
        $scope.clientstatusEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'userstatus';
        rest.model().success(function (data) {
            // debugger;
            $scope.status = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.status.status_id) {
                $routeParams.id = $scope.status.status_id;
                rest.path = 'userstatus';
                rest.put($scope.status).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                $scope.status.status_type = 2;
                rest.path = 'userstatus';
                rest.post($scope.status).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'userstatus/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('customerGroupController', function ($window, $log, $scope, $location, $route, rest, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.save = function (formId) {
        if (angular.element('#' + formId).valid()) {
            if ($scope.group.group_id) {
                $routeParams.id = $scope.group.group_id;
                rest.path = 'customerGroupUpdate';
                rest.put($scope.group).success(function () {
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'customerGroupsave';
                rest.post($scope.group).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    rest.path = 'customerGroupGet';
    rest.get().success(function (data) {
        $scope.customergrouplist = data;
        $scope.customertypeEmpty = jQuery.isEmptyObject(data);
    })

    $scope.customerGroupEdit = function (id, eID) {
        rest.path = 'customerGroupGetOne/' + id;
        rest.get().success(function (data) {
            $scope.group = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteCustomerGroup = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'customerGroupDelete/' + id;
                rest.delete().success(function () {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    }

}).controller('currencyController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    rest.path = 'currency';
    rest.get().success(function (data) {
        $scope.currencyData = data;
        $scope.def = data[0].country_name;
        var currency = [];
        angular.forEach(data, function (val, i) {
            if (val.currency_front == 1) {
                currency.push(val.currency_front);
            }
        })
        $scope.currencyEmpty = jQuery.isEmptyObject(data);
        $scope.checkFront = parseInt(currency);
    }).error(errorCallback);

    $scope.currencyListChange = function (code, id, nameC, date) {
        if ($scope.currn == "" || $scope.currn == undefined || $scope.currn == null) {
            $scope.currn = {};
        }
        var cod = code.split(',');
        $scope.country_name = cod[0];
        $scope.currency_code = code;
        $scope.date = date;
        $scope.curDef = code.split(',')[0];
        $scope.currn.curDef = $scope.curDef;
        $scope.currn.country_name = $scope.country_name;
        $scope.currn.currency_code = $scope.currency_code;
        $scope.currn.date = $scope.date;
        $routeParams.id = id;
        rest.path = 'currencyUpdate';
        rest.put($scope.currn).success(function () {
            notification('Default currency successfully changed', 'success');
            $route.reload();
        }).error(errorCallback);
    }

    $scope.currencyChange = function (id) {
        var currenctCode = id.split(',');
        $scope.country_name = currenctCode[0];
        $scope.currency.country_name = $scope.country_name;
    }

    $scope.getType = function (id, curId, eID) {
        $routeParams.id = id;
        rest.path = 'currency';
        rest.model().success(function (data) {
            $scope.currency = data;
            angular.element('#currencyCoded').select2('val', data.currency_code);
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            var currencyData = $('#currencyCoded').select2('data');
            $scope.currency.currency_name = currencyData.name;
            if ($scope.currency.currency_id) {
                $scope.curDef = angular.element('#country_name0').text();
                $scope.date = angular.element('#Currencydate').val();
                $scope.currency.date = $scope.date;
                $scope.currency.curDef = $scope.curDef;
                $routeParams.id = $scope.currency.currency_id;
                rest.path = 'currency';
                rest.put($scope.currency).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                if (!$('#currencyCoded').val()) {
                    return false;
                }
                $scope.curDef = angular.element('#country_name0').text();
                $scope.date = angular.element('#Currencydate').val();
                $scope.currency.date = $scope.date;
                $scope.currency.curDef = $scope.curDef;

                rest.path = 'currency';
                rest.post($scope.currency).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'currency/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    $scope.getCurr = function (id, code) {
        $scope.currencyDef = id;
        angular.element('#currencyListCode' + id).select2('val', code);
    }

    $scope.hoverIn = function () {
        this.hoverEdit = true;
    };

    $scope.hoverOut = function () {
        this.hoverEdit = false;
    };

}).controller('bankingDetailsController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    rest.path = 'bankDetails';
    rest.get().success(function (data) {
        $scope.bankingInfoData = data;
        //$scope.def = data[0].country_name;
        var bankingInfo = [];
        angular.forEach(data, function (val, i) {
            if (val.bankingInfo_front == 1) {
                bankingInfo.push(val.bankingInfo_front);
            }
        })
        $scope.bankingInfoEmpty = jQuery.isEmptyObject(data);
        $scope.checkFront = parseInt(bankingInfo);
    }).error(errorCallback);

    $scope.activeHide = false;
    $scope.getType = function (id, curId, eID) {
        $scope.activeHide = true;

        $routeParams.id = id;
        rest.path = 'bankDetails';
        rest.model().success(function (data) {
            $scope.bankingInfo = data;
            angular.element('#currencyCoded').select2('val', data.currency_code);
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            var bankingInfoData = $('#currencyCoded').select2('data');
            $scope.bankingInfo.payment_method = 'Bank Transfer';
            //$scope.currency.currency_name = currencyData.name;
            if ($scope.bankingInfo.bank_id) {
                $routeParams.id = $scope.bankingInfo.bank_id;
                rest.path = 'bankDetails';
                rest.put($scope.bankingInfo).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                if (!$('#currencyCoded').val()) {
                    return false;
                }
                rest.path = 'bankDetails';
                rest.post($scope.bankingInfo).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'bankDetails/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    $scope.hoverIn = function () {
        this.hoverEdit = true;
    };

    $scope.hoverOut = function () {
        this.hoverEdit = false;
    };

}).controller('holidayController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $timeout, $cookieStore) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    //country holiday get
    if ($cookieStore.get('session_holidayCountry')) {
        $scope.countryListHoliday = JSON.parse($cookieStore.get('session_holidayCountry'));
    } else {
        $scope.countryListHoliday = [];
    }

    $scope.countryHolidayGet = function (country, from) { //from > while onload or changed country dropdown. 

        if (!$cookieStore.get('session_holidayCountry')) {
            $scope.countryListHoliday = UniqueArraybyId($scope.countryListHoliday, 'Cname');
        }

        if ($scope.countryListHoliday.length == 3 && from == 'onChange') {
            notification('Maximum three country allow.', 'warning');
        } else {
            if (typeof country !== 'object') {
                $scope.countryListHoliday.push({ 'Cname': country });
            }
            $scope.countryListHoliday = UniqueArraybyId($scope.countryListHoliday, 'Cname');
        }
        //National Holiay List current date to higher date get
        var currentYear = new Date().getFullYear();

        var upcomming = [];
        var ongoing = [];

        angular.forEach($scope.countryListHoliday, function (val, i) {
            rest.path = "holidayGet/" + val.Cname;
            rest.get().success(function (data) {
                angular.forEach(data, function (val, i) {
                    var currentDate = new Date;
                    var holiday = new Date(val[0] + ' ' + currentYear);

                    if (currentDate <= holiday) {
                        var dayMon = val[0].split(' ');
                        var fullDate = dayMon[1] + ' ' + dayMon[0] + ' ' + currentYear;
                        upcomming.push({
                            'date': fullDate,
                            'holidayName': val[2],
                            'holidayStatus': val[3]
                        });
                    } else {
                        var dayMon = val[0].split(' ');
                        var fullDate = dayMon[1] + ' ' + dayMon[0] + ' ' + currentYear;
                        ongoing.push({
                            'date': fullDate,
                            'holidayName': val[2],
                            'holidayStatus': val[3]
                        });
                    }
                });

                $scope.upcommingList = upcomming;
                $scope.ongoingList = ongoing.reverse();
                $scope.upLength = $scope.upcommingList.length;
                $scope.onLength = $scope.ongoingList.length;
            }).error(errorCallback);
        })
        //return false;

    }

    if (!$cookieStore.get('session_holidayCountry')) {
        $scope.country = "Bulgaria";
        $scope.countryListHoliday.push({ 'Cname': $scope.country });
        $scope.countryHolidayGet("Bulgaria", 'onLoad');
    } else {
        $scope.countryHolidayGet($scope.countryListHoliday, 'onLoad');
    }

    $scope.saveHolidayList = function () {
        //return false;
        if ($window.localStorage.getItem("session_iUserId")) {
            $routeParams.id = $window.localStorage.getItem("session_iUserId");
            $scope.user = {};

            if ($scope.countryListHoliday.length == 0) {
                $scope.user.vholiday_country = '';
            } else {
                $scope.user.vholiday_country = JSON.stringify($scope.countryListHoliday); //country;
            }

            rest.path = "saveuserprofile";
            rest.put($scope.user).success(function (data) {
                notification('Updated successfully.', 'success');
            });
            if ($scope.countryListHoliday.length == 0) {
                $cookieStore.remove("session_holidayCountry");
                //$cookieStore.put('session_holidayCountry','%22%22');
            } else {
                $cookieStore.put('session_holidayCountry', JSON.stringify($scope.countryListHoliday));
            }
        }
    }
    //holiday Status wise show
    $scope.holidayStatus = function (status) {
        if (status == "Upcoming") {
            $timeout(function () {
                angular.element('.holidayTab2').removeClass('holidayTabActive');
                angular.element('.holidayTab1').addClass('holidayTabActive');
            }, 100);
            $scope.holidayShow = false;
        } else {
            angular.element('.holidayTab2').addClass('holidayTabActive');
            angular.element('.holidayTab1').removeClass('holidayTabActive');
            $scope.holidayShow = true;
        }
    }

    $scope.holidayStatus("Upcoming");

    $scope.removeCountry = (eleIndex) => {
        var obj = [];
        angular.forEach($scope.countryListHoliday, function (val, i) {
            if (val.Cname == eleIndex) {

            } else {
                obj.push({ 'Cname': val.Cname });
            }
        })
        $scope.countryListHoliday = obj;
        
    }

}).controller('PropertyController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.value_form = false;
    $scope.edit_value = false;
    $scope.value_name = [];
    $scope.description = [];
    $scope.value_id = [];
    $scope.new_value = [];
    $scope.new_description = [];

    rest.path = 'property';
    rest.get().success(function (data) {
        $scope.propertiesList = data;
        $scope.propertyEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'property';
        rest.model().success(function (data) {
            $scope.propertyData = data;
            if (data.language.length != undefined) {
                angular.element("#language").select2('val', data.language.split(','));
            } else {
                angular.element("#language").select2('val', data.language);
            }
            $scope.edit_value = true;
            rest.path = 'propertyvalues';
            rest.model().success(function (data) {
                $scope.values = data;
            }).error(errorCallback);
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.propertyData.property_id) {
                $routeParams.id = $scope.propertyData.property_id;
                rest.path = 'property';
                rest.put($scope.propertyData).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'property';
                rest.post($scope.propertyData).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $scope.pro_id = data.id;
                    $scope.value_form = true;
                }).error(errorCallback);
            }
        }
    };

    $scope.saveValue = function (formId) {
        if (angular.element("#" + formId).valid()) {
            for (var i = 0; i < $scope.value_name.length; i++) {

                $scope.valueData = {};
                $scope.valueData = {
                    value_name: $scope.value_name[i],
                    description: $scope.description[i],
                    property_id: $scope.pro_id
                };
                rest.path = 'values';
                rest.post($scope.valueData).success(function (data) { }).error(errorCallback);
            }
            $route.reload();
        }
    };

    $scope.UpdateValue = function () {
        for (var i = 0; i < $scope.value_name.length; i++) {
            $scope.valueData = {};
            $scope.valueData = {
                value_name: $scope.value_name[i],
                description: $scope.description[i]
            };
            $routeParams.id = $scope.value_id[i];
            rest.path = 'values';
            rest.put($scope.valueData).success(function (data) { }).error(errorCallback);
        }

        for (var i = 0; i < $scope.new_value.length; i++) {
            $scope.newValues = {};
            $scope.newValues = {
                value_name: $scope.new_value[i],
                description: $scope.new_description[i],
                property_id: $scope.propertyData.property_id
            };
            $routeParams.id = $scope.value_id[i];
            rest.path = 'values';
            rest.post($scope.newValues).success(function (data) {

            }).error(errorCallback);
        }
        $route.reload();
    }

    $scope.rowDelete = function (idx, id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                jQuery('#' + idx).remove();
                rest.path = 'values/' + id;
                rest.delete().success(function (data) { }).error(errorCallback);
            }
        });
    };

    $scope.deleteValue = function (idx) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                jQuery('#item_' + idx).remove();
                $scope.value_name.splice(idx, 1);
                $scope.description.splice(idx, 1);
            }
        });
    };

    $scope.deleteValue2 = function (idx, id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                jQuery('#' + id).remove();
                $scope.new_value.splice(idx, 1);
                $scope.new_description.splice(idx, 1);
            }
        });
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'property/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('langController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    rest.path = 'language';
    rest.get().success(function (data) {
        $scope.languageList = data;
        $scope.languageEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'language';
        rest.model().success(function (data) {
            $scope.lang = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.lang.lang_id) {
                $routeParams.id = $scope.lang.lang_id;
                rest.path = 'language';
                rest.put($scope.lang).success(function () {
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'language';
                rest.post($scope.lang).success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'language/' + id;
                rest.delete().success(function () {
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    //New MemoQ language list
    rest.path = 'getMemoQLanguage';
    rest.get().success(function (langData) {
        if (langData) {
            $scope.MemoQLanguage = langData;

            $('#tblDataLoading').css('display', 'none');
        }
    }).error(errorCallback);

}).controller('centerController', function ($scope, $log, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.CurrentDate = new Date();

    //abbrivation Check
    $scope.abbrevationCheck = function (name) {
        if (name) {
            rest.path = "abbrivationMatch/" + name;
            rest.get().success(function (data) {
                if (data) {
                    notification("Duplicate abbrivation not allowed", 'warning');
                }
            }).error(errorCallback);
        }
    }

    $scope.save = function (formId) {
        if (angular.element('#' + formId).valid()) {
            if ($scope.center.center_id) {
                var numberFormate = [];
                angular.element("[id^=numberFormate]").each(function (i, val) {
                    numberFormate.push({
                        id: val.id,
                        value: val.value
                    });
                });
                $scope.center.order_number = JSON.stringify(numberFormate);

                $routeParams.id = $scope.center.center_id;
                rest.path = 'centerupdate';
                rest.put($scope.center).success(function (data) {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                var numberFormate = [];
                angular.element("[id^=numberFormate]").each(function (i, val) {
                    numberFormate.push({
                        id: val.id,
                        value: val.value
                    });
                });
                if ($scope.center.is_active == undefined) {
                    $scope.center.is_active = '0';
                }
                $scope.center.order_number = JSON.stringify(numberFormate);
                rest.path = 'centersave';
                rest.post($scope.center).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    rest.path = 'centerDateget';
    rest.get().success(function (data) {
        $scope.centerList = data;
        $scope.bussinessEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.disableField = false;
    $scope.centerEdit = function (id, eID) {
        rest.path = 'centergetOne/' + id;
        rest.get().success(function (data) {
            $scope.center = data;
            $scope.order_number = JSON.parse(data.order_number)[0].value;
            $scope.disableField = true;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteCenter = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteCenter/' + id;
                rest.delete().success(function (data) {
                    if (data.status == 422) {
                        notification('You can not delete this record.', 'warning');
                    } else {
                        notification('Record deleted successfully.', 'success');
                        $route.reload();
                    }
                }).error(errorCallback);
            }
        });
    }

}).controller('signController', function ($compile, $scope, $log, $location, $timeout, $route, fileReader, rest, $window, $rootScope, $routeParams, $uibModal) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.emails = {};
    rest.path = 'emailSignCheck';
    rest.get().success(function (data) {
        $scope.emailSignActive = data;
    }).error(errorCallback);
    $timeout(function () {
        angular.element('.btn-toolbar .btn-group:nth-child(4) button:nth-child(2)').remove();
        angular.element('.btn-toolbar .btn-group:nth-child(4) button:nth-child(3)').remove();
        angular.element('.btn-toolbar .btn-group:nth-child(4) button:nth-child(4)').remove();
    }, 500);

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                $scope.imgshow = true;
                $scope.imageSrc = result;
            });
    }

    $timeout(function () {
        angular.element('#txtAngular').froalaEditor({
            // Set the image upload URL.
            inlineStyles: {
                'Big Red': 'font-size: 20px; color: red;',
                'Small Blue': 'font-size: 14px; color: blue;',
                'Italic': 'font-style: italic;',
                'Normal': 'font-style: normal;'
            },
            theme: 'gray',
            height: 250,
            zIndex: 2001,
            imageUploadURL: '/api/v1/knowledgeArticleImage',
            imageUploadParams: {
                id: 'my_editor'
            },
            fileUploadURL: '/api/v1/knowledgeArticlefile',
            fileUploadParams: {
                id: 'my_editor'
            }
        }).on('froalaEditor.image.removed', function (e, editor, $img) {
            $.ajax({
                // Request method.
                method: "POST",
                // Request URL.
                url: "/api/v1/knowledgeDeleteArticleImage",
                // Request params.
                data: {
                    src: $img.attr('src')
                }
            })
        });
        angular.element('div.fr-wrapper + div').remove();
        $('.fr-toolbar').find("button:eq(2)").remove();
    }, 200);

    rest.path = 'emailSignget';
    rest.get().success(function (data) {
        $scope.emailsignList = data;
        $scope.emailSignEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.signEdit = function (id, eID) {
        rest.path = 'emailSigngetone/' + id;
        rest.get().success(function (data) {
            $scope.emails = data;
            $scope.imgshow = false;
            $scope.hideImg = true;
            angular.element('.fr-view').html(data.sign_detail);
            angular.element('.fr-placeholder').hide();
            angular.element('#txtAngular').val(data.sign_detail);
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deletesign = function (id, image) {
        var image = image ? image : 0;
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteSign/' + id + '/' + image;
                rest.delete().success(function (data) {
                    if (data.status == 200) {
                        notification('Record deleted successfully.', 'success');
                    } else {
                        notification('You can not delete active record.', 'error');
                    }
                    $route.reload();
                }).error(errorCallback);
            }
        });
    }

    $scope.save = function (formId) {
        $scope.emails.sign_detail = angular.element('#txtAngular').val();
        if ($scope.emails.sign_id) {
            $scope.emails.sign_picture = $scope.imageSrc;
            $routeParams.id = $scope.emails.sign_id;
            rest.path = 'emailSignupdate';
            rest.put($scope.emails).success(function (data) {
                notification('Record updated successfully.', 'success');
                $route.reload();
            }).error(errorCallback);
        } else {
            if ($scope.imageSrc) {
                $scope.emails.sign_picture = $scope.imageSrc;
            }
            rest.path = 'emailSignsave';
            rest.post($scope.emails).success(function (data) {
                notification('Record inserted successfully.', 'success');
                $route.reload();
            }).error(errorCallback);
        }
    }

    var placeHoderElement = '<div class="btn-group" id="mainDiv" style="margin-left: 0px;">' + '<button type="button" style="padding:5.5px;font-size:14px;" class="btn btn-default btn-sm btn-small dropdown-toggle" data-toggle="dropdown" title="" tabindex="-1" data-name="style" data-original-title="Style">Place Holder<span class="caret" style="margin-left: 3px;"></span></button>' + '<ul class="dropdown-menu" data-name="style" id="ulPlaceHolder"> </ul></div>';
    $timeout(function () {
        $('#emailTpl .ta-toolbar').append(placeHoderElement);
    }, 100);



    $scope.addPlaceHolder = function (plsHolderName) {
        /*var txtAngularElement = $('#emailTpl').find('textarea').prev();
        var oldtxt = txtAngularElement.html();
        txtAngularElement.html(oldtxt + plsHolderName);*/
        $('#emailTpl').find('textarea').prev().focus();
        pasteHtmlAtCaret(plsHolderName, 'tst');
    }

    $scope.emailTplCatChange = function () {
        $('#emailTplCat').next().hide();
        var selectedData = angular.element("#emailTplCat").select2('data');
        rest.path = 'getEmailTemplatePlaceHolder/' + selectedData.id;
        rest.get().success(function (data) {
            if (data) {
                $scope.placeHoders = data
                $('#ulPlaceHolder').empty();
                var LiPlaceholder = "";
                angular.forEach($scope.placeHoders, function (val, i) {
                    var placeHoderName = val;
                    LiPlaceholder += '<li><a href="javascript:void(0)" ng-click="addPlaceHolder(\'' + placeHoderName + '\')">' + placeHoderName + '</a></li>'
                });
                var customUl = $('#ulPlaceHolder').append(LiPlaceholder);
                $compile(customUl)($scope);
            } else {
                $('#ulPlaceHolder').empty();
            }
        }).error(errorCallback);
    }

    $scope.saveTemplate = function (formId) {
        if (angular.element("#" + formId).valid()) {
            
            if (!$scope.emailTplData.template_content || $('#emailTpl').find('textarea').prev().html() === '<br>') {
                notification('Please enter template detail.', 'warning');
                return false;
            } else {

                if ($scope.emailTplData.template_id) {
                    // notification('error please try later', 'error');
                    // return false;
                    $routeParams.id = $scope.emailTplData.template_id;
                    rest.path = 'emailTemplateUpdate';
                    rest.put($scope.emailTplData).success(function (data) {
                        if (data.status == 200) {
                            notification('Record updated successfully', 'success');
                        } else {
                            notification('error please try later', 'error');
                        }
                        $route.reload();
                    }).error(errorCallback);

                } else {
                    /*notification('error please try later', 'error');
                    return false;*/
                    if (!$scope.emailTplData.is_active) {
                        $scope.emailTplData.is_active = 0;
                    }
                    $scope.emailTplData.created_by = $window.localStorage.getItem('session_iUserId');
                    $scope.emailTplData.template_content = $('#emailTpl').find('textarea').prev().html();
                    rest.path = 'saveEmailTemplate';
                    rest.post($scope.emailTplData).success(function (data) {
                        if (data.status == 200) {
                            notification('Record inserted successfully', 'success');
                        } else {
                            notification('error please try later', 'error');
                        }
                        $route.reload();
                    }).error(errorCallback);
                }
                
                $timeout(function () {
                    scrollToId('tplForm');
                }, 500);

            }
        }
    }


    rest.path = 'emailTemplateGetAll';
    rest.get().success(function (data) {
        $scope.emailTemplateList = data;
    }).error(errorCallback);

    $scope.tplEdit = function (id, sId) {
        rest.path = 'emailTemplateGetOne/' + id;
        rest.get().success(function (data) {
            $scope.emailTplData = data;
            angular.element("#emailTplCat").select2('val', $scope.emailTplData.template_category);
            $timeout(function () {
                $scope.emailTplCatChange();
            }, 100);
        }).error(errorCallback);

        var eleHeight = elmYPosition(sId)
        $('.md-content').animate({ scrollTop: eleHeight }, 200);
    }

    $scope.tplDel = function (id) {
        
        bootbox.confirm("Are you sure you want to delete this template?", function (result) {
            if (result == true) {
                rest.path = 'deleteEmailTemplate/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('projectTypeController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    rest.path = 'prtype';
    rest.get().success(function (data) {
        $scope.projectType = data;
        $scope.projectTypeEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'prtype';
        rest.model().success(function (data) {
            $scope.pr_type = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.pr_type.pr_type_id) {
                $routeParams.id = $scope.pr_type.pr_type_id;
                rest.path = 'prtype';
                rest.put($scope.pr_type).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'prtype';
                rest.post($scope.pr_type).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'prtype/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('projectStatusController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.pr_status.pr_status_id) {
                $routeParams.id = $scope.pr_status.pr_status_id;
                rest.path = 'prStatus';
                rest.put($scope.pr_status).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($scope.pr_status.is_default == undefined) {
                    $scope.pr_status.is_default = '0';
                }
                if ($scope.pr_status.is_active == undefined) {
                    $scope.pr_status.is_active = '0';
                }
                rest.path = 'prStatus';
                rest.post($scope.pr_status).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    rest.path = 'prstatus';
    rest.get().success(function (data) {
        $scope.projectStatus = data;
        $scope.projectStatusEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'prStatus';
        rest.model().success(function (data) {
            $scope.pr_status = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'prStatus/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };
}).controller('jobStatusController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.jb_status.jb_status_id) {
                $routeParams.id = $scope.jb_status.jb_status_id;
                rest.path = 'jobStatus';
                rest.put($scope.jb_status).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($scope.jb_status.is_default == undefined) {
                    $scope.jb_status.is_default = '0';
                }
                if ($scope.jb_status.is_active == undefined) {
                    $scope.jb_status.is_active = '0';
                }
                rest.path = 'jobStatus';
                rest.post($scope.jb_status).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    rest.path = 'jobStatus';
    rest.get().success(function (data) {
        $scope.projectStatus = data;
        $scope.projectStatusEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        
        $routeParams.id = id;
        rest.path = 'jobStatus';
        rest.model().success(function (data) {
            $scope.jb_status = data;
            
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'jobStatus/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };
}).controller('jobController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.type.job_id) {
                $routeParams.id = $scope.type.job_id;
                rest.path = 'Jobs';
                rest.put($scope.type).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'Jobs';
                rest.post($scope.type).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $scope.job_id = data.id;
                    $scope.jobValue = true;
                    $scope.getAll();
                }).error(errorCallback);
            }
        }
    }

    $scope.getAll = function () {
        rest.path = 'Jobsget';
        rest.get().success(function (data) {
            $scope.jobs = data;
        }).error(errorCallback);
    }
    $scope.getAll();

    $scope.getJob = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'jobsget';
        rest.model().success(function (data) {
            $scope.type = data['data'];
            $scope.workIns = data['info'];
        }).error(errorCallback);
        $scope.jobValue_edit = true;
        scrollToId(eID);
    }

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'jobsDelete/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

    $scope.deleteValue = function (id, wID) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'DeleteJobInstruction/' + wID;
                rest.delete().success(function (data) { }).error(errorCallback);
                angular.element('#item1_' + id).remove();
                angular.element('#item_' + id).remove();
            }
        });
    }

    $scope.saveJobInstruction = function (frmId) {
        if (angular.element('#' + frmId).valid) {
            //update work instruction
            var job_id = $scope.type.job_id;
            if ($scope.type.job_id) {
                for (var i = 0; i < angular.element('[id^=item1_]').length; i++) {
                    var workInstructionId = angular.element('.workI_id' + i).text();
                    if (workInstructionId) {
                        $scope.jobInstruction = {};
                        var w_source = angular.element('#source_' + i).val();
                        var w_target = angular.element('#target_' + i).val();
                        var w_default = angular.element('#bdefault_' + i).is(':checked') ? 1 : 0;
                        var w_display = angular.element('#display_' + i).is(':checked') ? 1 : 0;

                        $scope.w_source = w_source;
                        $scope.w_target = w_target;
                        $scope.w_default = w_default;
                        $scope.w_display = w_display;
                        $scope.jobInstruction.w_source = $scope.w_source;
                        $scope.jobInstruction.w_target = $scope.w_target;
                        $scope.jobInstruction.w_default = $scope.w_default;
                        $scope.jobInstruction.w_display = $scope.w_display;
                        $scope.jobInstruction.job_id = job_id;

                        $routeParams.id = workInstructionId;
                        rest.path = 'updateJobInstruction';
                        rest.put($scope.jobInstruction).success(function (data) {
                            $route.reload();
                        }).error(errorCallback);

                    } else {
                        $scope.jobInstruction = {};
                        var w_source = angular.element('#source_' + i).val();
                        var w_target = angular.element('#target_' + i).val();
                        var w_default = angular.element('#bdefault_' + i).is(':checked') ? 1 : 0;
                        var w_display = angular.element('#display_' + i).is(':checked') ? 1 : 0;
                        $scope.w_source = w_source;
                        $scope.w_target = w_target;
                        $scope.w_default = w_default;
                        $scope.w_display = w_display;
                        $scope.jobInstruction.w_source = $scope.w_source;
                        $scope.jobInstruction.w_target = $scope.w_target;
                        $scope.jobInstruction.w_default = $scope.w_default;
                        $scope.jobInstruction.w_display = $scope.w_display;
                        $scope.jobInstruction.job_id = job_id;
                        rest.path = 'saveJobInstruction';
                        rest.post($scope.jobInstruction).success(function (data) {
                            $route.reload();
                        }).error(errorCallback);
                    }
                }
            } else {
                //save work instruction
                for (var i = 0; i < angular.element('[id^=item_]').length; i++) {
                    $scope.jobInstruction = {};
                    var w_source = angular.element('#source' + i).val();
                    var w_target = angular.element('#target' + i).val();
                    var w_default = angular.element('#bdefault' + i).is(':checked') ? 1 : 0;
                    var w_display = angular.element('#display' + i).is(':checked') ? 1 : 0;

                    $scope.w_source = w_source;
                    $scope.w_target = w_target;
                    $scope.w_default = w_default;
                    $scope.w_display = w_display;
                    $scope.jobInstruction.w_source = $scope.w_source;
                    $scope.jobInstruction.w_target = $scope.w_target;
                    $scope.jobInstruction.w_default = $scope.w_default;
                    $scope.jobInstruction.w_display = $scope.w_display;
                    $scope.jobInstruction.job_id = $scope.job_id;
                    rest.path = 'saveJobInstruction';
                    rest.post($scope.jobInstruction).success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                }
            }
        }
    }
}).controller('newjobchaincontroller', function ($scope, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.name = $window.localStorage.getItem("session_vUserName");
    $window.localStorage.job_chain_id = " ";
    $window.localStorage.chainediteId = " ";

    rest.path = 'jobChainList';
    rest.get().success(function (data) {
        $scope.jobChainList1 = data;
    }).error(function (data, error, status) { });

    $scope.newFile = function () {
        $window.localStorage.chainediteId = " ";
        if ($scope.jobchain == undefined || $scope.jobchain == "" || $scope.jobchain == null) {
            $scope.jobchain = {};
        }
        $scope.creator = $scope.name;
        $scope.jobchain.creator = $scope.creator;
        rest.path = 'jobChainsave';
        rest.post($scope.jobchain).success(function (data) {
            console.log('data-saveee', data)
            if(data && data.status ==200){
                $window.localStorage.chainediteId = data.id
                $location.path("/job-chain");
            }
        }).error(errorCallback);
    }

    $scope.chainEditId = function (id) {
        if (id == undefined) {
            notification('Please select option', 'warning');
        } else {
            $window.localStorage.chainediteId = id;
            $window.localStorage.job_chain_id = id;
            $location.path('/job-chain');
        }
    }
    $scope.chainDeleteId = function (id) {
        if (!id) {
            notification('Please select option', 'warning');
        } else {
            bootbox.confirm("Are you sure you want to delete this row?", function (result) {
                if (result == true) {
                    rest.path = 'deleteJobChain/' + id;
                    rest.delete().success(function (data) {
                        if (data.status != 200) {
                            notification(data.msg, 'error');
                        } else {
                            notification('Record deleted successfully.', 'success');
                            $route.reload();
                        }
                    }).error(errorCallback);
                }
            });
        }
    }

    $scope.chainDuplicate = function (id) {
        if (id == undefined) {
            notification('Please select option', 'warning');
        } else {
            rest.path = 'chainDuplicateSave/' + id;
            rest.get().success(function (data) {
                $window.localStorage.chainediteId = data;
                $window.localStorage.job_chain_id = data;
                $window.localStorage.job_duplicateId = data;
                $location.path('/job-chain');
            }).error(errorCallback);
        }
    }

    rest.path = 'masterjobChaindelete';
    rest.get().success(function (data) {

    }).error(errorCallback);

}).controller('jobchaincontroller', function ($compile, $timeout, $scope, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.name = $window.localStorage.getItem("session_vUserName");
    rest.path = 'customergroupGetdata';
    rest.get().success(function (data) {
        $scope.customerLi = data;
    }).error(errorCallback)

    rest.path = 'clients';
    rest.get().success(function (data) {
        $scope.customerGroup = data;
    }).error(errorCallback);

    $scope.jobChainCustomerAdd = function (name) {
        $scope.custome = name.split(',');
        $scope.customCode = $scope.custome[0];
        $scope.customId = $scope.custome[1];
        $scope.customName = $scope.custome[2];
    }

    $scope.removeCustomer = function (id) {
        var check = angular.element('[id^=Cusid]').length - 1;
        if (id == check) {
            angular.element('.cus' + id).remove();
        } else {
            notification('Please delete from last record', 'warning');
        }
    }

    if ($window.localStorage.chainediteId) {
        rest.path = 'jobnumberGet/' + $window.localStorage.chainediteId;
        rest.get().success(function (data) {
            $window.localStorage.job_numberId = data + 1;
        }).error(errorCallback);
    }

    // 
    
    $scope.saveJob = function (jobId) {
        if (angular.element("#" + jobId).valid()) {
            
            $scope.job_chain = [];
            if ($scope.job_chain == "" || $scope.job_chain == null || $scope.job_chain == undefined) {
                $scope.job_chain = {};
            }

            rest.path = 'masterjobGet/' + $scope.jobchain_data.jobs;
            rest.get().success(function (data) {
                var a = data.service_name + ' (' + data.job_code + ')';
                var b = a.split("(").pop();
                var init = a.indexOf('(');
                var fin = a.indexOf(')');
                var code = a.substr(init + 1, fin - init - 1);
                var name = a.substring(0, a.indexOf('('));
                var job_chain_id = $window.localStorage.chainediteId;
                $scope.job_id = data.job_id;
                $scope.job_chain.job_id = $scope.job_id;
                $scope.job_chain.job_chain_id = job_chain_id;
                $scope.job_chain.jobs = name;
                $scope.job_chain.job_code = code;
                $scope.job_chain.new_job_number = $window.localStorage.job_numberId;
                rest.path = 'jobChansaveJobs';

                rest.post($scope.job_chain).success(function (data) {
                    rest.path = 'jobChinnewgetOne/' + data.id;
                    rest.get().success(function (res) {
                        $window.localStorage.job_chain_id = res.job_chain_id;
                        $scope.sortedjobList.push(res);
                    }).error(errorCallback);
                    //$route.reload();
                }).error(errorCallback);

                $scope.customer = [];
                for (var i = 0; i < angular.element("[id^=Cuscode]").length; i++) {
                    var Ccode = angular.element('#Cuscode' + i).text();
                    var Cid = angular.element('#Cusid' + i).text();
                    var Cname = angular.element('#Cusname' + i).text();
                    $scope.customer.push({
                        Cuscode: Ccode,
                        Cusid: Cid,
                        Cusname: Cname
                    });
                }

                $scope.jobchain.customer = JSON.stringify($scope.customer);
                $scope.jobchain.creator = $scope.name;
                $routeParams.id = $scope.jobchain.job_chain_id;
                rest.path = 'jobChainupdate';
                rest.put($scope.jobchain).success(function (data) { }).error(errorCallback);
                if ($scope.sortedjobList) {
                    $routeParams.id = $window.localStorage.chainediteId;
                    var sortData = [];
                    $timeout(function () {
                        angular.forEach($scope.sortedjobList, function (val, i) {
                            sortData.push({
                                'id': val.new_job_id
                            })
                        });

                        var obj = {
                            'sort': angular.toJson(sortData)
                        };

                        rest.path = 'sortedjobListSave';
                        rest.put(obj).success(function (data) {

                        }).error(errorCallback);
                    }, 1000);
                }
            }).error(errorCallback);
        }
    }

    $scope.save = function (frmId, frmId1, name) {
        if ($scope.jobchain.project_type == 0) {
            $timeout(function () {
                $('#project_type').next().css('display', 'block');
            }, 100);
        } else {
            $('#project_type').next().css('display', 'none');
        }
        if ($('#' + frmId).valid()) {
            if ($scope.jobchain.job_chain_id) {
                
                if($scope.jobchain.project_type)
                    $scope.jobchain.project_type = $scope.jobchain.project_type.toString().includes(',') ? $scope.jobchain.project_type.split(',')[1] : $scope.jobchain.project_type;   
                $scope.customer = [];
                for (var i = 0; i < angular.element("[id^=Cuscode]").length; i++) {
                    var Ccode = angular.element('#Cuscode' + i).text();
                    var Cid = angular.element('#Cusid' + i).text();
                    var Cname = angular.element('#Cusname' + i).text();
                    $scope.customer.push({
                        Cuscode: Ccode,
                        Cusid: Cid,
                        Cusname: Cname
                    });
                }
                $scope.jobchain.customer = JSON.stringify($scope.customer);
                var creator = name;
                $scope.jobchain.creator = creator;
                
                $routeParams.id = $scope.jobchain.job_chain_id;
                
                rest.path = 'jobChainupdate';
                rest.put($scope.jobchain).success(function (data) {


                    if ($scope.sortedjobList) {
                        $routeParams.id = $window.localStorage.chainediteId;

                        var sortData = [];
                        angular.forEach($scope.sortedjobList, function (val, i) {
                            sortData.push({
                                'id': val.new_job_id
                            })
                        });

                        var obj = {
                            'sort': angular.toJson(sortData)
                        };

                        rest.path = 'sortedjobListSave';
                        rest.put(obj).success(function (data) {

                        }).error(errorCallback);
                    }
                    notification('Record updated successfully.', 'success');
                    //$location.path('/newjob');
                    setTimeout( () => {
                        $route.reload();
                    },200)
                    
                    scrollBodyToTop();
                }).error(errorCallback);

            }
        }

    }

    if ($window.localStorage.chainediteId != 'false') {
        rest.path = 'jobChingetOne/' + $window.localStorage.chainediteId;
        rest.get().success(function (data) {
            
            $scope.jobchain = data;
            $scope.customerJob = data.customer ? JSON.parse(data.customer) : '';
            if ($scope.customerJob.length != undefined) {
                $scope.jobcustomerCount = $scope.customerJob.length;
            } else {
                $scope.jobcustomerCount = 0;
            }
            if ($scope.jobchain.job_name == 1) {
                $scope.jobchain.job_name = "";
            }
            $scope.name = data['creator'];
            if (data.sortedJobsJson) {
                $scope.sortedListSaved = JSON.parse(data.sortedJobsJson);
            }
        })
        rest.path = 'jobChinjobsGet/' + $window.localStorage.chainediteId;
        rest.get().success(function (data) {
            $timeout(function () {
                var StoreAsSortJob = [];
                if ($scope.sortedListSaved) {
                    angular.forEach($scope.sortedListSaved, function (v, i) {
                        var Searchedobj = data.find(function (obj) { return obj.new_job_id == v.id; });
                        if (Searchedobj) {
                            StoreAsSortJob.push(Searchedobj);
                        }
                    });

                    $timeout(function () {
                        $scope.jobsList = StoreAsSortJob;
                        $scope.sortedjobList = $scope.jobsList;
                    }, 300);
                } else {
                    $timeout(function () {
                        $scope.jobsList = data;
                        $scope.sortedjobList = $scope.jobsList;
                    }, 300);
                }
            }, 300);
        })
    }

    $scope.chainsetting = function (id) {
        $window.localStorage.setItem("newjobChainId", id);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/chain.html',
            controller: 'chainController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });
        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
            $route.reload();
        });
    }

    $scope.sortableOptions = {
        axis: "y",
        activate: function () { },
        beforeStop: function () { },
        change: function () { },
        create: function () { },
        deactivate: function () { },
        out: function () { },
        over: function () { },
        receive: function () { },
        remove: function () { },
        sort: function () { },
        start: function (event, ui) { },
        update: function (e, ui) { },
        stop: function (e, ui) {
            ui.item.removeAttr("style");
        }
    };
    $scope.showSort = () => {
        var html = angular.element(
            '<div style="margin-left:-6%">' +
            '<ul ui-sortable="sortableOptions" ng-model="sortedjobList" class="list">' +
            '<li ng-repeat="item in sortedjobList" class="item">{{item.job_code}}{{item.new_job_number | numberFixedLen:3}}</li>' +
            '</ul>' +
            '</div>' +
            '</div>');

        $compile(html)($scope);
        var dialog = bootbox.dialog({
            title: "Sort jobs",
            message: html,
            buttons: {
                success: {
                    label: "Save",
                    onEscape: true,
                    className: "btn-info",
                    callback: function () {

                    }
                }
            }
        });

        /*
        if($scope.showSortBox == false){
            $scope.showSortBox = true;
        }else{
            $scope.showSortBox = false;
        }*/

    }

}).controller('serviceController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.service.sId) {
                $routeParams.id = $scope.service.sId;
                rest.path = 'serviceUpdate';
                rest.put($scope.service).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'serviceSave';
                rest.post($scope.service).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }
    rest.path = 'serviceget';
    rest.get().success(function (data) {
        $scope.servicelist = data;
        $scope.serviceEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getService = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'servicegetone/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.service = data;
            angular.element("#properties_id").select2('val', data.properties);
            angular.element("#job_repereesantation_id").select2('val', data.job_representation);
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteService = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'serviceDelete/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    }

}).controller('masterpriceController', function ($window, $log, $scope, $location, $route, rest, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    $scope.save = function (formId, id) {
        if (angular.element('#' + formId).valid()) {
            if ($scope.master.master_price_id) {
                $routeParams.id = $scope.master.master_price_id;
                notification('Record updated successfully.', 'success');
                rest.path = 'masterpriceupdate';
                rest.put($scope.master).success(function () {
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'masterpricesave';
                rest.post($scope.master).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $scope.myitems = false;
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    rest.path = 'masterPriceGet';
    rest.get().success(function (data) {
        $scope.masterList = data;
    });

    $scope.getMasterPrice = function (id, eID) {
        rest.path = 'masterpriceGetOne/' + id;
        rest.get().success(function (data) {
            $scope.master = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteMasterprice = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'masterPriceDelete/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    }

}).controller('childpriceController', function ($window, $log, $scope, $location, $route, rest, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    $scope.save = function (formId, id) {
        if (angular.element('#' + formId).valid()) {
            if ($scope.childprice.child_price_id) {
                $routeParams.id = $scope.childprice.child_price_id;

                //$scope.childprice.rate = numberFormatCommaToPoint($scope.childprice.rate);
                $scope.childprice.rate = 0;
                rest.path = 'childpriceupdate';
                rest.put($scope.childprice).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                //$scope.childprice.rate = numberFormatCommaToPoint($scope.childprice.rate);
                $scope.childprice.rate = 0;
                rest.path = 'childpricesave';
                rest.post($scope.childprice).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    rest.path = 'childPriceGet';
    rest.get().success(function (data) {
        $scope.childunitlist = data;
        $scope.childEmpty = jQuery.isEmptyObject(data);
    })

    $scope.ChildunitEdit = function (id, eID) {
        rest.path = 'childpriceGetOne/' + id;
        rest.get().success(function (data) {
            $scope.childprice = data;
            angular.element("#mamaster_price_id").select2('val', data.master_price_id);
            //angular.element("#unit").select2('val', data.unit);
            $('#unit').select2('data', { id: data.unit, text: data.unit });
            angular.element("#service").select2('val', data.service);
            $scope.childprice.rate = numberFormatComma($scope.childprice.rate);
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteChildprice = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'childPriceDelete/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    }

}).controller('roundingPriceController', function ($window, $log, $scope, $location, $route, rest, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    getData();

    function getData() {
        rest.path = "roundingPriceGetAll";
        rest.get().success(function (data) {
            $scope.roundingList = data;
        }).error(errorCallback);
    }

    $scope.save = function (frmId) {
        if (angular.element('#' + frmId).valid()) {
            if ($scope.rounding.rounding_id) {
                $routeParams.id = $scope.rounding.rounding_id;
                rest.path = "roundingPriceUpdate";
                rest.put($scope.rounding).success(function (data) {
                    if (data.status == 422) {
                        notification(data.msg, 'error');
                    } else {
                        notification('Record updated successfully.', 'success');
                    }
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = "roundingPriceSave";
                rest.post($scope.rounding).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    $scope.roundingPriceEdit = function (id, eID) {
        rest.path = "roundingPriceGetOne/" + id;
        rest.get().success(function (data) {
            $scope.rounding = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteRoundingprice = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'deleteRoundingprice/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    }

}).controller('customerpricelistController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $cookieStore, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    angular.element('.panel-heading').css('background-color', 'white');
    $scope.currentUserName = $window.localStorage.getItem("session_vUserName");

    $scope.pricePageId = 1;

    $scope.newCustomer = function () {
        $scope.customerPriceList = true;
        $scope.customerPrice = {};
        $scope.customerPrice.price_name = $scope.currentUserName + ' | '; //TRA|PRF-;
        $scope.priceBasiList = {};
        $scope.priceLanguageList = {};
        angular.element('#customerPriceId').select2('val', '');
        angular.element('#price_currency').select2('val', '');
        angular.element('#calculation_basis').select2('val', '');
        angular.element('#rounding_proc').select2('val', '');
        angular.element('#specialization').select2('val', '');
        $scope.customerPriceId = false;
        $scope.planedQuaTotal = "";
        $scope.planedHourTotal = "";
        $scope.baseQuentity = [];
        $scope.basePrice = [];
    }

    angular.element('.customerPriceTable th:eq(2)').css('border-left', 'solid 1');

    angular.element('.priceTable th').mouseover(function () {
        angular.element(this).css('cursor', 'pointer');
    });

    rest.path = 'masterPriceitemgetFromPriceList';
    rest.get().success(function (data) {
        $scope.masterPrice = data;
    }).error(errorCallback);

    rest.path = 'childPriceitemget';
    rest.get().success(function (data) {
        $scope.childPrice = data;
    }).error(errorCallback);

    $scope.itemLanguage = function (item) {
        var a = item.source_lang.split(',');
        angular.forEach(a, function (val, i) { });
    }

    angular.element('body').on('click', '.priceLPrice', function () {
        $('.priceLPrice').removeClass('rowactivate');
        $(this).addClass('rowactivate');
    });

    $scope.removePriceLanguage = function (id) {
        if (angular.element('[id^=priceLanguageID]').length - 1 == id) {
            angular.element('#priceLanguageID' + id).remove();
        } else {
            notification('Delete from last record', 'warning');
        }
    }

    $scope.sendPriceLanguage = function (id) {
        var specialization = angular.element('#specialization').select2('data');
        if (!specialization) {
            notification('Please select specialization.', 'warning');
            return;
        }
        var language = angular.element('#priceLanguageID' + id).text();
        angular.element('body').find('.setPriceLanguage').text(language);
        var customerPriceName = angular.element('#customerPriceName').val();
        var chkNameAfterPipeSymbole = customerPriceName[customerPriceName.length - 2];
        if (chkNameAfterPipeSymbole == "|") {
            var fromLangugageChar = language.split('>')[0].trim().substr(0, 3).toUpperCase();
            var toLangugageChar = language.split('>')[1].trim().substr(0, 3).toUpperCase();
            var newLanguage = fromLangugageChar + '>' + toLangugageChar;
            $scope.customerPrice.price_name = $scope.customerPrice.price_name + newLanguage + ' | ' + specialization.text;
        } else {
            var customerPriceName = angular.element('#customerPriceName').val();
            var oldName = customerPriceName.split('|');
            var fromLangugageChar = language.split('>')[0].trim().substr(0, 3).toUpperCase();
            var toLangugageChar = language.split('>')[1].trim().substr(0, 3).toUpperCase();
            var newLanguage = fromLangugageChar + '>' + toLangugageChar;
            var specialization = angular.element('#specialization').select2('data');
            $scope.customerPrice.price_name = oldName[0].trim() + ' | ' + newLanguage + ' | ' + specialization.text;
        }
    }

    $scope.removeBasePrice = function (id) {
        if (angular.element('[class^=basePriceMain]').length - 1 == id) {
            $scope.planedHourTotal = parseInt(angular.element('.totalPlannHour').text()) - parseInt(angular.element('.plannedStandardTime' + id).text());
            $scope.planedQuaTotal = parseInt(angular.element('.totalPlannQuentity').text()) - parseInt(angular.element('.plannedQuentity' + id).text());
            angular.element('.basePriceMain' + id).remove();
            angular.element('.plannedData' + id).remove();
            $scope.basePrice[id] = "";
        } else {
            notification('Delete from last record', 'warning');
        }
    }

    $scope.basePriceCheck = function (id) {
        var daynamicClass = angular.element('#basePriceCheck' + id).attr('class').split(' ')[1];
        var oldClass = 'fa-check';
        var newClass = 'fa-times';
        if (daynamicClass == newClass) {
            angular.element('#basePriceCheck' + id).addClass(oldClass);
            angular.element('#basePriceCheck' + id).removeClass(daynamicClass);
        } else if (daynamicClass == oldClass) {
            angular.element('#basePriceCheck' + id).removeClass(oldClass);
            angular.element('#basePriceCheck' + id).addClass(newClass);
        }
    }

    $scope.customerChange = function (id) {
        rest.path = 'customerpriceGetOne/' + id;
        rest.get().success(function (data) {
            $scope.customerPrice = data;

            angular.element('#price_currency').select2('val', data.price_currency);
            angular.element('#calculation_basis').select2('val', data.calculation_basis);
            angular.element('#rounding_proc').select2('val', data.rounding_proc);
            var check = false;
            var getComma = /,/;
            if (getComma.test(data.specialization) == true) {
                check = true;
            } else {
                check = false;
            }
            angular.element('#specialization').select2('val', check ? data.specialization.split(',') : data.specialization);
            $scope.priceBasiList = JSON.parse(data.price_basis);
            $scope.priceLanguageList = JSON.parse(data.price_language);
            $scope.baseQuentity = [];
            $scope.basePrice = [];
            var quantity = 0;
            var standard = 0;
            angular.forEach(JSON.parse(data.price_basis), function (val, i) {
                $scope.baseQuentity[i] = val.baseQuentity;
                $scope.basePrice[i] = val.basePrice;

                if (val.baseQuentity) {
                    quantity += parseInt(val.baseQuentity);
                }

                if (val.standardTime) {
                    standard += parseInt(val.standardTime);
                }
            });

            $scope.planedHourTotal = standard;
            $scope.planedQuaTotal = quantity;
        }).error(errorCallback);
        $scope.customerPriceList = true;
    }

    $scope.removecustomerPriceId = function () {
        $scope.customerPrice = {};
        $scope.priceBasiList = {};
        $scope.priceLanguageList = {};
        angular.element('#customerPriceId').select2('val', '');
        $route.reload();
    };

    $scope.save = function (frmId) {
        
        if (angular.element('#' + frmId).valid()) {
            var setPriceLanguage = angular.element('.setPriceLanguage').text();
            if (setPriceLanguage == 'Change prices') {
                notification('Please set language', 'warning');
                return false;
            }
            if ($scope.customerPrice.price_list_id) {
                var langObj = [];
                for (var i = 0; i < angular.element('[id^=priceLanguageID]').length; i++) {
                    var languagePrice = angular.element('.priceLanguage' + i).text();
                    langObj.push({
                        'languagePrice': languagePrice
                    });
                }
                var basePriceObj = [];
                for (var i = 0; i < angular.element('[class^=basePriceMain]').length; i++) {
                    var baseQuentity = angular.element('#basepriceQuantity' + i).val().trim();

                    if (angular.element('#basePriceCheck' + i).attr('class').split(' ')[1] == 'fa-check') {
                        var basePricecheck = 1;
                    } else {
                        var basePricecheck = 0;
                    }

                    var basePriceUnit = angular.element('#basePriceUnit' + i).text().trim();
                    var basePrice = numberFormatCommaToPoint(angular.element('#basePrice' + i).val().trim());
                    
                    var standardTime = angular.element('.standardTime' + i).text().trim();
                    basePriceObj.push({
                        'baseQuentity': baseQuentity,
                        'basePricecheck': basePricecheck,
                        'basePriceUnit': basePriceUnit,
                        'basePrice': basePrice,
                        'standardTime': standardTime
                    });
                }

                var price_id = $scope.pricePageId;
                var price_language = JSON.stringify(langObj);
                var price_basis = JSON.stringify(basePriceObj);
                $scope.price_language = price_language;
                $scope.price_basis = price_basis;
                $scope.price_id = price_id;
                $scope.customerPrice.price_language = $scope.price_language;
                $scope.customerPrice.price_basis = $scope.price_basis;
                $scope.customerPrice.price_id = $scope.price_id;
                $routeParams.id = $scope.customerPrice.price_list_id;
                rest.path = "customerpriceUpdate";
                rest.put($scope.customerPrice).success(function (data) {
                    notification('Price list successfully updated', 'success');
                    $timeout(function () {
                        angular.element("#customerPriceId").select2('data', { id: data.LastIsertedData.price_list_id, text: data.LastIsertedData.price_name });
                    }, 200);
                    var obj = [];
                    rest.path = 'customerpriceAll/' + data.LastIsertedData.price_id;
                    rest.get().success(function (data) {
                        angular.forEach(data, function (val, i) {
                            obj.push({
                                'id': val.price_list_id,
                                'text': val.price_name
                            });
                        });
                    });
                    angular.element('#customerPriceId').select2({
                        allowClear: true,
                        data: obj,
                        multiple: false
                    });
                }).error(errorCallback);
            } else {

                if (setPriceLanguage == 'Change prices') {
                    notification('Please set language', 'warning');
                    return false;
                }
                var langObj = [];
                for (var i = 0; i < angular.element('[id^=priceLanguageID]').length; i++) {
                    var languagePrice = angular.element('.priceLanguage' + i).text();
                    langObj.push({
                        'languagePrice': languagePrice
                    });
                }

                var basePriceObj = [];
                for (var i = 0; i < angular.element('[class^=basePriceMain]').length; i++) {
                    var baseQuentity = angular.element('#basepriceQuantity' + i).val().trim();
                    if (angular.element('#basePriceCheck' + i).attr('class').split(' ')[1] == 'fa-check') {
                        var basePricecheck = 1;
                    } else {
                        var basePricecheck = 0;
                    }
                    var basePriceUnit = angular.element('#basePriceUnit' + i).text().trim();
                    //var basePrice = angular.element('#basePrice' + i).val().trim();
                    var basePrice = numberFormatCommaToPoint(angular.element('#basePrice' + i).val().trim());
                    
                    var standardTime = angular.element('.standardTime' + i).text().trim();
                    basePriceObj.push({
                        'baseQuentity': baseQuentity,
                        'basePricecheck': basePricecheck,
                        'basePriceUnit': basePriceUnit,
                        'basePrice': basePrice,
                        'standardTime': standardTime
                    });
                }

                var price_id = $scope.pricePageId;
                var price_language = JSON.stringify(langObj);
                var price_basis = JSON.stringify(basePriceObj);
                $scope.price_language = price_language;
                $scope.price_basis = price_basis;
                $scope.price_id = price_id;
                $scope.customerPrice.price_language = $scope.price_language;
                $scope.customerPrice.price_basis = $scope.price_basis;
                $scope.customerPrice.price_id = $scope.price_id;
                rest.path = "customerpriceSave";
                rest.post($scope.customerPrice).success(function (data) {
                    notification('Price list successfully saved', 'success');
                    $scope.customerPrice.price_list_id = data.LastIsertedData.price_list_id;
                    $timeout(function () {
                        angular.element("#customerPriceId").select2('data', { id: data.LastIsertedData.price_list_id, text: data.LastIsertedData.price_name });
                    }, 200);
                    var obj = [];
                    rest.path = 'customerpriceAll/' + data.LastIsertedData.price_id;
                    rest.get().success(function (data) {
                        angular.forEach(data, function (val, i) {
                            obj.push({
                                'id': val.price_list_id,
                                'text': val.price_name
                            });
                        });
                    });
                    angular.element('#customerPriceId').select2({
                        allowClear: true,
                        data: obj,
                        multiple: false
                    });
                }).error(errorCallback);
            }
        }
    }

    angular.element('.topMenu').click(function () {
        angular.element('.topMenu').removeClass('topMenu-Active');
        angular.element(this).addClass('topMenu-Active');
        if (angular.element(this).text().trim() == 'Planned time') {
            $scope.plannedTime = true;
        } else {
            $scope.plannedTime = false;
        }
    });

    $scope.basePriceQuantityChnage = function (id, data) {
        var val = angular.element('#basePrice' + id).val();
        if (data && val.length > 0) {
            var mul = parseInt(val) * parseInt(data);
            angular.element('#baseWaiting' + id).text(mul);
            // $scope.planedQuaTotal = parseInt(angular.element('.totalPlannQuentity').text()) - parseInt(angular.element('.plannedQuentity' + id).text()) + data;
            // angular.element('.plannedQuentity' + id).text(data);
        } else {
            angular.element('#baseWaiting' + id).text('0');
        }
    }
    $scope.basePriceChnage = function (id, data) {
        var val = angular.element('#basepriceQuantity' + id).val();
        if (data && val.length > 0) {
            var mul = parseInt(val) * parseInt(data);
            angular.element('#baseWaiting' + id).text(mul);
        } else {
            angular.element('#baseWaiting' + id).text('0');
        }
    }

    $scope.copyCustomer = function (id) {
        if (id) {

            rest.path = 'customerpriceListCopy/' + id;
            rest.get().success(function (data) {
                $scope.customerChange(data.id);
            });
        } else {
            notification("please select option", "warning");
        }
    }

}).controller('resourcepricelistController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $cookieStore, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    angular.element('.panel-heading').css('background-color', 'white');
    $scope.currentUserName = $window.localStorage.getItem("session_vUserName");
    $scope.pricePageId = 2;

    $scope.newCustomer = function () {
        $scope.customerPriceList = true;
        $scope.customerPrice = {};
        $scope.customerPrice.price_name = $scope.currentUserName + ' | '; //TRA|PRF-';
        $scope.priceBasiList = {};
        $scope.priceLanguageList = {};
        angular.element('#customerPriceId').select2('val', '');
        angular.element('#price_currency').select2('val', '');
        angular.element('#calculation_basis').select2('val', '');
        angular.element('#rounding_proc').select2('val', '');
        angular.element('#specialization').select2('val', '');
        $scope.customerPriceId = false;
        $scope.planedQuaTotal = "";
        $scope.planedHourTotal = "";
        $scope.baseQuentity = [];
        $scope.basePrice = [];
    }

    angular.element('.customerPriceTable th:eq(2)').css('border-left', 'solid 1');

    angular.element('.priceTable th').mouseover(function () {
        angular.element(this).css('cursor', 'pointer');
    });

    rest.path = 'masterPriceitemgetFromPriceList';
    rest.get().success(function (data) {
        $scope.masterPrice = data;
    }).error(errorCallback);

    rest.path = 'childPriceitemget';
    rest.get().success(function (data) {
        $scope.childPrice = data;
    }).error(errorCallback);

    $scope.itemLanguage = function (item) {
        var a = item.source_lang.split(',');
        angular.forEach(a, function (val, i) { });
    }

    angular.element('body').on('click', '.priceLPrice', function () {
        angular.element('.priceLPrice').removeClass('rowactivate');
        angular.element(this).addClass('rowactivate');
    });

    $scope.removePriceLanguage = function (id) {
        if (angular.element('[id^=priceLanguageID]').length - 1 == id) {
            angular.element('#priceLanguageID' + id).remove();
        } else {
            notification('Delete from last record', 'warning');
        }
    }

    $scope.sendPriceLanguage = function (id) {
        var specialization = angular.element('#specialization').select2('data');
        if (!specialization) {
            notification('Please select specialization.', 'warning');
            return;
        }
        var language = angular.element('#priceLanguageID' + id).text();
        angular.element('body').find('.setPriceLanguage').text(language);
        var customerPriceName = angular.element('#customerPriceName').val();
        var chkNameAfterPipeSymbole = customerPriceName[customerPriceName.length - 2];
        if (chkNameAfterPipeSymbole == "|") {
            var fromLangugageChar = language.split('>')[0].trim().substr(0, 3).toUpperCase();
            var toLangugageChar = language.split('>')[1].trim().substr(0, 3).toUpperCase();
            var newLanguage = fromLangugageChar + '>' + toLangugageChar;
            $scope.customerPrice.price_name = $scope.customerPrice.price_name + newLanguage + ' | ' + specialization.text;
        } else {
            var customerPriceName = angular.element('#customerPriceName').val();
            var oldName = customerPriceName.split('|');
            var fromLangugageChar = language.split('>')[0].trim().substr(0, 3).toUpperCase();
            var toLangugageChar = language.split('>')[1].trim().substr(0, 3).toUpperCase();
            var newLanguage = fromLangugageChar + '>' + toLangugageChar;
            var specialization = angular.element('#specialization').select2('data');
            $scope.customerPrice.price_name = oldName[0].trim() + ' | ' + newLanguage + ' | ' + specialization.text;
        }
    }

    $scope.removeBasePrice = function (id) {
        if (angular.element('[class^=basePriceMain]').length - 1 == id) {
            $scope.planedHourTotal = parseInt(angular.element('.totalPlannHour').text()) - parseInt(angular.element('.plannedStandardTime' + id).text());
            $scope.planedQuaTotal = parseInt(angular.element('.totalPlannQuentity').text()) - parseInt(angular.element('.plannedQuentity' + id).text());
            angular.element('.basePriceMain' + id).remove();
            angular.element('.plannedData' + id).remove();
            $scope.basePrice[id] = "";
        } else {
            notification('Delete from last record', 'warning');
        }
    }

    $scope.basePriceCheck = function (id) {
        var daynamicClass = angular.element('#basePriceCheck' + id).attr('class').split(' ')[1];
        var oldClass = 'fa-check';
        var newClass = 'fa-times';
        if (daynamicClass == newClass) {
            angular.element('#basePriceCheck' + id).addClass(oldClass);
            angular.element('#basePriceCheck' + id).removeClass(daynamicClass);
        } else if (daynamicClass == oldClass) {
            angular.element('#basePriceCheck' + id).removeClass(oldClass);
            angular.element('#basePriceCheck' + id).addClass(newClass);
        }
    }

    $scope.customerChange = function (id) {
        rest.path = 'customerpriceGetOne/' + id;
        rest.get().success(function (data) {
            $scope.customerPrice = data;
            angular.element('#price_currency').select2('val', data.price_currency);
            angular.element('#calculation_basis').select2('val', data.calculation_basis);
            angular.element('#rounding_proc').select2('val', data.rounding_proc);
            var check = false;
            var getComma = /,/;
            if (getComma.test(data.specialization) == true) {
                check = true;
            } else {
                check = false;
            }
            angular.element('#specialization').select2('val', check ? data.specialization.split(',') : data.specialization);
            $scope.priceBasiList = JSON.parse(data.price_basis);
            $scope.priceLanguageList = JSON.parse(data.price_language);
            $scope.baseQuentity = [];
            $scope.basePrice = [];
            var quantity = 0;
            var standard = 0;
            angular.forEach(JSON.parse(data.price_basis), function (val, i) {
                $scope.baseQuentity[i] = val.baseQuentity.trim();
                $scope.basePrice[i] = val.basePrice.trim();
                if (val.baseQuentity) {
                    quantity += parseInt(val.baseQuentity);
                }
                if (val.standardTime) {
                    standard += parseInt(val.standardTime);
                }
            });
            $scope.planedHourTotal = standard;
            $scope.planedQuaTotal = quantity;
        }).error(errorCallback);
        $scope.customerPriceList = true;
    }

    $scope.removecustomerPriceId = function () {
        $scope.customerPrice = {};
        $scope.priceBasiList = {};
        $scope.priceLanguageList = {};
        angular.element('#customerPriceId').select2('val', '');
        $route.reload();
    };

    $scope.save = function (frmId) {
        if (angular.element('#' + frmId).valid()) {
            var setPriceLanguage = angular.element('.setPriceLanguage').text();
            if (setPriceLanguage == 'Change prices') {
                notification('Please set language', 'warning');
                return false;
            }
            if ($scope.customerPrice.price_list_id) {
                var langObj = [];
                for (var i = 0; i < angular.element('[id^=priceLanguageID]').length; i++) {
                    var languagePrice = angular.element('.priceLanguage' + i).text();
                    langObj.push({
                        'languagePrice': languagePrice
                    });
                }
                var basePriceObj = [];
                for (var i = 0; i < angular.element('[class^=basePriceMain]').length; i++) {
                    var baseQuentity = angular.element('#basepriceQuantity' + i).val().trim();

                    if (angular.element('#basePriceCheck' + i).attr('class').split(' ')[1] == 'fa-check') {
                        var basePricecheck = 1;
                    } else {
                        var basePricecheck = 0;
                    }

                    var basePriceUnit = angular.element('#basePriceUnit' + i).text().trim();
                    var basePrice = angular.element('#basePrice' + i).val().trim();
                    var standardTime = angular.element('.standardTime' + i).text().trim();
                    basePriceObj.push({
                        'baseQuentity': baseQuentity,
                        'basePricecheck': basePricecheck,
                        'basePriceUnit': basePriceUnit,
                        'basePrice': basePrice,
                        'standardTime': standardTime
                    });
                }

                var price_id = $scope.pricePageId;
                var price_language = JSON.stringify(langObj);
                var price_basis = JSON.stringify(basePriceObj);
                $scope.price_language = price_language;
                $scope.price_basis = price_basis;
                $scope.price_id = price_id;
                $scope.customerPrice.price_language = $scope.price_language;
                $scope.customerPrice.price_basis = $scope.price_basis;
                $scope.customerPrice.price_id = $scope.price_id;
                $routeParams.id = $scope.customerPrice.price_list_id;
                rest.path = "customerpriceUpdate";
                rest.put($scope.customerPrice).success(function (data) {
                    notification('Price list successfully updated', 'success');
                    $timeout(function () {
                        angular.element("#customerPriceId").select2('data', { id: data.LastIsertedData.price_list_id, text: data.LastIsertedData.price_name });
                    }, 200);
                    var obj = [];
                    rest.path = 'customerpriceAll/' + data.LastIsertedData.price_id;
                    rest.get().success(function (data) {
                        angular.forEach(data, function (val, i) {
                            obj.push({
                                'id': val.price_list_id,
                                'text': val.price_name
                            });
                        });
                    });
                    angular.element('#customerPriceId').select2({
                        allowClear: true,
                        data: obj,
                        multiple: false
                    });
                }).error(errorCallback);
            } else {

                if (setPriceLanguage == 'Change prices') {
                    notification('Please set language', 'warning');
                    return false;
                }
                var langObj = [];
                for (var i = 0; i < angular.element('[id^=priceLanguageID]').length; i++) {
                    var languagePrice = angular.element('.priceLanguage' + i).text();
                    langObj.push({
                        'languagePrice': languagePrice
                    });
                }

                var basePriceObj = [];
                for (var i = 0; i < angular.element('[class^=basePriceMain]').length; i++) {
                    var baseQuentity = angular.element('#basepriceQuantity' + i).val().trim();
                    if (angular.element('#basePriceCheck' + i).attr('class').split(' ')[1] == 'fa-check') {
                        var basePricecheck = 1;
                    } else {
                        var basePricecheck = 0;
                    }
                    var basePriceUnit = angular.element('#basePriceUnit' + i).text().trim();
                    var basePrice = angular.element('#basePrice' + i).val().trim();
                    var standardTime = angular.element('.standardTime' + i).text().trim();
                    basePriceObj.push({
                        'baseQuentity': baseQuentity,
                        'basePricecheck': basePricecheck,
                        'basePriceUnit': basePriceUnit,
                        'basePrice': basePrice,
                        'standardTime': standardTime
                    });
                }

                var price_id = $scope.pricePageId;
                var price_language = JSON.stringify(langObj);
                var price_basis = JSON.stringify(basePriceObj);
                $scope.price_language = price_language;
                $scope.price_basis = price_basis;
                $scope.price_id = price_id;
                $scope.customerPrice.price_language = $scope.price_language;
                $scope.customerPrice.price_basis = $scope.price_basis;
                $scope.customerPrice.price_id = $scope.price_id;
                rest.path = "customerpriceSave";
                rest.post($scope.customerPrice).success(function (data) {
                    notification('Price list successfully saved', 'success');
                    $scope.customerPrice.price_list_id = data.LastIsertedData.price_list_id;
                    $timeout(function () {
                        angular.element("#customerPriceId").select2('data', { id: data.LastIsertedData.price_list_id, text: data.LastIsertedData.price_name });
                    }, 200);
                    var obj = [];
                    rest.path = 'customerpriceAll/' + data.LastIsertedData.price_id;
                    rest.get().success(function (data) {
                        angular.forEach(data, function (val, i) {
                            obj.push({
                                'id': val.price_list_id,
                                'text': val.price_name
                            });
                        });
                    });
                    angular.element('#customerPriceId').select2({
                        allowClear: true,
                        data: obj,
                        multiple: false
                    });
                }).error(errorCallback);
            }
        }
    }

    angular.element('.topMenu').click(function () {
        angular.element('.topMenu').removeClass('topMenu-Active');
        angular.element(this).addClass('topMenu-Active');

        if (angular.element(this).text().trim() == 'Planned time') {
            $scope.plannedTime = true;
        } else {
            $scope.plannedTime = false;
        }

    });

    $scope.basePriceChnage = function (id, data) {
        var val = angular.element('#basepriceQuantity' + id).val();
        if (data && val.length > 0) {
            var mul = parseInt(val) * parseInt(data);
            angular.element('#baseWaiting' + id).text(mul);
        } else {

            angular.element('#baseWaiting' + id).text('0');
        }
    }

    $scope.basePriceQuantityChnage = function (id, data) {
        var val = angular.element('#basePrice' + id).val();
        if (data && val.length > 0) {
            var mul = parseInt(val) * parseInt(data);
            angular.element('#baseWaiting' + id).text(mul);
            // $scope.planedQuaTotal = parseInt(angular.element('.totalPlannQuentity').text()) - parseInt(angular.element('.plannedQuentity' + id).text()) + data;
            // angular.element('.plannedQuentity' + id).text(data);
        } else {
            angular.element('#baseWaiting' + id).text('0');
        }
    }

    $scope.copyCustomer = function (id) {
        if (id) {
            rest.path = 'customerpriceListCopy/' + id;
            rest.get().success(function (data) {
                $scope.customerChange(data.id);
            });
        } else {
            notification("please select option", "warning");
        }
    }

}).controller('InvoiceDuePeriodController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $route) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    //get of invoice due period
    $scope.getData = function () {
        rest.path = "getAllInvoicePeriod";
        rest.get().success(function (data) {
            $scope.dueperiodList = data;
            $scope.getOne(data[0].invoice_due_id);
        }).error(errorCallback);
    }

    $scope.getData();

    //get One of invoice due period
    $scope.getOne = function (id) {
        rest.path = "getOneInvoicePeriod/" + id;
        rest.get().success(function (data) {
            $scope.invoice = data;
        }).error(errorCallback);
        //scrollToId(eID);
    }

    //save of invoice due period
    $scope.save = function (frmId) {
        if (angular.element('#' + frmId).valid()) {
            if ($scope.invoice.invoice_due_id) {
                $routeParams.id = $scope.invoice.invoice_due_id;
                rest.path = "updateInvoicePeriod";
                rest.put($scope.invoice).success(function (data) {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = "saveInvoicePeriod";
                rest.post($scope.invoice).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    //Delete Invoice due period
    $scope.deleteDetail = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = "deleteInvoicePeriod/" + id;
                rest.delete().success(function (data) {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                });
            }
        });
    }

}).controller('taxstatusController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.status.tax_percentage > 100) {
                notification("Please enter value between 0 to 100", "error");
                return false;
            }
            if ($scope.status.tax_percentage < 0 || $scope.status.tax_percentage == undefined) {
                notification("Please enter positive value.", "error");
                return false;
            }

            if ($scope.status.tax_id) {
                $routeParams.id = $scope.status.tax_id;
                rest.path = 'taxstatus';
                rest.put($scope.status).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'taxStatus';
                rest.post($scope.status).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    rest.path = 'taxStatusget';
    rest.get().success(function (data) {
        $scope.taxstatus = data;
        $scope.taxationEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getTax = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'taxstatusU';
        rest.model().success(function (data) {
            $scope.status = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'taxStatusDelete/' + id;
                rest.delete().success(function (data) {
                    if (data.status == 200) {
                        notification('Record deleted successfully.', 'success');
                    }
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };
}).controller('knowledgecategoryController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $cookieStore) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    $scope.getCategoryData = function () {
        rest.path = "KcategorygetAll";
        rest.get().success(function (data) {
            $scope.categoryList = data;
            $scope.categoryEmpty = jQuery.isEmptyObject(data);
            $scope.categoryIcon = "";
        }).error(errorCallback);
    }

    //icon select2
    $scope.getCategoryData();

    //icon box show
    $scope.iconSet = false;

    //Search icon
    $scope.searchIcon = function (icon) {
        if (icon) {
            $scope.searchLoader = true;
            rest.path = "categoryIconGet/" + icon;
            rest.get().success(function (data) {
                $scope.iconList = data;
                $scope.iconSet = true;
                $scope.searchLoader = false;
                angular.element('.iconResults').show();
            }).error(errorCallback);
        }
    }

    //select icon
    $scope.iconSelect = function (icon) {
        if ($scope.category == undefined || $scope.category == null || $scope.category == "") {
            $scope.category = {};
        }

        $scope.category.icon = icon;
        $scope.iconSet = false;
    }

    //search of focus
    $scope.iconFocus = function (icon) {
        if (icon) {
            if ($scope.iconList.length) {
                $scope.iconSet = true;
                angular.element('.iconResults').show();
            }
        }
    }

    //icon input blank on remove icon
    $scope.iconChange = function (icon) {
        $scope.searchIcon(icon);
        if (!icon) {
            $scope.iconList = {};
            $scope.iconSet = false;
        }
    }

    //knowledge category add
    $scope.save = function (frmId) {
        if ($scope.category.icon == undefined) {
            notification('Please search icon.', 'error');
            return false;
        }

        if (angular.element('#' + frmId).valid()) {
            if ($scope.category.category_id) {
                $routeParams.id = $scope.category.category_id;
                rest.path = "KcategorySave";
                rest.put($scope.category).success(function (data) {
                    notification('Record updated successfully.', 'success');
                    $scope.getCategoryData();
                    $scope.category = {};
                }).error(errorCallback);
            } else {
                rest.path = "KcategorySave";
                rest.post($scope.category).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $scope.category = {};
                    $scope.getCategoryData();
                }).error(errorCallback);
            }
        }
    }

    $scope.getCategory = function (id, eID) {
        rest.path = "KcategorygetOne/" + id;
        rest.get().success(function (data) {
            $scope.category = data;
            scrollToId(eID);
        }).error(errorCallback);
    }

    $scope.deleteModel = function (id) {
        $scope.deleteModel = function (id) {
            bootbox.confirm("Are you sure you want to delete?", function (result) {
                if (result == true) {
                    rest.path = "KcategoryDelete/" + id;
                    rest.delete().success(function (data) {
                        if (!data) {
                            notification('Can not delete Category is used in article.', 'error');
                        } else {
                            notification('Record deleted successfully.', 'success');
                        }
                        $scope.getCategoryData();
                    }).error(errorCallback);
                }
            })
        }
    }

}).controller('knowledgeArticleController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $cookieStore) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    getData();
    angular.element('#edit').froalaEditor({
        // Set the image upload URL.
        inlineStyles: {
            'Big Red': 'font-size: 20px; color: red;',
            'Small Blue': 'font-size: 14px; color: blue;',
            'Italic': 'font-style: italic;',
            'Normal': 'font-style: normal;'
        },
        theme: 'gray',
        height: 250,
        zIndex: 2001,
        imageUploadURL: '/api/v1/knowledgeArticleImage',
        imageUploadParams: {
            id: 'my_editor'
        },
        fileUploadURL: '/api/v1/knowledgeArticlefile',
        fileUploadParams: {
            id: 'my_editor'
        }
    }).on('froalaEditor.image.removed', function (e, editor, $img) {
        $.ajax({
            // Request method.
            method: "POST",
            // Request URL.
            url: "/api/v1/knowledgeDeleteArticleImage",
            // Request params.
            data: {
                src: $img.attr('src')
            }
        })
    });
    $('.fr-toolbar').find("button:eq(2)").remove();
    angular.element('div.fr-wrapper + div').remove();

    $scope.save = function (frmId) {
        if (angular.element('#' + frmId).valid()) {
            if ($scope.article.article_id) {
                var section = angular.element('#edit').val();
                $scope.section = section;
                $scope.article.section = $scope.section;
                $routeParams.id = $scope.article.article_id;
                rest.path = "knowledgeArticleSave";
                rest.put($scope.article).success(function (data) {
                    //$route.reload();
                    notification('Record updated successfully.', 'success');
                    getData();
                    $scope.article = {};
                    angular.element('.fr-view').text('');
                    angular.element('#article_category').select2('val', 'select');
                });
            } else {
                var section = angular.element('#edit').val();
                $scope.section = section;
                $scope.article.section = $scope.section;
                rest.path = "knowledgeArticleSave";
                rest.post($scope.article).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    getData();
                    $scope.article = {};
                    angular.element('.fr-view').text('');
                    angular.element('#article_category').select2('val', 'select');
                });
            }
        }
        scrollToId('top');
    }

    function getData() {
        rest.path = "knowledgeArticlegetAll";
        rest.get().success(function (data) {
            $scope.artileList = data;
            angular.element('a[href="https://froala.com/wysiwyg-editor').css('display', 'none');
            $scope.articleEmpty = jQuery.isEmptyObject(data);
        });
    }

    $scope.getArticle = function (id, eID) {
        rest.path = "knowledgeArticlegetOne/" + id;
        rest.get().success(function (data) {
            $scope.article = data;
            angular.element('#article_category').select2('val', data.category);
            angular.element('.fr-view').html(data.section);
            angular.element('#edit').val(data.section);
            angular.element('.fr-placeholder').remove();
            angular.element('a[href="https://froala.com/wysiwyg-editor').css('display', 'none');
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = "knowledgeArticleDelete/" + id;
                rest.delete().success(function (data) {
                    notification('Record deleted successfully.', 'success');
                    getData();
                }).error(errorCallback);
            }
        });
    }
}).controller('knowledgeNewsController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $cookieStore) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    getData();
    angular.element('.editDATA').froalaEditor({
        // Set the image upload URL..
        inlineStyles: {
            'Big Red': 'font-size: 20px; color: red;',
            'Small Blue': 'font-size: 14px; color: blue;',
            'Italic': 'font-style: italic;',
            'Normal': 'font-style: normal;'
        },
        theme: 'gray',
        zIndex: 2001,
        height: 250,
        imageUploadURL: '/api/v1/knowledgeArticleImage',
        imageUploadParams: {
            id: 'my_editor'
        },
        fileUploadURL: '/api/v1/knowledgeArticlefile',
        fileUploadParams: {
            id: 'my_editor'
        }
    }).on('froalaEditor.image.removed', function (e, editor, $img) {
        $.ajax({
            // Request method.
            method: "POST",
            // Request URL.
            url: "/api/v1/knowledgeDeleteArticleImage",
            // Request params.
            data: {
                src: $img.attr('src')
            }
        })
    });
    $('.fr-toolbar').find("button:eq(2)").remove();
    angular.element('div.fr-wrapper + div').remove();
    $scope.save = function (frmId) {
        if (angular.element('#' + frmId).valid()) {
            if ($scope.news.k_news_id) {
                $scope.created_user = $window.localStorage.getItem("session_vUserName");
                $scope.k_news_description = angular.element('.editDATA').val();
                $scope.news.created_user = $scope.created_user;
                $scope.news.k_news_description = $scope.k_news_description;
                $routeParams.id = $scope.news.k_news_id;
                rest.path = "knowledgeNewsUpdate";
                rest.put($scope.news).success(function (data) {
                    notification('Record updated successfully.', 'success');
                    getData();
                }).error(errorCallback);
            } else {
                $scope.created_user = $window.localStorage.getItem("session_vUserName");
                $scope.k_news_description = angular.element('.editDATA').val();
                $scope.news.created_user = $scope.created_user;
                $scope.news.k_news_description = $scope.k_news_description;
                rest.path = "knowledgeNewsSave";
                rest.post($scope.news).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    getData();
                }).error(errorCallback);
            }
        }
        scrollToId('top');
    }

    function getData() {
        rest.path = "knowledgeNewsgetAll";
        rest.get().success(function (data) {
            $scope.NewsList = data;
            $scope.news = {};
            angular.element('.editDATA').val('');
            angular.element('.fr-view').html('');
            angular.element('a[href="https://froala.com/wysiwyg-editor').css('display', 'none');
            $scope.articleEmpty = jQuery.isEmptyObject(data);
        });
    }

    $scope.getNews = function (id, eID) {
        rest.path = "knowledgeNewsgetOne/" + id;
        rest.get().success(function (data) {
            $scope.news = data;
            angular.element('.editDATA').val(data.k_news_description);
            angular.element('.fr-view').html(data.k_news_description);
            angular.element('.fr-placeholder').remove();
            angular.element('a[href="https://froala.com/wysiwyg-editor').css('display', 'none');
        });
        scrollToId(eID);
    }

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = "knowledgeNewsDelete/" + id;
                rest.delete().success(function (data) {
                    notification('Record deleted successfully.', 'success');
                    getData();
                }).error(errorCallback);
            }
        });
    }
}).controller('knowledgefunPicController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $cookieStore) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    rest.path = "funpicGet/" + $cookieStore.get('session_iUserId');
    rest.get().success(function (data) {
        $scope.funpicList = data;
        $scope.funpicListEmpty = angular.isObject(data);
    });

    $scope.Search = function (id) {
        if (id) {
            $route.reload();
        } else {
            notification("No delete history", "warning");
        }
    }

}).controller('reportedImagesController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $route, $filter) {
    rest.path = "getReportedImages";
    rest.get().success(function (data) {
        $scope.reportedImages = data;
    });
    $scope.UpdateImageStatus = function (imgName, status) {
        rest.path = 'UpdateImageStatus/' + imgName + '/' + status;
        rest.delete().success(function (data) {
            notification('Record updated successfully', 'success');
            $route.reload();
        });
    }
}).controller('addEventController', function ($scope, $uibModalInstance, items, rest, $routeParams, $window, $log) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    var date = new Date();
    var d = date.getDate();
    var m = date.getMonth();
    var y = date.getFullYear();

    if (items) {
        if (items.event_id) {
            $scope.event = items;
            $scope.event.start = dateToformat(items.start);
            $scope.event.end = dateToformat(items.end);
        } else {
            $scope.start = dateToformat(items);
        }
    }

    $scope.ok = function (formId) {
        if (angular.element('#' + formId).valid()) {
            // event update
            if ($scope.event.event_id) {

                $scope.eventData = {
                    title: $scope.event.title,
                    user_id: $window.localStorage.iUserId,
                    updated_by: $window.localStorage.session_iUserId
                };

                if ($scope.eventData.start != "Invalid Date") {
                    $scope.eventData.start = $scope.event.start;
                }

                if ($scope.eventData.end != "Invalid Date") {
                    $scope.eventData.end = $scope.event.end;
                }

                $routeParams.id = $scope.event.event_id;
                rest.path = 'events';
                rest.put($scope.eventData).success(function (data) {
                    $scope.eventList = data;
                    $uibModalInstance.close(data);
                }).error(errorCallback);

            } else {
                // event insert
                $scope.eventData = {
                    start: $scope.event.start,
                    end: $scope.event.end,
                    title: $scope.event.title,
                    user_id: $scope.event.user_id,
                    updated_by: $window.localStorage.session_iUserId
                };


                $scope.eventData.user_id = $window.localStorage.iUserId;
                $scope.eventData.created_by = $window.localStorage.session_iUserId;
                rest.path = 'events';
                rest.post($scope.eventData).success(function (data) {
                    $scope.eventList = data;
                    $uibModalInstance.close(data);
                }).error(errorCallback);
            }
        }
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('workingHourController', function ($scope, $uibModalInstance, items, rest, $routeParams, $window, $log) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    if (items) {
        if (items.wh_id) {
            $scope.data = items;
            var days = JSON.parse(items.wh_data);
            $scope.working = days;
        }
        $scope.for_type = items.for_type;
    }

    var weekday = [
        'monday',
        'tuesday',
        'wednesday',
        'thursday',
        'friday',
        'saturday',
        'sunday'
    ];

    $(document).on("click", "#checkAll", function () {
        if (angular.element(this).prop('checked')) {
            var key = Object.keys($scope.working)[0];
            var workingValue;
            for (var i = 0; i <= 6; i++) {
                if (!key) {
                    workingValue = 1;
                } else {
                    workingValue = $scope.working[key].value;
                }
                if ($scope.working[i] == undefined)
                    $scope.working[i] = {};
                $scope.working[i].value = workingValue;
                $scope.working[i].from = '10:00 AM';
                $scope.working[i].to = '05:00 PM';
            }
        } else {
            $scope.working = {};
        }
    });

    $(document).on("click", "#event_form .form-group input:checkbox", function () {
        var id = angular.element(this).attr('data-value');
        if (!angular.element(this).prop('checked')) {
            delete $scope.working[id];
        } else {
            // debugger;
            var key = Object.keys($scope.working)[0];
            if ($scope.working[id] == undefined)
                $scope.working[id] = {};
            $scope.working[id].value = $scope.working[key].value;
            $scope.working[id].from = $scope.working[key].from;
            $scope.working[id].to = $scope.working[key].to;
        }
    });

    $scope.ok = function (formId) {
        // debugger;
        if (angular.element('#' + formId).valid()) {
            if (items != null) {
                $scope.formData = {

                    wh_data: JSON.stringify($scope.working),
                    for_type: $scope.for_type,
                    user_id: $window.localStorage.iUserId,
                    wh_type_value: new Date()
                };

                $routeParams.id = items.wh_id;
                rest.path = 'workinghour';
                rest.put($scope.formData).success(function (data) {
                    $scope.eventList = data;
                    $uibModalInstance.close(data);
                }).error(errorCallback);
            } else {
                $scope.wh_data = $scope.working;
                $scope.formData = {
                    wh_data: JSON.stringify($scope.wh_data),
                    for_type: $scope.for_type,
                    user_id: $window.localStorage.iUserId,
                    wh_type_value: new Date()
                };

                rest.path = 'workinghour';
                rest.post($scope.formData).success(function (data) {
                    $scope.eventList = data;
                    $uibModalInstance.close(data);
                }).error(errorCallback);
            }
        }
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('generalmsgController', function ($scope, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.generalMsg;

    $scope.bccShow = function () {
        $scope.bccshow = true;
    }
    $scope.ccHideShow = function () {
        angular.element('#ccHideShow').toggleClass('none');
    }
    $scope.bccHideShow = function () {
        angular.element('#bccHideShow').toggleClass('none');
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

    $timeout(function () {
        angular.element('.ng-pristine .btn-toolbar .btn-group:nth-child(4) button:nth-child(2)').remove();
        angular.element('.ng-pristine .btn-toolbar .btn-group:nth-child(4) button:nth-child(3)').remove();
        angular.element('.ng-pristine .btn-toolbar .btn-group:nth-child(4) button:nth-child(4)').remove();
    }, 500);

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                $scope.attachementfile = result;
            });
        $scope.fileAttatchName = file.name;
    };
    rest.path = 'generalMsg';
    rest.get().success(function (data) {
        $scope.cPersonMsg = [];
        $scope.cPersonMsg = data;
        $scope.cPersonMsg.vEmailAddress = $window.localStorage.generalMsg;
        $scope.cPersonMsg.msgEmailSubject = $scope.msgEmailSubject;
        
        $scope.cPersonMsg.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.sign_detail + '</br><img src="' + data.sign_image + '" width="100px"></div>';
    }).error(errorCallback);

    $scope.ok = function (frmId, message) {
        var data = {
            "file": $scope.attachementfile,
            "data": message
        };

        if (angular.element("#" + frmId).valid()) {
            rest.path = 'sendgeneralMsg';
            rest.post(data).success(function (data) {
                notification('Mail send successfully', 'success');
                $window.localStorage.msgSubject = '';
            }).error(errorCallback);
            $timeout(function () {
                $uibModalInstance.close(data);
                $route.reload();
            }, 100)
        }
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('jobResourceMsgController', function ($scope, $log, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.ResourceMsg;

    $scope.bccShow = function () {
        $scope.bccshow = true;
    }
    $scope.ccHideShow = function () {
        angular.element('#ccHideShow').toggleClass('none');
    }
    $scope.bccHideShow = function () {
        angular.element('#bccHideShow').toggleClass('none');
    }
    $timeout(function () {
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(2)').prop('disabled', true);
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(3)').prop('disabled', true);
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(4)').prop('disabled', true);
    }, 500);


    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope).then(function (result) {
            $scope.fileAttatchName = file.name;
            $scope.attachementfile = result;
        });
    };

    rest.path = 'jobResourceMsg/' + $window.localStorage.ResourceMsg;
    rest.get().success(function (data) {
        $scope.cPersonMsg = data.data;
        $scope.cPersonMsg.vUserName = data.data.vUserName;
        if ($rootScope.linguistJobmsg != 'linguistJobmsg')
            $scope.cPersonMsg.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.info.sign_detail + '</br><img src="' + data.info.sign_image + '" width="100px"></div>';
    }).error(errorCallback);

    $scope.ok = function (frmId, message) {
        var data = {
            "file": $scope.attachementfile,
            "data": message
        };
        if (angular.element("#" + frmId).valid()) {
            rest.path = 'sendjobResourceMsg';
            rest.post(data).success(function (data) {
                notification('Mail send successfully', 'success');
            }).error(errorCallback);
            $timeout(function () {
                $uibModalInstance.close(data);
                $route.reload();
            }, 100);
        }
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('jobSendRequestController', function ($scope, $log, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout, items) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.ResourceMsg;

    $scope.cPersonMsg = {};
    $scope.cPersonMsg.subject = 'Job Request';

    $scope.bccShow = function () {
        $scope.bccshow = true;
    }
    $scope.ccHideShow = function () {
        angular.element('#ccHideShow').toggleClass('none');
    }
    $scope.bccHideShow = function () {
        angular.element('#bccHideShow').toggleClass('none');
    }
    $timeout(function () {
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(2)').prop('disabled', true);
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(3)').prop('disabled', true);
        angular.element('.messText .btn-toolbar .btn-group:nth-child(4) button:nth-child(4)').prop('disabled', true);
    }, 500);

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope).then(function (result) {
            $scope.fileAttatchName = file.name;
            $scope.attachementfile = result;
        });
    };

    if($window.localStorage.ResourceMsg){
        rest.path = 'jobResourceMsg/' + $window.localStorage.ResourceMsg;
        rest.get().success(function (data) {
            
            $scope.cPersonMsg2 = data.data;
            //$scope.cPersonMsg.vUserName = data.data.vUserName;
            $scope.cPersonMsg.vEmailAddress = data.data.iUserId; 
            //if ($rootScope.linguistJobmsg != 'linguistJobmsg')
            //$scope.cPersonMsg.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.info.sign_detail + '</br><img src="' + data.info.sign_image + '" width="100px"></div>';
        }).error(errorCallback);
    }    

    $scope.ok = function (frmId, message) {

        var data = {
            "id": items,
            "file": $scope.attachementfile,
            "data": message
        };
        if (angular.element("#" + frmId).valid()) {
            rest.path = 'jobSendRequest';
            rest.post(data).success(function (data) {
                notification('Job Request has been sent successfully', 'success');
            }).error(errorCallback);
            $timeout(function () {
                $uibModalInstance.close(data);
                $route.reload();
            }, 100);
        }
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}).controller('jobAcceptRejectController', function ($scope, $log, rest, $window, $location, $cookieStore, $timeout, $route, $routeParams, $rootScope, fileReader) {
    /*-------Check for login--------*/
    // if ($cookieStore.get('session_iUserId') != undefined) {
    //     $location.path('/dashboard');
    // }

    
    $window.localStorage.setItem("global_dateFormat", 'DD.MM.YYYY'); // Default
    $window.localStorage.setItem("dtSeparator", '.'); // Default

    //getting global dateformat
    rest.path = 'getdateFormatByIuserId/1';
    rest.get().success(function (data) {
        if (data) {
            
            if (data.dateSeparator == '/') {
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            } else if (data.dateSeparator == '.') {
                data.dateformat = data.dateformat.replace(/\//g, data.dateSeparator);
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            } else {
                data.dateformat = data.dateformat.replace(/\//g, data.dateSeparator);
                $window.localStorage.setItem("global_dateFormat", data.dateformat);
                $window.localStorage.setItem("dtSeparator", data.dateSeparator);
            }
        } else {
            $window.localStorage.setItem("global_dateFormat", 'DD/MM/YYYY');
            $window.localStorage.setItem("dtSeparator", '/');
        }
    }).error(errorCallback);

    $scope.backtoPage = function () {
        $location.path('/');
    }

}).controller('projectTeamMsgController', function ($scope, $uibModalInstance, $location, $route, rest, fileReader, $window, $rootScope, $uibModal, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.projectTeamMsg;
    $scope.bccShow = function () {
        $scope.bccshow = true;
    }

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                $scope.attachementfile = result;
            });
    };

    rest.path = 'projectTeamMsg/' + $window.localStorage.projectTeamMsg;
    rest.get().success(function (data) {
        $scope.cPersonMsg = data.data;
        $scope.cPersonMsg.vUserName = data.data.vFirstName + " " + data.data.vLastName
        $scope.cPersonMsg.messageData = '<div>&nbsp;</div><div id="imgData" class="signimgdata">' + data.info.sign_detail + '</br><img src="' + data.info.sign_image + '" width="100px"></div>';
    }).error(errorCallback);


    $scope.ok = function (frmId, message) {
        var data = {
            "file": $scope.attachementfile,
            "data": message
        };
        if (angular.element("#" + frmId).valid()) {
            rest.path = 'sendprojectTeamMsg';
            rest.post(data).success(function (data) {
                $timeout(function () {
                    notification('Mail send successfully', 'success');
                }, 1000);
            }).error(errorCallback);
            $timeout(function () {
                $uibModalInstance.close(data);
                $route.reload();
            }, 100)
        }
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}).controller('jobitemStatusController', function ($scope, $uibModalInstance, items, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.orderID;

    if ($window.localStorage.jobitStatus) {
        $routeParams.id = $window.localStorage.jobitStatus;
        rest.path = 'itemsjobStatusGet/' + $routeParams.id + '/' + $window.localStorage.orderID;
        rest.get().success(function (data) {
            $scope.jobitemStatus = data;
            var appr = [];
            var other = [];
            angular.forEach(data, function (val, i) {
                if (val.item_status == 'Approved') {
                    appr.push(val.item_status);
                }
                if (val.item_status != 'Approved') {
                    other.push(val.item_status);
                }
            });
            $scope.total = appr.length + other.length;
            $scope.divis = 100 / $scope.total;
            $scope.percent = Math.ceil($scope.divis * appr.length);
        }).error(errorCallback);
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('itemOverviewStatusController', function ($scope, $log, $uibModalInstance, items, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.orderID;

    if ($window.localStorage.orderID) {
        rest.path = 'itemsGet/' + $window.localStorage.orderID;
        rest.get().success(function (data) {
            $scope.itemList = data;
            $scope.totalPrice = 0;
            angular.forEach(data, function (val, i) {
                $scope.totalPrice += val.total_amount;
            });
        });

        rest.path = 'orderCurrencyMatch/' + $window.localStorage.orderID;
        rest.get().success(function (data) {
            var cur = JSON.parse(data.currency);
            $scope.itemCurrency = cur[0].currency;
        }).error(errorCallback);
    }

    $scope.deleteUser = function (id) {
        rest.path = 'itemDelete/' + id + '/' + $window.localStorage.orderID;
        rest.get().success(function () {
            $uibModalInstance.dismiss('cancel');
        }).error(errorCallback);
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('itemoverviewController', function ($scope, $log, $location, $route, rest, $uibModal, $rootScope, $uibModalInstance, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    if ($routeParams.id != undefined || $routeParams.id != null || $routeParams.id != "") {
        rest.path = 'itemOverviewGet/' + $routeParams.id;
        rest.get().success(function (data) {
            angular.forEach(data, function (val, i) { })
        }).error(errorCallback);
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
}).controller('chainController', function ($scope, $location, $route, rest, $uibModal, $rootScope, $uibModalInstance, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    if ($window.localStorage.getItem("newjobChainId")) {
        rest.path = 'jobChinnewgetOne/' + $window.localStorage.getItem("newjobChainId");
        rest.get().success(function (data) {
            $scope.nameofCode = data['new_job_number'];
        }).error(errorCallback);

        rest.path = 'jobChinfolllowsget/' + $window.localStorage.job_chain_id;
        rest.get().success(function (data) {
            $scope.newfollows = data;
        }).error(errorCallback);
    }

    $scope.ok = function (formId) {
        var init;
        var fin;
        
        rest.path = 'masterjobGet/' + $scope.chain.insert_job;
        rest.get().success(function (data) {
            
            var a = data.service_name + ' (' + data.job_code + ')';
            var b = a.split("(").pop();
            init = a.indexOf('(');
            fin = a.indexOf(')');
            var code = a.substr(init + 1, fin - init - 1);
            var name = a.substring(0, a.indexOf('('));
            var job_chain_id = $window.localStorage.job_chain_id;
            $scope.job_id = data.job_id;
            $scope.chain.job_id = $scope.job_id;
            $scope.chain.job_chain_id = job_chain_id;
            $scope.chain.jobs = name;
            $scope.chain.job_code = code;
            $scope.chain.new_job_number = $window.localStorage.job_numberId;
            var data = angular.element("#follows").val();
            rest.path = 'jobChansaveJobs';
            rest.post($scope.chain).success(function (data) {
                $uibModalInstance.close();
                $route.reload();
            }).error(errorCallback);
        }).error(errorCallback);
    }

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('wizardCtrl', function ($cookieStore, fileReader, $timeout, $scope, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.setItem("parentId", " ");
    $window.localStorage.getItem("ShowuserName", "");
    $window.localStorage.setItem("clientpricelistdataId", " ");

    $timeout(function () {
        if ($window.localStorage.iUserId.length > 0) {
            $scope.redirectToClientViewId = '#/viewdirect/' + $window.localStorage.iUserId;
        } else {
            $scope.redirectToClientViewId = '#/client/1';
        }
    }, 100);

    $timeout(function () {
        $scope.UpdateClientName = $window.localStorage.getItem("ShowuserName");
        $scope.showEditedByName = false;
        if ($routeParams.id) {
            $scope.showEditedByName = true;
        }
    }, 500);


    $scope.comapanyBranchError = function () {
        angular.element('.comapanyBranch').remove();
    }

    angular.element('.help-block').css('display', 'none');

    if ($routeParams.id) {
        $window.localStorage.setItem("contactclientId", $routeParams.id);
    }

    $scope.user_name = $window.localStorage.getItem("ShowuserName");
    $scope.invoiceClassget = function (classname) {
        $scope.invoiceC = $window.document.getElementsByClassName(classname).length;
        if ($scope.invoiceC == 2) {
            $scope.invoice = true;
        }
    }


    $scope.clientNotes = function () {
        var clientnote = $scope.info.tMemo;
        if ($window.localStorage.clientnotice != clientnote && clientnote != undefined) {
            notification(clientnote, 'information');
        }
    }

    $scope.removeinvoice = function (id) {
        var invoiceLength = angular.element("[id^=invoiceCou]").length - 1;
        if (invoiceLength == id) {
            angular.element("#invoiceCou" + id).remove();
        } else {
            notification("Please delete from last record", "warning");
        }
    }
    if ($window.localStorage.iUserId != '' && $window.localStorage.iUserId != undefined) {
        $routeParams.id = $window.localStorage.iUserId;
    }

    // $routeParams.id = 1;
    if ($routeParams.id != '' && $routeParams.id != undefined) {
        $window.localStorage.iUserId = $routeParams.id;
        rest.path = 'client';
        rest.model().success(function (data) {
            $scope.imgshow = true;
            $scope.isNewClient = false;
            $scope.info = data;
            
            //Address Fields
            $scope.vCity1 = JSON.parse(data.address1Detail)[1].value;
            $scope.state1 = JSON.parse(data.address1Detail)[2].value;
            $scope.country1 = JSON.parse(data.address1Detail)[3].value;
            $scope.zipcode1 = JSON.parse(data.address1Detail)[4].value;
            $scope.timezone1 = JSON.parse(data.address1Detail)[5].value;
            //Address Fields

            $window.localStorage.clientnamec = $scope.info.vUserName;
            $window.localStorage.clientnotice = $scope.info.tMemo;
            $window.localStorage.setItem("priceListClientId", $scope.info.iClientId);
            angular.element('#vProjectCoordinator').select2('data', { id: $scope.info.vProjectCoordinator });
            angular.element('#vProjectManager').select2('data', { id: $scope.info.vProjectManager });
            angular.element('#vQASpecialist').select2('data', { id: $scope.info.vQASpecialist });
            angular.element('#currencyCode').select2('data', { text: $scope.info.client_currency.split(',')[0] });
            var flagTitle = JSON.parse(data.vPhone).countryTitle;
            var flagClass = JSON.parse(data.vPhone).countryFlagClass;

            $timeout(function () {
                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').prop('title', flagTitle);
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').prop('class', flagClass);
            }, 500);

            $scope.info.vPhone = '+' + flagTitle.split('+')[1] + JSON.parse(data.vPhone).mobileNumber;
            $scope.currentUserName = $window.localStorage.currentUserName = data.vUserName;

            if (data.address1Detail) {
                angular.forEach(JSON.parse(data.address1Detail), function (val, i) {
                    angular.element('#' + val.id).val(val.value);
                });
            }

            if (data.address2Detail) {
                angular.forEach(JSON.parse(data.address2Detail), function (val, i) {
                    angular.element('#' + val.id).val(val.value);
                });
            }

            if (data.Invoice) {
                angular.forEach(JSON.parse(data.Invoice), function (val, i) {
                    angular.element('#' + val.selectInvoice).val(val.invoice);
                });

                $scope.email = JSON.parse(data.Invoice);
                for (var k = 0; k < $scope.email.length; k++) {
                    var Counter = k + 1;
                }

                if (Counter != " ") {
                    $scope.inputCounter = Counter;
                } else {
                    $scope.inputCounter = 1;
                }
            }

            $scope.address1 = JSON.parse(data.address1Detail);
            $scope.address2 = JSON.parse(data.address2Detail);
        }).error(errorCallback);
    } else {
        $scope.info = {};
        $scope.isNewClient = true;
        var currentdate = new Date();
        rest.path = "clientProfileNumber/1";
        rest.get().success(function (data) {
            $scope.info.vClientNumber = pad(data, 3);
            $scope.displayCreatorName = $window.localStorage.getItem("session_vUserName");
            $scope.info.created_id = $window.localStorage.getItem("session_iUserId");
        });
        $scope.info.dtCreationDate = currentdate.getDate() + "/" +
            (currentdate.getMonth() + 1) + "/" +
            currentdate.getFullYear() + " " +
            currentdate.getHours() + ":" +
            currentdate.getMinutes() + ":" +
            currentdate.getSeconds();
    }
    if ($routeParams.id) {
        $scope.info = {};
        $scope.info.updatedBy_id = $window.localStorage.getItem("session_iUserId");
        $scope.info.updated_id = $routeParams.id;
        rest.path = 'clientBasicIdCheck';
        rest.post($scope.info).success(function (data) {
            $window.localStorage.setItem("ShowuserName", data.UpdatedBy_name);
            $window.localStorage.setItem("session_iUpdatedBasicClientId", data.UpdatedBy_id);
        }).error(errorCallback);
    }

    $scope.uType = $window.localStorage.userType;
    $scope.currentUserName = $window.localStorage.currentUserName;

    $scope.customerType = [{
        name: 'Direct Customer',
        value: 'Direct Customer'
    }, {
        name: 'Direct/Indirect Customer',
        value: 'Direct/Indirect Customer'
    }, {
        name: 'indirect customer',
        valumme: 'indirect customer'
    }];

    $scope.getFile = function (file) {
        fileReader.readAsDataUrl(file, $scope)
            .then(function (result) {
                if (file.type == 'image/jpeg' || file.type == 'image/jpg' || file.type == 'image/png' || file.type == 'image/gif') {
                    $scope.imgshow = false;
                    $scope.imageSrc = result;
                    $scope.info.vProfilePic = true;
                } else {
                    notification("Please select image", "error");
                }
            });
    };

    $scope.copytoship = function () {
        if ($scope.address1 != undefined && $scope.address1 != '') {
            $scope.address2 = $scope.address1;
            $scope.info.vAddress2 = $scope.info.vAddress1;
            angular.forEach($scope.address1, function (val, i) {
                angular.element('#address2_' + val.id).val(val.value);
            });
        }
    };

    $scope.checkemailaddress = function (data) {
        rest.path = 'checkclient';
        rest.post(data).success(function (data) { }).error(errorCallback);
    };



    $scope.inputCounter = [];
    $scope.inputCounter = 1;


    $scope.name = 'Please try entering something and click Add button';

    $scope.saveClientProfile = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.info.iClientId) {
                $scope.info.image = $scope.imageSrc;
                var p = angular.element('#userphone').val();
                $scope.info.vPhone = p;
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                var invoiceDatatable = [];
                var invPus = [];

                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                for (var j = 0; j < angular.element("[id^=selectEmail_opetion_]").length; j++) {
                    var a = angular.element("#selectEmail_opetion_" + j).val();
                    var b = angular.element("#selectEmail_invoice_" + j).val();
                    if (a == '--Select Invoice--' && b != '') {
                        notification('Please select email option', 'warning');
                        angular.element("#selectEmail_opetion_" + j).focus().select();
                        return false;
                    }
                    if (a && b) {
                        var invPus = true;
                        invoiceDatatable.push({
                            invoiceid: a,
                            invoiceValue: b
                        });
                    } else {
                        var invPus = false;
                    }
                }

                if (invPus == true) {
                    $scope.info.invoice = JSON.stringify(invoiceDatatable);
                } else {
                    $scope.info.invoice = " ";
                }
                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').attr('class');

                var mobile = angular.element('#userphone').val();
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }

                $scope.info.vPhone = JSON.stringify(countryObj);

                $scope.modified_id = $cookieStore.get('session_iUserId');
                $scope.info.modified_id = $scope.modified_id;
                $scope.info.address1Detail = JSON.stringify(address1);
                $scope.info.address2Detail = JSON.stringify(address2);

                // ---------address over -----------------//

                $scope.updatedBy_id = $window.localStorage.getItem("session_iUserId");
                $scope.Edited_id = $window.localStorage.getItem("session_iUpdatedBasicClientId");

                if ($scope.Edited_id != $scope.updatedBy_id) {
                    $scope.info.iEditedBy = $window.localStorage.getItem("session_iUpdatedBasicClientId");
                } else {
                    $scope.info.iEditedBy = 0;
                }

                $scope.info.tPoInfo = $scope.info.vUserName.split(' ').join('-').toLowerCase() + '-' + pad($scope.info.vClientNumber, 3)

                //return;
                rest.path = 'clientsave';
                rest.put($scope.info).success(function (data) {
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = $scope.info.iClientId;
                    $scope.logMaster.log_title = $scope.info.vUserName;
                    $scope.logMaster.log_type = "update";
                    $scope.logMaster.log_status = "direct_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });
                    //log file end
                    $location.path('/contact-person');
                    $route.reload();
                }).error(errorCallback);
            } else {
                if ($scope.imageSrc) {
                    $scope.info.image = $scope.imageSrc;
                }

                var p = angular.element('#userphone').val();
                $scope.info.vPhone = p;

                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                var invoiceDatatable = [];
                var invPus = [];
                for (var l = 0; l < angular.element("[id^=selectEmail_opetion_]").length; l++) {
                    var a = angular.element("#selectEmail_opetion_" + l).val();
                    var b = angular.element("#selectEmail_invoice_" + l).val();
                    if (a == '--Select Invoice--' && b != '') {
                        notification('Please select email option', 'warning');
                        angular.element("#selectEmail_opetion_" + j).focus().select();
                        return false;
                    }
                    if (a && b) {
                        var invPus = true;
                        invoiceDatatable.push({
                            invoiceid: a,
                            invoiceValue: b
                        });
                    } else {
                        var invPus = false;
                    }
                }

                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                if (invPus == true) {
                    $scope.info.invoice = JSON.stringify(invoiceDatatable);
                } else {
                    $scope.info.invoice = " ";
                }
                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').attr('class');

                var mobile = angular.element('#userphone').val();
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }

                $scope.info.vPhone = JSON.stringify(countryObj);
                $scope.created_id = $cookieStore.get('session_iUserId');
                $scope.info.created_id = $scope.created_id;
                $scope.info.address1Detail = JSON.stringify(address1);
                $scope.info.address2Detail = JSON.stringify(address2);

                $scope.info.vCodeRights = $scope.info.vCodeRights;
                $scope.info.tPoInfo = $scope.info.vUserName.split(' ').join('-').toLowerCase() + '-' + pad($scope.info.vClientNumber, 3)

                // ---------address over -----------------//
                rest.path = 'clientsave';
                $scope.info.vClientNumber = $scope.info.vClientNumber.replace(/^0+/, '');

                rest.post($scope.info).success(function (data) {
                    $window.localStorage.iUserId = data.iClientId;
                    //log file start 
                    $scope.logMaster = {};
                    $scope.logMaster.log_type_id = data.iClientId;
                    $scope.logMaster.log_title = $scope.info.vUserName;
                    $scope.logMaster.log_type = "add";
                    $scope.logMaster.log_status = "direct_cli";
                    $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                    rest.path = "saveLog";
                    rest.post($scope.logMaster).success(function (data) { });

                    $window.localStorage.setItem("contactclientId", data.iClientId);
                    $window.localStorage.setItem("priceListClientId", data.iClientId);
                    $location.path('/contact-person');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteInvoice = function (id) {
        if (angular.element(".test-count").length != 1)
            angular.element("#test-test").remove();
    }

    $scope.directClientFilemanager = function (id, frmId) {
        if (angular.element('#' + frmId).valid()) {
            if ($scope.info.iClientId) {
                $scope.info.image = $scope.imageSrc;
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                var invoiceDatatable = [];
                var invPus = [];

                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                for (var j = 0; j < angular.element("[id^=selectEmail_opetion_]").length; j++) {
                    var a = angular.element("#selectEmail_opetion_" + j).val();
                    var b = angular.element("#selectEmail_invoice_" + j).val();
                    if (a && b) {
                        var invPus = true;
                        invoiceDatatable.push({
                            invoiceid: a,
                            invoiceValue: b
                        });
                    } else {
                        var invPus = false;
                    }
                }

                if (invPus == true) {
                    $scope.info.invoice = JSON.stringify(invoiceDatatable);
                } else {
                    $scope.info.invoice = " ";
                }
                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').attr('class');

                var mobile = angular.element('#userphone').val();
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }
                $scope.info.vPhone = JSON.stringify(countryObj);
                $scope.modified_id = $cookieStore.get('session_iUserId');
                $scope.info.modified_id = $scope.modified_id;
                $scope.info.address1Detail = JSON.stringify(address1);
                $scope.info.address2Detail = JSON.stringify(address2);
                // ---------address over -----------------//

                $scope.info.vCodeRights = $scope.info.vCodeRights
                $scope.updatedBy_id = $window.localStorage.getItem("session_iUserId");
                $scope.Edited_id = $window.localStorage.getItem("session_iUpdatedBasicClientId");

                if ($scope.Edited_id != $scope.updatedBy_id) {
                    $scope.info.iEditedBy = $window.localStorage.getItem("session_iUpdatedBasicClientId");
                } else {
                    $scope.info.iEditedBy = 0;
                }
                $scope.info.tPoInfo = $scope.info.vUserName.split(' ').join('-').toLowerCase() + '-' + pad($scope.info.vClientNumber, 3)
                rest.path = 'clientsave';
                rest.put($scope.info).success(function (data) {
                    closeWindows();
                    var clientPopup = $window.open('#/filemanage/client', "popup", "width=1000,height=650");
                    clientPopup.addEventListener("beforeunload", function () {
                        localStorage['parentId'] = ' ';
                        return false;
                    }, false);
                    openWindows.push(clientPopup);
                    $route.reload();
                }).error(errorCallback);
            } else {

                if ($scope.imageSrc) {
                    $scope.info.image = $scope.imageSrc;
                }
                // --------address only -----------------//
                var address1 = [];
                var address2 = [];
                var invoiceDatatable = [];
                var invPus = [];
                for (var l = 0; l < angular.element("[id^=selectEmail_opetion_]").length; l++) {
                    var a = angular.element("#selectEmail_opetion_" + l).val();
                    var b = angular.element("#selectEmail_invoice_" + l).val();
                    if (a && b) {
                        var invPus = true;
                        invoiceDatatable.push({
                            invoiceid: a,
                            invoiceValue: b
                        });
                    } else {
                        var invPus = false;
                    }
                }

                angular.element("[id^=address1_]").each(function (i, val) {
                    address1.push({
                        id: val.id,
                        value: val.value
                    });
                });

                angular.element("[id^=address2_]").each(function (i, val) {
                    address2.push({
                        id: val.id,
                        value: val.value
                    });
                });

                if (invPus == true) {
                    $scope.info.invoice = JSON.stringify(invoiceDatatable);
                } else {
                    $scope.info.invoice = " ";
                }

                var countryCodeData = angular.element('#userphone').parent().find('.selected-flag').attr('title');
                var countryClass = angular.element('#userphone').parent().find('.selected-flag').find('.iti-flag').attr('class');

                var mobile = angular.element('#userphone').val();
                var countryObj = {
                    "countryTitle": countryCodeData,
                    "countryFlagClass": countryClass,
                    "mobileNumber": mobile
                }
                $scope.info.vPhone = JSON.stringify(countryObj);
                $scope.created_id = $cookieStore.get('session_iUserId');
                $scope.info.created_id = $scope.created_id;
                $scope.info.address1Detail = JSON.stringify(address1);
                $scope.info.address2Detail = JSON.stringify(address2);
                $scope.info.vCodeRights = $scope.info.vCodeRights;
                $scope.info.tPoInfo = $scope.info.vUserName.split(' ').join('-').toLowerCase() + '-' + pad($scope.info.vClientNumber, 3)
                // ---------address over -----------------//
                rest.path = 'clientsave';
                rest.post($scope.info).success(function (data) {
                    $window.localStorage.iUserId = data.iClientId;
                    $window.localStorage.setItem("contactclientId", data.iClientId);
                    $window.localStorage.setItem("priceListClientId", data.iClientId);
                    var clientPopup = $window.open('#/filemanage/client', "popup", "width=1000,height=650");
                    clientPopup.addEventListener("beforeunload", function () {
                        localStorage['parentId'] = ' ';
                        return false;
                    }, false);
                    $route.reload();
                }).error(errorCallback);
            }
        } else {
            notification('Please fill information.', 'warning');
        }

    }
    $scope.workingHour = function (id, table) {
        $routeParams.messageId = id;
        $window.localStorage.setItem("messageClientId", id);
        $routeParams.messageTable = table;
        $window.localStorage.setItem("messageClientTable", table);
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/message.html',
            controller: 'messageController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            // debugger;
            $scope.selected = selectedItem;
            $route.reload();
        });
    };
}).controller('projectjobstatusController', function ($scope, $log, $location, $route, rest, $routeParams, $window, $uibModal) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.uId = $window.localStorage.getItem("session_iUserId");
    $window.localStorage.clientnamec = "";

    //export to excel
    $scope.exportData = function () {
        var count = 0;
        for (var i = 1; i < angular.element('[id^=orderCheckData]').length + 10; i++) {
            if ($("#orderCheck" + i).prop('checked') == true) {
                count++;
            }
        }
        if (count == 0) {
            notification('Please select record to export', 'information');
        }
        if (count > 0) {
            for (var i = 1; i < angular.element('[id^=orderCheckData]').length + 10; i++) {
                if ($("#orderCheck" + i).prop('checked') == true) {
                    $("#Export_" + i).show()
                } else {
                    $("#Export_" + i).hide()
                }
            }
            var blob = new Blob([document.getElementById('exportable').innerHTML], {
                type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
            });
            saveAs(blob, "Jobs-status-report.xls");
            $scope.jobstatusReportsearch();
        }
    };

    //current year get
    $scope.date = new Date();
    var year = $scope.date.getFullYear();
    $scope.Currentyear = year.toString().substr(2, 2);

    //Job report search start
    $scope.jobstatusReportsearch = function (frmId, eID) {
        if ($scope.jobReport == undefined || $scope.jobReport == null || $scope.jobReport == "") {
            notification('Please Select option', 'information');
        } else {
            rest.path = 'statusJobReportFind';
            rest.get().success(function (data) {
                $scope.statusResult = data;
                angular.forEach($scope.statusResult, function (val, i) {
                    if (val.ItemLanguage) {
                        val.ItemLanguage = val.ItemLanguage.split('>')[0].trim().substring(0, 3).toUpperCase() + ' > ' + val.ItemLanguage.split('>')[1].trim().substring(0, 3).toUpperCase();
                    }
                });
            })
            scrollToId(eID);
        }
    }

    $scope.reseteSearch = function (frmId) {
        $route.reload();
    }

    //serch data action
    $scope.statucOrderAction = function (action) {
        switch (action) {
            case "Remove selection":
                $scope.jobStatus = false;
                break;
            case "Export to excel":
                $scope.jobStatus = false;
                break;
            case "Select all":
                $scope.jobStatus = false;
                break;
        }
    }

    //search data action
    $scope.statusAction = function (action) {
        switch (action) {
            case "Remove selection":
                bootbox.confirm("Are you sure you want to delete?", function (result) {
                    for (var i = 0; i < angular.element('[id^=orderCheckData]').length; i++) {
                        var jobselect = angular.element('#orderCheck' + i).is(':checked') ? 'true' : 'false';
                        if (jobselect == 'true') {
                            var jobId = angular.element('#orderCheckData' + i).val();
                            if (result == true) {
                                rest.path = 'jobsearchStatusDelete/' + jobId;
                                rest.delete().success(function (data) {
                                    $route.reload();
                                }).error(errorCallback);
                            }
                        }
                    }
                });
                break;
            case "Export to excel":
                var count = 0;
                for (var i = 1; i < angular.element('[id^=orderCheckData]').length + 10; i++) {
                    if ($("#orderCheck" + i).prop('checked') == true) {
                        count++;
                    }
                }
                if (count == 0) {
                    notification('Please select record to export', 'information');
                }
                if (count > 0) {
                    for (var i = 1; i < angular.element('[id^=orderCheckData]').length + 10; i++) {
                        if ($("#orderCheck" + i).prop('checked') == true) {
                            $("#Export_" + i).show()
                        } else {
                            $("#Export_" + i).hide()
                        }
                    }
                    var blob = new Blob([document.getElementById('exportable').innerHTML], {
                        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                    });
                    saveAs(blob, "Jobs-status-report.xls");
                    $scope.jobstatusReportsearch();
                }
                break;
            case "Select all":
                $scope.checkdata = "ordercheck";
                break;
        }
    }

    //remove job search 
    $scope.clearCode = function (frmId, action) {
        switch (action) {
            case "jobStatus":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.jobStatus = '';
                    angular.element('#jobStatus1').select2('val', '');
                    $scope.statusResult = {};
                    $route.reload();
                }
                break;
        }
    }

}).controller('freelanceInvoiceController', function ($scope, $log, $timeout, $window, rest, $location, $rootScope, $cookieStore, $uibModal, $route, $filter, $q, invoiceDuePeriodDays) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    $scope.search = function (search) {
        if (search) {
            rest.path = 'freelanceJob/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                $scope.InvoiceResult = data;
                $scope.InvoiceResult = data.filter(function (el) {
                    return el.item_status == 'Approved' || el.item_status == 'Overdue';
                });
                $scope.searchPonumber = search;
                var obj = [];
                obj.push({
                    'InvoiceList': $scope.InvoiceResult,
                    'searchPonumber': $scope.searchPonumber
                });
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/invoiceCreatePopup.html',
                    controller: 'invoiceCreatePopupCtrl',
                    size: '',
                    resolve: {
                        items: function () {
                            return obj;
                        }
                    }
                });
            }).error(errorCallback);
        } else {
            notification('Please enter job number.', 'warning');
        }
        $scope.jobId = "";
    }

    $scope.invoiceChange = function (data, companyCode) {
        // $log.log(data+ ' ' +companyCode);
    }

    $scope.invoicebuttonShow = function (id) {
        $scope.jobId = id;
    }

    $scope.addInvoice = function (data) {
        var company = "";
        var flag = 0;
        var array = [];

        angular.forEach(data, function (val, i) {
            if (val.SELECTED == 1) {
                if (!company) {
                    company = val.company_code;
                }
                if (val.company_code != company) {
                    flag = 1;
                } else {
                    array.push(val.job_summmeryId);
                }
            }
        });

        if (flag != 1 && array.length) {
            $cookieStore.put('invoiceJobId', array);
            $location.path('/invoice-create');
        } else {
            if ($scope.InvoiceResult != undefined && flag != 1) {
                notification("Pelase select job", "warning");
            } else {
                notification("You cannot add two different company invoice", "warning");
            }
        }

    }

    //Display invoice 
    $scope.viewInvoice = function (type) {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/invoiceall_view.html',
            controller: 'invoiceViewController',
            size: '',
            width: 1000,
            resolve: {
                items: function () {
                    return type;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
            $route.reload();
        });
    }

    $scope.getAllInvoice = function () {
        rest.path = "getAllInvoiceByUserId/save/" + $window.localStorage.getItem("session_iUserId");
        rest.get().success(function (invoices) {
            $scope.invoiceUnpaid = [];
            $scope.invoiceCompleted = [];
            angular.forEach(invoices, function (val, i) {
                if (val.invoice_status == 'Complete') {
                    $scope.invoiceCompleted.push(val);
                } else {
                    $scope.invoiceUnpaid.push(val);
                }
            });
        }).error(errorCallback);
    }
    $scope.getAllInvoice();

    $scope.dateToday = new Date();
    //----- ****** Start Invoice Tabs Linguist    ****** --------//
    $scope.invcList_tabFilter = function () {
        var deferred = $q.defer();

        $scope.allInvcData = [];
        $scope.openInvc = [];
        $scope.approvedInvc = [];
        $scope.completeInvc = [];
        $scope.partPaidInvc = [];
        $scope.irrecoverableInvc = [];
        $scope.cancelledInvc = [];
        $scope.overdueInvc = [];
        // -- Invoice count -- //
        $scope.openInvcCount = 0;
        $scope.approvedInvcCount = 0;
        $scope.completedInvcCount = 0;
        $scope.partPaidInvcCount = 0;
        $scope.noRecoverInvcCount = 0;
        $scope.cancelledInvcCount = 0;
        $scope.overdueInvcCount = 0;
        
        rest.path = "getAllInvoiceByUserId/save/" + $window.localStorage.getItem("session_iUserId");
        rest.get().success(function (data) {
            $scope.clientInvoiceListData = data;
            
            angular.forEach($scope.clientInvoiceListData, function (val, i) {
                let paid_date = $filter('globalDtFormat')(val.paid_date);
                val.paid_date = paid_date ? paid_date : '-'; 
                
                let invoicePeriod = val.invoice_no_of_days ? val.invoice_no_of_days : invoiceDuePeriodDays
                var invoice_duedate = TodayAfterNumberOfDays(val.created_date, invoicePeriod);
                val.invoice_duedate = invoice_duedate;
                var InDuedate = new Date(invoice_duedate); 
                
                val.freelance_currency = val.freelance_currency ? val.freelance_currency.split(',')[0] : 'EUR'; 
                
                $scope.allInvcData.push(val);
                if (val.invoice_status == 'Open') {
                    $scope.openInvcCount++;
                    $scope.openInvc.push(val);
                }
                if (val.is_approved == 1 && val.invoice_status != 'Complete') {
                    $scope.approvedInvcCount++;
                    $scope.approvedInvc.push(val);
                }
                if (val.invoice_status == 'Complete') {
                    $scope.completedInvcCount++;
                    $scope.completeInvc.push(val);
                }
                // if (val.invoice_status == 'Part Paid') {
                //     $scope.partPaidInvcCount++;
                //     $scope.partPaidInvc.push(val);
                // } 
                if (val.invoice_status == 'Cancel') {
                    $scope.cancelledInvcCount++;
                    $scope.cancelledInvc.push(val);
                }
                if(new Date(InDuedate) < $scope.dateToday && !['Paid','Complete'].includes(val.invoice_status) ){
                    $scope.overdueInvcCount++ 
                    $scope.overdueInvc.push(val);
                }
                //Due date counts for Invoice
            });
            //deferred.resolve($scope.openInvc);
            //deferred.resolve($scope.completeInvc);
            //deferred.resolve($scope.partPaidInvc);
            //deferred.resolve($scope.irrecoverableInvc);
            deferred.resolve($scope.allInvcData);

        }).error(function () {
            deferred.reject();
        });    

        return deferred.promise;
    };

    $scope.invcStatusRecord = function (invcStatus) {
        
        if (invcStatus) {
            $scope.invcstatusFilter = invcStatus;
            //$scope.invoiceListAll = [];
            $scope.showDataLoaderJob = true;
        } else {
            $scope.invcstatusFilter = 'all';
            //$scope.invcstatusFilter = '';
        }
        $scope.invoiceActive = $scope.invoiceActive == invcStatus ? '' : invcStatus;
        // Uncheck checkbox
        $('input[id^=checkAll]:checkbox').removeAttr('checked');
        // $scope.invcList_tabFilter()
        // .then(function (invoicePromiseData) {
                $scope.allInvcCount = $scope.allInvcData.length;
                /* All Invoice list for widget */
                switch ($scope.invcstatusFilter) {
                    case "all":
                        $scope.invoiceListAll = $scope.allInvcData;
                        break;
                    case "Open":
                        $scope.invoiceListAll = $scope.openInvc;
                        break;
                    case "Approved":
                        $scope.invoiceListAll = $scope.approvedInvc;
                        break;   
                    case "Completed":
                        $scope.invoiceListAll = $scope.completeInvc;
                        break;
                    // case "Part Paid":
                    //     $scope.invoiceListAll = $scope.partPaidInvc;
                    //     break;
                    case "Overdue":
                        $scope.invoiceListAll = $scope.overdueInvc;
                        break;    
                    case "Cancelled":
                        $scope.invoiceListAll = $scope.cancelledInvc;
                        break;            
                }
                // if ($scope.invcstatusFilter == 'all') {
                //     $scope.invoiceListAll = $scope.allInvcData;
                // }
                //const sortedActivities = jobOverDue.sort((a, b) => new Date(a.due_date) - new Date(b.due_date) )
                if ($scope.invoiceListAll) {
                    $scope.invoiceListAll = $scope.invoiceListAll;
                }
                /* Start Upcoming Due Invoice - widgetBox */
                $scope.showDataLoaderJob = false;
                /* End */
        //})    
    };

    $scope.invcList_tabFilter()
        .then(function (invoicePromiseData) {
            $scope.invcStatusRecord('all');
    });
    // ****** END invioce TABS ******* //

}).controller('invoiceCreatePopupCtrl', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $uibModal, $uibModalInstance, $route, items) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.InvoiceResult = items[0].InvoiceList;
    $scope.searchPonumber = items[0].searchPonumber;

    $scope.addInvoice = function (data) {
        
        var company = "";
        var flag = 0;
        var array = [];

        angular.forEach(data, function (val, i) {
            if (val.SELECTED == 1) {
                if (!company) {
                    company = val.company_code;
                }
                if (val.company_code != company) {
                    flag = 1;
                } else {
                    array.push(val.job_summmeryId);
                }
            }
        });

        if (flag != 1 && array.length) {
            $cookieStore.put('invoiceJobId', array);
            $location.path('/invoice-create');
            $scope.cancel();
        } else {
            if ($scope.InvoiceResult != undefined && flag != 1) {
                notification("Pelase select job to create invoice.", "warning");
            } else {
                notification("You cannot add two different company invoice", "warning");
            }
        }

    }
    $scope.cancel = function () {
        $uibModalInstance.close();
    }
}).controller('invoiceCreateJobsController', function ($scope, $routeParams, $log, $timeout, $window, rest, $location, $rootScope, $cookieStore, $uibModal, $route) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    
    $scope.resourceDefault = $window.localStorage.getItem("session_iUserId");
    $scope.resourceId = '0';
    
    $scope.changeResource = function(resourceId){
        
        $scope.resourceId = $scope.userRight == 2 ? $scope.resourceDefault : resourceId.split(',').pop();
        
        $scope.InvoiceResult = [];
        rest.path = 'freelanceJob/' + $scope.resourceId;
        rest.get().success(function (data) {
            $scope.InvoiceResult = data;
            $scope.InvoiceResult = data.filter(function (el) {
                    el.freelance_currency = el.freelance_currency ? el.freelance_currency.split(',')[0] : 'EUR';
                    let jbStatus = el.item_status.toLowerCase();
                    return jbStatus == 'approved' || jbStatus == 'invoice ready' || jbStatus == 'overdue';
                });
            
        });        
    }
    $scope.changeResource('0');
    
    $scope.addInvoice = function (data) {
        
        var company = "";
        var flag = 0;
        var array = [];

        angular.forEach(data, function (val, i) {
            if (val.SELECTED == 1) {
                if (!company) {
                    company = val.company_code;
                }
                if (val.company_code != company) {
                    flag = 1;
                } else {
                    array.push(val.job_summmeryId);
                }
            }
        });

        if (flag != 1 && array.length) {
            $cookieStore.put('invoiceJobId', array);
            $location.path('/invoice-create');
        } else {
            if ($scope.InvoiceResult != undefined && flag != 1) {
                notification("Pelase select job to create invoice.", "warning");
            } else {
                notification("You cannot add two different company invoice", "warning");
            }
        }
    }

}).controller('clientInvoiceController', function ($scope, $routeParams, $log, $timeout, $window, rest, $location, $rootScope, $cookieStore, $uibModal, $route, $q) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    $scope.search = function (search) {
        if (search) {
            rest.path = "dashboardProjectsOrderGet/" + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                //$scope.InvoiceResult = data;
                $scope.InvoiceResult = data.filter(function (el) {
                    return el.itemStatus == 'Approved';
                });
                
                $scope.searchOrderNumber = search;
                var obj = [];
                obj.push({
                    'InvoiceList': $scope.InvoiceResult,
                    'searchOrderNumber': $scope.searchOrderNumber
                });
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/clientInvoiceCreatePopup.html',
                    controller: 'clientInvoiceCreatePopupCtrl',
                    size: '',
                    resolve: {
                        items: function () {
                            return obj;
                        }
                    }
                });
            }).error(errorCallback);
        } else {
            notification('Please enter Project / Scoop number.', 'warning');
        }
        $scope.jobId = "";
    }

    $scope.invoiceChange = function (data, companyCode) {
        // $log.log(data+ ' ' +companyCode);
    }

    $scope.invoicebuttonShow = function (id) {
        $scope.jobId = id;
    }

    $scope.addInvoice = function (data) {
        var client = "";
        var flag = 0;
        var array = [];

        angular.forEach(data, function (val, i) {
            if (val.SELECTED == 1) {
                if (!client) {
                    client = val.contactName;
                }
                if (val.contactName != client) {
                    flag = 1;
                } else {
                    array.push(val.itemId);
                }
            }
        });

        if (flag != 1 && array.length) {
            $cookieStore.put('invoiceScoopId', array);
            $location.path('/client-invoice-create');
        } else {
            if ($scope.InvoiceResult != undefined && flag != 1) {
                notification("Pelase select Project Scoop", "warning");
            } else {
                notification("You cannot add two different client invoice", "warning");
            }
        }

    }

    //Display invoice 
    $scope.viewInvoice = function (type) {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/invoiceClientall_view.html',
            controller: 'clientInvoiceViewPopupController',
            size: '',
            width: 1000,
            resolve: {
                items: function () {
                    return type;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
            $route.reload();
        });
    }

    $scope.invoicePeriod = 30;
    $scope.getInvoicePeriod = function (id) {
        rest.path = "getOneInvoicePeriod/" + 1;
        rest.get().success(function (data) {
            $scope.invoicePeriod = data;
            $scope.invoicePeriod = $scope.invoicePeriod.number_of_days ? $scope.invoicePeriod.number_of_days : 30;
            
        }).error(errorCallback);
    }
    $scope.getInvoicePeriod();

    $scope.scoopId = [];
    var allInvoiceListArr = [];
    $scope.getAllInvoice = function () {
        rest.path = "getAllInvoiceClient/save/" + 1;
        rest.get().success(function (invoices) {
            $scope.getAllInvoice = invoices;
            allInvoiceListArr = invoices;
            
            //get of invoice due period
            $scope.invoiceUnpaid = [];
            $scope.invoiceCompleted = [];
            angular.forEach(invoices, function (val, i) {
                var invoice_duedate = TodayAfterNumberOfDays(val.invoice_date, $scope.invoicePeriod);

                val.client_currency = val.client_currency ? val.client_currency.split(',')[0] : 'EUR'; 
                //if(invoice_duedate)
                    //val.invoice_duedate = invoice_duedate;
                if (val.invoice_status == 'Complete') {
                    $scope.invoiceCompleted.push(val);
                    //var ckey = $scope.invoiceUnpaid.length;
                    var ckey = $scope.invoiceCompleted.length;
                    if (ckey > 0)
                        $scope.invoiceCompleted[ckey - 1].invoice_duedate = invoice_duedate;
                } else {
                    $scope.invoiceUnpaid.push(val);
                    var ukey = $scope.invoiceUnpaid.length;
                    if (ukey > 0)
                        $scope.invoiceUnpaid[ukey - 1].invoice_duedate = invoice_duedate;
                }
            });
        }).error(errorCallback);
    }
    $scope.getAllInvoice();

    $scope.dateToday = new Date();
    //----- ****** Start Invoice Tabs    ****** --------//
    $scope.invcList_tabFilter = function () {
        var deferred = $q.defer();

        $scope.allInvcData = [];
        $scope.openInvc = [];
        $scope.completeInvc = [];
        $scope.partPaidInvc = [];
        $scope.irrecoverableInvc = [];
        $scope.cancelledInvc = [];
        $scope.overdueInvc = [];
        // -- Invoice count -- //
        $scope.openInvcCount = 0;
        $scope.completedInvcCount = 0;
        $scope.partPaidInvcCount = 0;
        $scope.noRecoverInvcCount = 0;
        $scope.cancelledInvcCount = 0;
        $scope.overdueInvcCount = 0;
        
        rest.path = "getAllInvoiceClient/save/" + 1;
        rest.get().success(function (data) {
            $scope.clientInvoiceListData = data;
            
            angular.forEach($scope.clientInvoiceListData, function (val, i) {
                let invoicePeriod = val.invoice_no_of_days ? val.invoice_no_of_days : $scope.invoicePeriod
                var invoice_duedate = TodayAfterNumberOfDays(val.invoice_date, invoicePeriod);
                val.invoice_duedate = invoice_duedate;
                var InDuedate = new Date(invoice_duedate); 
                
                val.client_currency = val.client_currency ? val.client_currency.split(',')[0] : 'EUR'; 
                
                $scope.allInvcData.push(val);
                if (val.invoice_status == 'Open') {
                    $scope.openInvcCount++;
                    $scope.openInvc.push(val);
                }
                if (val.invoice_status == 'Complete') {
                    $scope.completedInvcCount++;
                    $scope.completeInvc.push(val);
                }
                if (val.invoice_status == 'Part Paid') {
                    $scope.partPaidInvcCount++;
                    $scope.partPaidInvc.push(val);
                } 
                if (val.invoice_status == 'Irrecoverable') {
                    $scope.noRecoverInvcCount++;
                    $scope.irrecoverableInvc.push(val);
                } 
                if (val.invoice_status == 'Cancel') {
                    $scope.cancelledInvcCount++;
                    $scope.cancelledInvc.push(val);
                }
                if(new Date(InDuedate) < $scope.dateToday && !['Paid','Complete'].includes(val.invoice_status) ){
                    $scope.overdueInvcCount++ 
                    $scope.overdueInvc.push(val);
                }
                //Due date counts for Invoice
            });
            //deferred.resolve($scope.openInvc);
            //deferred.resolve($scope.completeInvc);
            //deferred.resolve($scope.partPaidInvc);
            //deferred.resolve($scope.irrecoverableInvc);
            deferred.resolve($scope.allInvcData);

        }).error(function () {
            deferred.reject();
        });    

        return deferred.promise;
    };

    $scope.invcStatusRecord = function (invcStatus) {
        
        if (invcStatus) {
            $scope.invcstatusFilter = invcStatus;
            //$scope.invoiceListAll = [];
            $scope.showDataLoaderJob = true;
        } else {
            $scope.invcstatusFilter = 'all';
            //$scope.invcstatusFilter = '';
        }
        $scope.invoiceActive = $scope.invoiceActive == invcStatus ? '' : invcStatus;
        // Uncheck checkbox
        $('input[id^=checkAll]:checkbox').removeAttr('checked');
        // $scope.invcList_tabFilter()
        // .then(function (invoicePromiseData) {
                $scope.allInvcCount = $scope.allInvcData.length;
                /* All Invoice list for widget */
                switch ($scope.invcstatusFilter) {
                    case "all":
                        $scope.invoiceListAll = $scope.allInvcData;
                        break;
                    case "Open":
                        $scope.invoiceListAll = $scope.openInvc;
                        break;
                    case "Completed":
                        $scope.invoiceListAll = $scope.completeInvc;
                        break;
                    case "Part Paid":
                        $scope.invoiceListAll = $scope.partPaidInvc;
                        break;    
                    case "Irrecoverable":
                        $scope.invoiceListAll = $scope.irrecoverableInvc;
                        break;
                    case "Overdue":
                        $scope.invoiceListAll = $scope.overdueInvc;
                        break;    
                    case "Cancelled":
                        $scope.invoiceListAll = $scope.cancelledInvc;
                        break;            
                }
                // if ($scope.invcstatusFilter == 'all') {
                //     $scope.invoiceListAll = $scope.allInvcData;
                // }
                //const sortedActivities = jobOverDue.sort((a, b) => new Date(a.due_date) - new Date(b.due_date) )
                if ($scope.invoiceListAll) {
                    $scope.invoiceListAll = $scope.invoiceListAll;
                }
                /* Start Upcoming Due Invoice - widgetBox */
                $scope.showDataLoaderJob = false;
                /* End */
        //})    
    };

    $scope.invcList_tabFilter()
        .then(function (invoicePromiseData) {
            $scope.invcStatusRecord('all');
    });
    // ****** END invioce TABS ******* //

    $scope.msgEmailSubject = '';
    $scope.generalEmail = function (id, invoiceNo) {
        rest.path = 'viewcontactdirectEdit/' + id;
        rest.get().success(function (data) {
            $scope.contactlist = data;
            let invoiceEmail = $scope.contactlist.filter( (el)=> el.is_client_invoice == 1 ) 
            invoiceEmail = invoiceEmail.length > 0 ? invoiceEmail[0].vEmail : ($scope.contactlist.length > 0) ? $scope.contactlist[0].vEmail : '' ;
            $scope.msgEmailSubject = invoiceNo;
            if (id != undefined && id != " " && id != null) {
                $window.localStorage.generalMsg = invoiceEmail;
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/generalmsg.html',
                    controller: 'generalmsgController',
                    size: '',
                    scope: $scope,
                    resolve: {
                        items: function () {
                            return $scope.msgEmailSubject;
                        }
                    }
                });
            } else {
                notification('Please Add Email', 'warning');
            }
        }).error(errorCallback);

    };

    // Remove Element from array
    function arrayRemove(arr, value) { 
        return arr.filter(function(ele){ 
            return ele != value; 
        });
    }
    $scope.checkedIds = [];
    $scope.checkInvoiceIds = function(id){
        //var result = arrayRemove(array, 6);
        
        if(id){
            if(id == 'all'){
                let isCheckedAll = $('#checkAll').is(':checked') ? 'true' : 'false';
                
                if(isCheckedAll == 'true'){
                    $("input[id^=invoiceCheck]:checkbox").prop("checked", true);
                    for (var i = 0; i < angular.element('[id^=invoiceCheck]').length; i++) {
                        var invoiceselected = $('#invoiceCheck' + i).is(':checked') ? 'true' : 'false';
                        
                        if (invoiceselected == 'true') {
                            var invoiceIds = angular.element('#invoiceCheckData' + i).val();
                            $scope.checkedIds.push(parseInt(invoiceIds));
                        }
                    }        
                }else{
                    $('input[id^=invoiceCheck]:checkbox').removeAttr('checked');
                    $('input[id^=checkAll]:checkbox').removeAttr('checked');
                    //$('#checkAll').removeAttr('checked');
                    $scope.checkedIds = [];
                }
            }else{
                let isChecked = $('.invoiceCheck' + id).is(':checked') ? 'true' : 'false';
                
                if(isChecked == 'true')
                    $scope.checkedIds.push(id);
                else
                    $scope.checkedIds = arrayRemove($scope.checkedIds, id);
            }        
        }    
                        
    }

    $scope.dtExcelTable = function(type){
        if(type=='create-date')    
            $("#crExdate").trigger( "click" );
        if(type=='due-date')    
            $("#dueExdate").trigger( "click" );
        if(type=='payment-date')    
            $("#paymentExdate").trigger( "click" );    
    }
    //Invoice export to excel
    $scope.exportData = function () {
        $("#exportable .dt-loading" ).remove();
        
        if($scope.checkedIds.length > 0){
            $scope.getAllInvoice = $scope.getAllInvoice.filter(function (getAllInvoice) { return $scope.checkedIds.includes(getAllInvoice.invoice_id.toString()) });
            $scope.invoiceListAll = $scope.invoiceListAll.filter(function (getAllInvoice) { return $scope.checkedIds.includes(getAllInvoice.invoice_id) });
        }    
        setTimeout(() => {
            // var vEncodeHead = '<html><head><meta charset="UTF-8"></head><body>';
            // var html = document.getElementById('exportable').innerHTML;
            // var vEncodeHead2 = '</body></html>';
            // var blob = new Blob([ vEncodeHead+html+vEncodeHead2 ], {
            //     //type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
            //     type: "application/vnd.ms-excel;charset=utf-8"
                                
            // });
            // saveAs(blob, "Client Invoice Report.xlsx");
            
            // export excel file using sheetjs
            exportTableToExcel('exportable2','Client Invoice Report')
            
            // on excel download add flag 1 (To display check mark)
            rest.path = 'clientInvoiceExcelStatus';
            rest.post($scope.checkedIds).success(function (data) {
                if (data.status == 200) {
                    $route.reload();
                    //notification('File downloaded successfully', 'success');
                    $scope.checkedIds = [];
                }
            }).error(errorCallback);
            $scope.getAllInvoice = allInvoiceListArr
            // Remove selected
            $('input[id^=invoiceCheck]:checkbox').removeAttr('checked');
            $('input[id^=checkAll]:checkbox').removeAttr('checked');
            
        }, 500);

    };

    //search data action
    $scope.statusAction = function (action) {
        
        var invoiceStatus = angular.element('#invoiceStatusdata').val();
        
        var i, j, totalChecked, successMsg;
        i = j = totalChecked = successMsg = 0;
        if(invoiceStatus != ''){
            for (var i = 0; i < angular.element('[id^=invoiceCheckData]').length; i++) {
                var invoiceselect = $('#invoiceCheck' + i).is(':checked') ? 'true' : 'false';
                const invoiceCheckLength = angular.element('[id^=invoiceCheckData]').length;
                
                if (invoiceselect == 'true') {
                    var invoiceId = angular.element('#invoiceCheckData' + i).val();
                    totalChecked++;
                    $scope.invoice = {};
                    //const inStatus = invoiceStatus.split(',')
                    $scope.invoice.invoice_status = invoiceStatus;
                    
                    //$scope.invoice.paid_amount = " ";
                    $scope.invoice.is_update = 'is_update';
                    const getAllInvoice = $scope.getAllInvoice.filter(function (getAllInvoice) { return getAllInvoice.invoice_id == invoiceId });
                    var obj = {
                        "Invoice_cost": getAllInvoice.length > 0 ? getAllInvoice[0].Invoice_cost : 0,
                        "paid_amount": getAllInvoice.length > 0 ? getAllInvoice[0].paid_amount : 0,
                        "statusId": invoiceId
                    };
                    if ($scope.invoice.invoice_status == 'Paid' || $scope.invoice.invoice_status == 'Part Paid' || $scope.invoice.invoice_status == 'Completed') {
                        var modalInstance = $uibModal.open({
                            animation: $scope.animationsEnabled,
                            templateUrl: 'tpl/clientInvoiceAmount.html',
                            controller: 'clientInvoiceAmountController',
                            size: '',
                            resolve: {
                                items: function () {
                                    return obj;
                                }
                            }
                        });
                        modalInstance.result.then(function (selectedItem) {
                            $route.reload();
                        });
                    } else {
                        
                        $routeParams.id = invoiceId;
                        rest.path = "clientInvoiceStatusChange";
                        rest.put($scope.invoice).success(function (data) {
                            if (i == invoiceCheckLength) {
                                
                                successMsg++;
                                $route.reload();
                            }
                        });
                    }
                }
                j++;
            }
            if(i == j){
                if(totalChecked == 0)
                    notification('Please select invoice.', 'warning');
                setTimeout(() => {
                    if(successMsg>0){
                        notification('Status Updated successfully.', 'success')
                    }
                }, 500);    
            }
        }else{
            notification('Please select status.', 'warning');
        }    

    }

    $scope.pdfInvoice = function (id) {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/invoicePdf.html',
            controller: 'invoicePdfController',
            //size: '',
            //width: 1000,
            resolve: {
                items: function () {
                    return id;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
            $route.reload();
        });
    }

}).controller('clientInvoiceCreatePopupCtrl', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $uibModal, $uibModalInstance, $route, items) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.InvoiceResult = items[0].InvoiceList;
    $scope.searchOrderNumber = items[0].searchOrderNumber;
    $scope.addInvoice = function (data) {
        
        var client = "";
        var flag = 0;
        var array = [];

        angular.forEach(data, function (val, i) {
            if (val.SELECTED == 1) {
                
                if (!client) {
                    client = val.contactName;
                }
                if (val.contactName != client) {
                    flag = 1;
                } else {
                    array.push(val.itemId);
                }
            }
        });

        if (flag != 1 && array.length) {
            $cookieStore.put('invoiceScoopId', array);
            $location.path('/client-invoice-create');
            $scope.cancel();
        } else {
            if ($scope.InvoiceResult != undefined && flag != 1) {
                notification("Pelase select Project scoop to create invoice.", "warning");
            } else {
                notification("You cannot add two different client invoice", "warning");
            }
        }

    }
    $scope.cancel = function () {
        $uibModalInstance.close();
    }
}).controller('clientInvoiceScoopController', function ($interval, $scope, $log, $window, $compile, $timeout, $uibModal, rest, $route, $rootScope, $routeParams, $location, $cookieStore) {    
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.InvoiceResult = [];
    $scope.searchOrderNumber = '';

    $scope.scoopIds = [];
    rest.path = "getClientInvoicelistAll";
    rest.get().success(function (data) {
        $scope.allInvoice = data;
        
        $scope.allInvoice.filter( function (allInvoice) {
            let scoopIds = JSON.parse(allInvoice.scoop_id);
                if(scoopIds){
                    scoopIds.map((elm) => {
                        return $scope.scoopIds.push(elm.id)
                      });
                }
        })

        rest.path = "dashboardProjectsOrderGet/" + $window.localStorage.getItem("session_iUserId");
        rest.get().success(function (data) {
            $scope.InvoiceResult = data;
            
            $scope.InvoiceResult = data.filter(function (el) {
                el.client_currency = el.client_currency ? el.client_currency.split(',')[0] : 'EUR';
                // status Approved = 5 id
                //if(el.itemStatus == 'Approved' && ! $scope.scoopIds.includes(el.itemId))
                if(el.itemStatusId == '5' && ! $scope.scoopIds.includes(el.itemId))
                    return el;
            });
            //$scope.InvoiceResult.sort((a, b) => a.contactName.localeCompare(b.contactName))

            $scope.InvoiceResult.sort(function (a, b) {
            if (a.contactName < b.contactName) {
                return -1;
            }
            if (a.contactName > b.contactName) {
                return 1;
            }
            return 0;
            });
            
        })    
    
    })    


    $scope.addInvoice = function (data) {
        
        var client = "";
        var flag = 0;
        var array = [];

        angular.forEach(data, function (val, i) {
            if (val.SELECTED == 1) {
                
                if (!client) {
                    client = val.contactName;
                }
                if (val.contactName != client) {
                    flag = 1;
                } else {
                    array.push(val.itemId);
                }
            }
        });

        if (flag != 1 && array.length) {
            $cookieStore.put('invoiceScoopId', array);
            $location.path('/client-invoice-create');
        } else {
            if ($scope.InvoiceResult != undefined && flag != 1) {
                notification("Pelase select Project scoop to create invoice.", "warning");
            } else {
                notification("You cannot add two different client invoice", "warning");
            }
        }
    }

}).controller('projectjobDetailController', function ($interval, $scope, $log, $window, $compile, $timeout, $uibModal, rest, $route, $rootScope, $routeParams, $location) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.DetailId = $window.localStorage.projectJobChainOrderId;
    $window.localStorage.jobfolderId = $routeParams.id;
    // $window.localStorage.orderID = " ";

    $window.localStorage.pId = " ";
    $window.localStorage.setItem("parentId", " ");

    if ($scope.DetailId) {
        rest.path = 'jobitemsGet/' + $scope.DetailId;
        rest.get().success(function (data) {
            $scope.jobitList = data;
        })
    }

    $scope.popupOpenFilemanager = function (id) {
        closeWindows();
        $window.localStorage.ItemClient = '';
        var ItemcodeNumber = angular.element('#companyCode').text();
        $window.localStorage.ItemcodeNumber = ItemcodeNumber;
        // start to get downloaded folder name with client name
        
        rest.path = 'customer/' + $window.localStorage.orderID;
        rest.get().success(function (res) {
            $scope.customer = res;
            if (res) {
                rest.path = 'client/' + $scope.customer.client;
                rest.get().success(function (cData) {
                    $scope.directClientData = cData
                    $window.localStorage.ItemClient = $scope.directClientData.vUserName;
                }).error(function (data, error, status) { });
            }
        })
        // end
        var soPopup = $window.open(id + "/" + $routeParams.id, "popup", "width=1000,height=650");
        soPopup.addEventListener("beforeunload", function () {
            localStorage['parentId'] = ' ';
            localStorage['pId'] = ' ';
            return false;
        }, false);
        openWindows.push(soPopup);
    }

    var getCountJobFolderProjectDetail = function () {
        var count = $window.localStorage.getItem("sourceFolderCount");
        if (!count) {
            count = 0;
        }

        var type = $window.localStorage.getItem("jobFoldertype");

        if (type) {
            if (type == 'source') {
                $('#proDetailSourceCount').text(count);
            }
            if (type == 'target') {
                $('#proDetailTargetCount').text(count);
            }
        }
    }
    $interval(getCountJobFolderProjectDetail, 1000);

    if ($routeParams.id) {
        rest.path = 'jobSummeryDetailsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.jobdetail = data[0];
            var srcLang = JSON.parse($scope.jobdetail.ItemLanguage.split('>')[0]).sourceLang;
            var trgLang = JSON.parse($scope.jobdetail.ItemLanguage.split('>')[1]).sourceLang;
            $scope.jobdetail.ItemLanguage = srcLang + ' > ' + trgLang;
            $scope.jobdetail.priceLinguist = '';
            if ($scope.jobdetail.price) {
                $scope.jobdetail.price = JSON.parse(data[0].price);
            }
            
            //page redirect job discussion
            $scope.jobDiscussionRedirect = data[0].order_id
            $window.localStorage.jobOrderId = data[0].order_id;

            if (data[0].order_id) {
                $window.localStorage.orderID = data[0].order_id;
                rest.path = 'jobItemQuantityget/' + data[0].order_id + '/' + $scope.jobdetail.item_id;
                rest.get().success(function (data) {
                    $scope.totalPrice = data.total_amount;
                    $scope.itemList = JSON.parse(data.price);
                    $scope.itemPriceEmpty = jQuery.isEmptyObject($scope.itemList);
                })
            }

            if ($scope.jobdetail.work_instruction) {
                $scope.wrInstruct = JSON.parse($scope.jobdetail.work_instruction);
                $scope.wrInstructEmpty = jQuery.isEmptyObject($scope.wrInstruct);
            }


            $scope.jobdetail.created_date = data[0].created_date;

            //count file
            if (data) {
                rest.path = 'filefolderstget/' + data[0].fmanager_id + '/' + $routeParams.id;
                rest.get().success(function (data) {
                    var sourceFile = [];
                    var targetFile = [];
                    angular.element('.sourceC').text(data.source);
                    angular.element('.targteC').text(data.target);
                }).error(errorCallback);
            }

            //getting freelancer payment information data
            rest.path = "getUserDataById/" + $scope.jobdetail.resource;
            rest.get().success(function (dataUser) {
                $scope.vBankInfo = JSON.parse(dataUser.userPaymentData.vBankInfo);
                $scope.currencyCodeDisplay = $scope.vBankInfo.currency_code;
            }).error(errorCallback);
        }).error(errorCallback);
    }

    //accept job status
    $scope.acceptjobstatus = function (status, action) {
        switch (action) {
            case "accept":
                if (status == 'Requested') {
                    $scope.item_status = "Ongoing";
                    //$scope.item_status = "Assigned-waiting";
                }
                if ($scope.job == undefined || $scope.job == null || $scope.job == " ") {
                    $scope.job = {};
                }
                $scope.job.item_status = $scope.item_status;
                break;
            case "reject":
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/jobrejectreason.html',
                    controller: 'jobStatusRejectController',
                    size: ''
                });
                break;
            case "start":
                if (status == 'Assigned-waiting' || status == 'Waiting') {
                //if (status == 'Assigned-waiting') {
                        //$scope.item_status = "In-progress";
                    $scope.item_status = "Ongoing";
                }
                if ($scope.job == undefined || $scope.job == null || $scope.job == " ") {
                    $scope.job = {};
                }
                $scope.job.item_status = $scope.item_status;
                break;
            case "save":
                $scope.item_status = "Delivered";
                if ($scope.job == undefined || $scope.job == null || $scope.job == " ") {
                    $scope.job = {};
                }
                $scope.job.item_status = $scope.item_status;
                break;
        }

        if ($scope.job.item_status) {
            $routeParams.id;
            
            rest.path = 'acceptJobStatus';
            rest.put($scope.job).success(function (data) {
                if (data.status == 200 && data.emailSend == 'true') {
                    if ($scope.job.item_status == 'Delivered') {
                        notification('job is delivered successfully and email sent to project manager.', 'success');
                    } else {
                        notification('job is accepted successfully and email sent to project manager.', 'success');
                    }
                    $route.reload();
                }
                //$location.path('/dashboard');
            }).error(errorCallback);
        }
    }

    $scope.jobsumemailResource = function (resourceName) {
        if (resourceName) {
            rest.path = 'contact_personGet/' + $scope.jobdetail.contact_person;
            rest.get().success(function (data) {
                $window.localStorage.ResourceMsg = data.iUserId;
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/jobresourcemsg.html',
                    controller: 'jobResourceMsgController',
                    size: '',
                    resolve: {
                        items: function () {
                            return $scope.data;
                        }
                    }
                });
            }).error(errorCallback);
        }
    }

    //invoice of redirect
    $scope.projectInvoiceRedirect = function () {
        $location.path('/project-detail/' + $routeParams.id);
    }

}).controller('projectjobDetailPopupController', function ($interval, $scope, $log, $window, $compile, $timeout, $uibModal, $uibModalInstance, rest, $route, $rootScope, $routeParams, $location, $q) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.DetailId = $window.localStorage.projectJobChainOrderId;
    $window.localStorage.jobfolderId = $routeParams.id;
    // $window.localStorage.orderID = " ";

    $window.localStorage.pId = " ";
    $window.localStorage.setItem("parentId", " ");

    if ($scope.DetailId) {
        rest.path = 'jobitemsGet/' + $scope.DetailId;
        rest.get().success(function (data) {
            $scope.jobitList = data;
        })
    }

    var defaultParamsJobid = $routeParams.id;
    $scope.jobDetailSelect = function () {
        $routeParams.id = defaultParamsJobid;
        $window.localStorage.jobfolderId = defaultParamsJobid;
    }

    $scope.popupOpenFilemanager = function (id) {
        closeWindows();
        $window.localStorage.ItemClient = '';
        var ItemcodeNumber = angular.element('#companyCode').text();
        $window.localStorage.ItemcodeNumber = ItemcodeNumber;
        // start to get downloaded folder name with client name
        
        rest.path = 'customer/' + $window.localStorage.orderID;
        rest.get().success(function (res) {
            $scope.customer = res;
            if (res) {
                rest.path = 'client/' + $scope.customer.client;
                rest.get().success(function (cData) {
                    $scope.directClientData = cData
                    $window.localStorage.ItemClient = $scope.directClientData.vUserName;
                }).error(function (data, error, status) { });
            }
        })
        // end
        var soPopup = $window.open(id + "/" + $routeParams.id, "popup", "width=1000,height=650");
        soPopup.addEventListener("beforeunload", function () {
            localStorage['parentId'] = ' ';
            localStorage['pId'] = ' ';
            return false;
        }, false);
        openWindows.push(soPopup);
    }

    var getCountJobFolderProjectDetail = function () {
        var count = $window.localStorage.getItem("sourceFolderCount");
        if (!count) {
            count = 0;
        }

        var type = $window.localStorage.getItem("jobFoldertype");

        if (type) {
            if (type == 'source') {
                $('#proDetailSourceCount').text(count);
            }
            if (type == 'target') {
                $('#proDetailTargetCount').text(count);
            }
        }
    }
    $interval(getCountJobFolderProjectDetail, 1000);

    if ($routeParams.id) {
        rest.path = 'jobSummeryDetailsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.jobdetail = data[0];
            
            var srcLang = JSON.parse($scope.jobdetail.ItemLanguage.split('>')[0]).sourceLang;
            var trgLang = JSON.parse($scope.jobdetail.ItemLanguage.split('>')[1]).sourceLang;
            $scope.jobdetail.ItemLanguage = srcLang + ' > ' + trgLang;
            $scope.jobdetail.priceLinguist = '';
            if ($scope.jobdetail.price) {
                $scope.jobdetail.price = JSON.parse(data[0].price);
            }
            
            //page redirect job discussion
            $scope.jobDiscussionRedirect = data[0].order_id
            $window.localStorage.jobOrderId = data[0].order_id;

            if (data[0].order_id) {
                $window.localStorage.orderID = data[0].order_id;
                rest.path = 'jobItemQuantityget/' + data[0].order_id + '/' + $scope.jobdetail.item_id;
                rest.get().success(function (data) {
                    $scope.totalPrice = data.total_amount;
                    $scope.itemList = JSON.parse(data.price);
                    $scope.itemPriceEmpty = jQuery.isEmptyObject($scope.itemList);
                })
            }

            if ($scope.jobdetail.work_instruction) {
                $scope.wrInstruct = JSON.parse($scope.jobdetail.work_instruction);
                
                $scope.wrInstructEmpty = jQuery.isEmptyObject($scope.wrInstruct);
            }


            $scope.jobdetail.created_date = data[0].created_date;

            //count file
            if (data) {
                rest.path = 'filefolderstget/' + data[0].fmanager_id + '/' + $routeParams.id;
                rest.get().success(function (data) {
                    var sourceFile = [];
                    var targetFile = [];
                    angular.element('.sourceC').text(data.source);
                    angular.element('.targteC').text(data.target);
                }).error(errorCallback);
            }

            //getting freelancer payment information data
            rest.path = "getUserDataById/" + $scope.jobdetail.resource;
            rest.get().success(function (dataUser) {
                
                $scope.vBankInfo = JSON.parse(dataUser.userPaymentData.vBankInfo);
                $scope.currencyCodeDisplay = $scope.vBankInfo.currency_code;
            }).error(errorCallback);
        }).error(errorCallback);
    }

    // Work instruction tick mark
    $scope.wiUpdate = [];
    $scope.checkWorkInstruct = function (id) {
        var workObj = [];
        angular.forEach($scope.wrInstruct, function (value, key) {

            var work_checked = $('#workcheck' + value.work_id).is(':checked');
            workObj.push({
                work_id: value.work_id,
                work_name: value.work_name,
                work_checked: work_checked,
            });
            
        });
        $scope.wiUpdate = JSON.stringify(workObj);
        rest.path = 'jobSummeryWorkinstructUpdate';
        rest.put($scope.wiUpdate).success(function (data) {

        }).error(errorCallback);
    }
    //accept job status
    $scope.acceptjobstatus = function (status, action) {
        switch (action) {
            case "accept":
                if (status == 'Requested') {
                    $scope.item_status = "Ongoing";
                    //$scope.item_status = "Waiting";
                    //$scope.item_status = "Assigned-waiting";
                }
                if ($scope.job == undefined || $scope.job == null || $scope.job == " ") {
                    $scope.job = {};
                }
                $scope.job.item_status = $scope.item_status;
                break;
            case "reject":
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/jobrejectreason.html',
                    controller: 'jobStatusRejectController',
                    size: ''
                });
                break;
            case "start":
                if (status == 'Assigned-waiting' || status == 'Waiting') {
                    //$scope.item_status = "In-progress";
                    $scope.item_status = "Ongoing";
                }
                if ($scope.job == undefined || $scope.job == null || $scope.job == " ") {
                    $scope.job = {};
                }
                $scope.job.item_status = $scope.item_status;
                break;
            case "save":
                //$scope.item_status = "Delivered";
                $scope.item_status = "Completed";
                if ($scope.job == undefined || $scope.job == null || $scope.job == " ") {
                    $scope.job = {};
                }
                $scope.job.item_status = $scope.item_status;
                break;
        }

        if ($scope.job.item_status) {
            $routeParams.id;
            
            rest.path = 'acceptJobStatus';
            rest.put($scope.job).success(function (data) {
                if (data.status == 200 && data.emailSend == 'true') {
                    if ($scope.job.item_status == 'Delivered' || $scope.job.item_status == 'Completed') {
                        notification('job is delivered successfully and email sent to project manager.', 'success');
                    } else {
                        notification('job is accepted successfully and email sent to project manager.', 'success');
                    }
                    $route.reload();
                }
                //$location.path('/dashboard');
            }).error(errorCallback);
        }
    }

    $scope.jobsumemailResource = function (resourceName) {
        if (resourceName) {
            rest.path = 'contact_personGet/' + $scope.jobdetail.contact_person;
            rest.get().success(function (data) {
                $window.localStorage.ResourceMsg = data.iUserId;
                $rootScope.linguistJobmsg = 'linguistJobmsg';
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/jobresourcemsg.html',
                    controller: 'jobResourceMsgController',
                    size: '',
                    resolve: {
                        items: function () {
                            return $scope.data;
                        }
                    }
                });
            }).error(errorCallback);
        }
    }

    //invoice of redirect 
    $scope.projectInvoiceRedirect = function () {
        $location.path('/project-detail/' + $routeParams.id);
    }

    // Start comment chat Linguist Dashboard
    $scope.discussionChat = function () {
        $routeParams.id = $scope.jobDiscussionRedirect;
        var loginid = $window.localStorage.getItem("session_iUserId");
        var userprofilepic = $window.localStorage.getItem("session_vProfilePic");
        $scope.login_userid = $window.localStorage.getItem("session_iUserId");

        
        rest.path = 'viewProjectCustomerDetail';
        rest.model().success(function (data) {
            $scope.customer = data;
            
            $window.localStorage.clientproCustomerName = $scope.customer.client;
            $window.localStorage.ContactPerson = $scope.customer.contact;
            $routeParams.ClientIdd = data['client'];
            $window.localStorage.ClientName = $routeParams.ClientIdd;
            if ($scope.customer.memo) {
                $scope.warn = true;
                $timeout(function () {
                    $scope.warn = false;
                }, 10000);
            }
        }).error(errorCallback);

        //$routeParams.id;
        $scope.jobLinguist = [];
        var linguistObj = [];
        if ($routeParams.id) {
            rest.path = 'jobsummeryGet/' + $scope.jobDiscussionRedirect;
            rest.get().success(function (data) {
                //$scope.jobLinguist = data;
                angular.forEach(data, function (val, i) {
                    // var linguistObj = {
                    //     id: val.id,
                    //     read_id: loginid
                    // }
                    if (val.resource) {
                        $scope.jobLinguist.push(val);
                    }
                });
                $scope.jobLinguist = UniqueArraybyId($scope.jobLinguist, 'resource');
                

            });
        }
        var projectTeam = [];
        rest.path = 'contactPerson';
        rest.model().success(function (data) {
            
            angular.forEach(data, function (val, i) {
                if (val.vResourcePosition == 3) {
                    angular.element('#coordinatorIcon').html(val.vUserName);
                    var coordpic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                    angular.element('.coordinatorIcon').html(coordpic);

                } else if (val.vResourcePosition == 2) {
                    angular.element('#managerDesignation').html(val.vUserName);
                    var managerpic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                    angular.element('.managerIcon').html(managerpic);

                } else if (val.vResourcePosition == 4) {
                    angular.element('#QASpecialist').html(val.vUserName);
                    var QApic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                    angular.element('.QAIcon').html(QApic);

                }
            })
        }).error(errorCallback);

        $routeParams.id = $routeParams.id;
        rest.path = 'generalVieData/' + $routeParams.id + '/' + $window.localStorage.ClientName;
        rest.get().success(function (data) {
            $scope.general = data;
            
            //$scope.general.order_date = $scope.general.order_date;
            //$scope.general.order_date = moment($scope.general.order_date).format($window.localStorage.getItem('global_dateFormat'));
            //$scope.general.due_date = $scope.general.due_date.split(' ')[0].split('.').reverse().join('-');
            if ($scope.general.due_date)
                $scope.general.due_date = moment($scope.general.due_date).format("DD-MM-YYYY | HH:mm");
            if ($scope.general.heads_up) {
                if ($scope.general.expected_start_date && $scope.general.expected_start_date != '0000-00-00 00:00:00' && $scope.general.expected_start_date != "Invalid Date") {
                    $scope.general.expected_start_date = $scope.general.expected_start_date.split(' ')[0].split('.').reverse().join('-');
                    $scope.general.expected_start_date = moment($scope.general.expected_start_date).format("DD-MM-YYYY");
                } else {
                    $scope.general.expected_start_date = '-';
                }
            } else {
                if ($scope.general.order_date) {
                    $scope.general.expected_start_date = $scope.general.order_date.split(' ')[0].split('.').reverse().join('-');
                    $scope.general.expected_start_date = moment($scope.general.order_date).format("DD-MM-YYYY");
                } else {
                    $scope.general.expected_start_date = '-';
                }
            }

            // if ($scope.general.order_date == undefined) {
            //     var currentdate = new Date();
            //     $scope.general.order_date = getDatetime(currentdate);
            // }
            $scope.generaldata = {};
            //$scope.generaldata.order_no = $window.localStorage.orderNo;
            //$scope.generaldata.abbrivation = $window.localStorage.abbrivation;

            if ($scope.general == null) {
                $scope.general = {};
                $scope.generaldata = {};
                //$scope.generaldata.order_no = $window.localStorage.orderNo;
                //$scope.generaldata.abbrivation = $window.localStorage.abbrivation;
                // if ($scope.general.order_no == "") {

                // }
            }
            
        }).error(errorCallback);

        //-- project Team Users --//
        $scope.teamArray = [];
        rest.path = "users";
        rest.get().success(function (data) {
            
            angular.forEach(data.data, function (val, i) {
                //if(val.iUserId != loginid && val.freelancer == 'freelancer' ){
                if (val.iUserId != loginid) {
                    $scope.teamArray.push(val.iUserId);
                }
            });
        }).error(errorCallback);

        $scope.projectPriceChat = 0;
        if ($scope.jobDiscussionRedirect) {
            rest.path = 'itemsGet/' + $scope.jobDiscussionRedirect;
            rest.get().success(function (data) {
                angular.forEach(data, function (val, i) {
                
                    if (val.total_price) {
                        $scope.projectPriceChat += val.total_price;
                    }
                });
                
            });



        }

        if ($scope.isNewProject === 'true' && $scope.userRight == 1) {
            $location.path('/dashboard1');
            notification('Please create project.', 'warning');
        }
        $window.localStorage.getItem("session_iUserId");
        $window.localStorage.getItem("session_vUserName");
        $window.localStorage.getItem("session_iFkUserTypeId");
        $scope.backtoPage = function () {
            if ($window.localStorage.getItem("session_iFkUserTypeId") == 1) {
                $location.path('jobs-detail/' + $window.localStorage.orderID);
            } else {
                $location.path('dashboard1');
            }
        }

        if ($routeParams.id) {

            var commentsArray = [];
            var NewcommentsArray = [];
            $scope.commentReadArray = [];
            var promises = [];
            var usercommentsArr = [];
            var newUserCommentsArr = [];
            $scope.msgIDArr = [];
            $scope.commentsArrayAll = async function () {
                var deferred = $q.defer();
                rest.path = "discussionOrder/" + $scope.jobDiscussionRedirect;
                rest.get().success(function (data) {
                    setTimeout(function () {
                        
                        //var setintrvlMenu = setInterval(function() {
                        angular.forEach(data, function (val, i) {
                            var dataId = val.id;

                            var msgReadArr = val.read_id.split(",");
                            var msgReadArrFilter = msgReadArr.filter(function (el) {
                                if ($scope.teamArray.indexOf(parseInt(el)) != -1) {
                                    return el;
                                }
                                return 0;
                            });

                            $('#comment-list').find(' > li[data-id^=c]').css('display', 'none');
                            $('#comment-list').find(' > li[data-id^=c]').hide();
                            //$('li[data-id=c' + val.id + ']').addClass('pull-right cmtright');
                            //$('.upload').html('<i class="fa fa-paperclip"></i><input id="discussionFileUpload" type="file" data-role="none" multiple="multiple">');

                            if (userprofilepic) {
                                $('.commenting-field .profile-picture').replaceWith('<img src=" uploads/profilePic/' + userprofilepic + '" class="img-circle round userpic" alt="...">');
                            }
                            var filedata = '';
                            if (val.fileURL != "") {
                                var filetype = val.fileMimeType;
                                var filetype1 = filetype.includes("image/");
                                var file_format = '';
                                var file_type = '';
                                var mimeTypeParts = val.fileMimeType.split('/');
                                if (mimeTypeParts.length == 2) {
                                    file_format = mimeTypeParts[1];
                                    file_type = mimeTypeParts[0];
                                }
                                // Icon
                                var availableIcons = ['archive', 'audio', 'code', 'excel', 'image', 'movie', 'pdf', 'photo',
                                    'picture', 'powerpoint', 'sound', 'video', 'word', 'zip'
                                ];

                                var iconClass = 'fa fa-file-o';
                                // File Extension name
                                var extName = '';
                                var extParts = val.fileURL.split('/');
                                var extFileName = extParts[extParts.length - 1];
                                var extFileName = extFileName.split('?')[0];
                                extName = extFileName.split('.')[1];

                                if (availableIcons.indexOf(file_format) > 0) {
                                    iconClass = 'fa fa-file-' + file_format + '-o';
                                } else if (availableIcons.indexOf(file_type) > 0) {
                                    iconClass = 'fa fa-file-' + file_type + '-o';
                                } else if (extName == 'docx') {
                                    iconClass = 'fa fa-file-word-o';
                                } else if (extName == 'xlsx' || extName == 'xlsm') {
                                    iconClass = 'fa fa-file-excel-o';
                                } else if (extName == 'zip') {
                                    iconClass = 'fa fa-file-archive-o';
                                }

                                //$window.localStorage.setItem("chatimg_"+val.fileURL, val.fileURL);
                                //var cmtimgName = $window.localStorage.getItem("chatimg_"+val.fileURL);
                                var cmtimgName = val.fileURL + '?v=' + jQuery.now();

                                if (file_type == 'image') {
                                    var filehtml = '<img src=' + cmtimgName + '></img>';
                                } else if (file_type == 'video') {
                                    var filehtml = '<video src=' + cmtimgName + ' controls="controls"></video>';
                                } else {
                                    var filename = val.fileURL;
                                    var filehtml = '<i class="' + iconClass + '"></i> ' + filename.replace('uploads/discussionfile/', '');
                                }
                                var hrefClass = 'attachment';
                                var hrefTarget = '_blank';
                                filedata = '<a class=' + hrefClass + ' href=' + val.fileURL + ' target=' + hrefTarget + '>' + filehtml + '</a>';

                            }
                            if (val.user_id == loginid) {
                                //$('li[data-id=' + val.id + ']').addClass('pull-right cmtright');
                                $('li[data-id=' + val.id + ']').find('.usrnamespan').addClass('hideusername');

                                if (val.content == '' || val.content == null) {
                                    //$('li[data-id=' + dataId + ']').find('.content').html(filedata);
                                    //$('li[data-id=' + dataId + ']').clone(true).appendTo('#attachment-list');
                                } else {
                                    //var htmldata = '<a href class="pull-right thumb-sm avatar"><img src=" '+ val.profile_picture_url +'" class="img-circle" alt="..."></a> <div class="m-r-xxl"> <div class="pos-rlt wrapper bg-info r r-2x"> <span class="arrow right pull-up arrow-info"></span> <p class="m-b-none"> '+ val.content +' </p> </div> <small class="text-muted">1 minutes ago</small> </div>';
                                    //$('li[data-id=' + val.id + ']').find('.content').html(htmldata);
                                }
                                if (msgReadArrFilter.length > 0) {
                                    $('li[data-id=' + dataId + ']').find(' .comment-wrapper').after('<div style="color: #27c24c;position: absolute;right: 40px;font-size: 12px;"><i class="fa fa-check" aria-hidden="true"></i></div>');
                                }
                            } else {
                                //$('li[data-id=' + val.id + ']').addClass('pull-left cmtleft');
                                //$('li[data-id=' + val.id + ']').find('.profile-picture').addClass('pull-left thumb-sm avatar');
                                if (val.content == "" || val.content == null) {
                                    //$('li[data-id=' + dataId + ']').find('.content').html(filedata);
                                    //$('li[data-id=' + dataId + ']').clone(true).appendTo('#attachment-list');
                                }
                            }
                            // if (file_type == 'image' || file_type == 'video') {
                            //     $('li[data-id=' + dataId + ']').find('.wrapper').addClass('imgblock');
                            // }
                            
                            if (val.content) {
                                $('li[data-id=' + dataId + ']').find('.content').html(val.content);
                            }
                            //$compile(val.content)($scope);
                            // ------------ Script for date seperating in chat box --------------//
                            var ndt = new Date(data[i].created);
                            var mm = ("0" + (ndt.getMonth() + 1)).slice(-2);
                            var dd = ("0" + ndt.getDate()).slice(-2);
                            var yy = ndt.getFullYear();
                            //var timeText = dd + '-' + mm + '-' + yy;
                            //var dateSeprt = dd + '-' + mm + '-' + yy;
                            var dateSeprt = commentDateToformat(data[i].created);

                            var timeText = commentDatetimeToText(data[i].created);
                            if (timeText == "Today") {
                                $('li[data-id=' + dataId + ']').prepend('<div id="dtseperator"></div>');
                            }
                            // ------count total attachment------//
                            let totalAttachment = 0;
                            totalAttachment = $('#attachment-list').find('li .attachment').length;
                            //$('.att_count').text(totalAttachment);


                            if (i > 0) {
                                var ndt1 = new Date(data[i - 1].created);
                                var dateSeprt2 = commentDateToformat(data[i - 1].created);

                                if (dateSeprt != dateSeprt2) {
                                    if ($('#comment-list').find(' > li[new-id=' + dataId + ']').length == 0)
                                        $('#comment-list').find(' > li[data-id=' + dataId + ']').before('<li class="seperatordate comment" new-id=' + dataId + '> <span>' + timeText + '</span> </li>');
                                }
                            } else {
                                if ($('li[new-id=' + dataId + ']').length === 0)
                                    $('#comment-list').find(' > li[data-id=' + dataId + ']').before('<li class="seperatordate comment" new-id=' + dataId + '> <span>' + timeText + '</span> </li>');
                            }


                            var msgRead_id = val.read_id;

                            if (msgRead_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)"))) {
                                
                            } else {
                                var cmtObj = {
                                    id: val.id,
                                    read_id: loginid
                                }
                                $scope.commentReadArray.push(cmtObj);
                            }
                            // Read/ Unread - check comment id exist in db
                            promises.push(val);

                            if (val.user_id != loginid) {
                                usercommentsArr.push(val.user_Id)
                            }
                            if (val.id) {
                                $scope.msgIDArr.push(val.id)
                            }


                        });

                        deferred.resolve(promises);
                        $(".comment-wrapper").each(function (i, v) {

                        });

                        if (data.length == promises.length) {
                            //jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                        }

                    }, 1500);
                    commentsArray = data;
                    
                }).error(errorCallback);

                //return deferred.promise;

            }
            $scope.commentsArrayAll();
        }

        if ($routeParams.id) {
            
            $scope.usersArray = [];
            rest.path = "users";
            //$timeout(function () {
            rest.get().success(function (data) {
                angular.forEach(data.data, function (val, i) {
                    var uObj = {
                        id: val.iUserId,
                        fullname: val.vUserName,
                        email: val.vEmailAddress,
                        profile_picture_url: "uploads/profilePic/user-icon.png"
                    }
                    $scope.usersArray.push(uObj);
                });

            }).error(errorCallback);
            
            //}, 100);
            // emoji text
            $scope.emojitext = [];
        }

        //emoji text change
        //$timeout(function() {
        //$scope.emojimap=[];
        // we are using this for emoji
        var emojimap = {
            "<3": "\u2764\uFE0F",
            "</3": "\uD83D\uDC94",
            ":D": "\uD83D\uDE00",
            //":)": "\uD83D\uDE03",
            ":)": "🙂",
            ";)": "\uD83D\uDE09",
            ":(": "\uD83D\uDE12",
            ":p": "\uD83D\uDE1B",
            ";p": "\uD83D\uDE1C",
            ":'(": "\uD83D\uDE22",
            ":o)": "\uD83D\uDE2E",
            ":*": "\uD83D\uDC8B",
            ":>": "\uD83D\uDE06",
            ":blush": "\uD83D\uDE0A",
            ">:(": "\uD83D\uDE20",
            ":-)": "\uD83D\uDE42",
            ":'(": "\uD83D\uDE22",
            "):": "\uD83D\uDE1E",
            ":-\\\\": "\uD83D\uDE15",
            "<\\/3": "\uD83D\uDC94",
            "8)": "\uD83D\uDE0E",
            ":|": "\uD83D\uDE10",
            ":o": "\uD83D\uDE2E"
        };

        $timeout(function () {
            if ($scope.jobDiscussionRedirect) {
                //$timeout(function() {
                rest.path = "discussionCommentread";
                rest.put($scope.commentReadArray).success(function (res) {
                    
                    if (res.status == 1) {
                        jQuery('.cmtclr' + $scope.jobDiscussionRedirect).css({ "color": "green" });
                    }
                });
                //},2300);
            }

            jQuery("#addemoji").emojioneArea({
                autoHideFilters: true,
                useSprite: true,
                //accepts values: 'image',
                //default: 'unicode',
                //accepts values: 'unicode' | 'shortname' | 'image'
                //pickerPosition: "bottom"
            });

        }, 2800);


        $timeout(function () {
            var el = $("#addemoji").emojioneArea();
            el[0].emojioneArea.on("emojibtn.click", function () {
                const emoji1 = $('.emojibtn').find('.emojioneemoji').attr('src');
                //const emoji = $('.emojionearea-editor').find('img[src="' + emoji1 + '"]').attr('alt');
                const emoji = '<img class="emojiImg" src="' + emoji1 + '">';
                $('.textarea').append(emoji).trigger("change");

                //$('.textarea').val($('.textarea').val()+emoji);
            });

            jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
            jQuery('#attachment-list').scrollTop(jQuery('#attachment-list')[0].scrollHeight);

        }, 3000);

        $timeout(function () {

            var CommentedElement = $('#comments-container').comments({ //profilePictureURL: 'https://viima-app.s3.amazonaws.com/media/user_profiles/user-icon.png',
                roundProfilePictures: true,
                textareaRows: 1,
                enableAttachments: true,
                enablePinging: true,
                currentUserId: loginid,
                enableHashtags: true,
                textareaPlaceholderText: 'Type message here...',
                getComments: function (success, error) {

                    $timeout(function () {
                        if ($scope.jobDiscussionRedirect) {

                            var newLoginidArr = commentsArray.filter(function (commentsArray) { return commentsArray.user_id != loginid });
                            //var usercommentsArrLen = usercommentsArr.length ;
                            var usercommentsArrLen = newLoginidArr.length;

                            setInterval(() => {
                                rest.path = "discussionOrder/" + $scope.jobDiscussionRedirect;
                                rest.get().success(function (data) {
                                    var NewcommentsArray = data;
                                    // other side user send message
                                    var newUserCommentsArr = NewcommentsArray.filter(function (NewcommentsArray) { return NewcommentsArray.user_id != loginid });
                                    // FOR read unread comments
                                    var cmtArr = [];
                                    var cmtArr = NewcommentsArray.filter(function (NewcommentsArray) { var isReadtrue = NewcommentsArray.read_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)")); return (!isReadtrue) });
                                    
                                    var newcmtArr = commentsArray.filter(function (commentsArray) { var isReadtrue = commentsArray.read_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)")); return (!isReadtrue) });

                                    // --- update read id //
                                    $scope.newCommentReadArray = [];
                                    if (cmtArr) {
                                        angular.forEach(cmtArr, function (cmtval, cmti) {
                                            var newCmtObj = {
                                                id: cmtval.id,
                                                read_id: loginid
                                            }
                                            $scope.newCommentReadArray.push(newCmtObj);
                                            if ($scope.newCommentReadArray.length == cmtArr.length) {
                                                rest.path = "discussionCommentread";
                                                rest.put($scope.newCommentReadArray).success(function (res) {
                                                    if (res.status == 1) {
                                                        //jQuery('.cmtclr' + $routeParams.id).css({ "color": "green" });
                                                    }
                                                });
                                            }
                                        });
                                    }
                                    //if( (NewcommentsArray.length > commentsArray.length && ) )
                                    
                                    var arrayNotload = $('#comment-list').find(' > li').length;

                                    //if(newUserCommentsArr.length > usercommentsArrLen || cmtArr.length > 0 || (!arrayNotload)){
                                    if (newUserCommentsArr.length > usercommentsArrLen || cmtArr.length > 0 || (!arrayNotload)) {
                                        //if(usercommentsArrLen == 0 ){
                                        usercommentsArrLen = newUserCommentsArr.length;
                                        //}

                                        $('#comment-list').find(' > li[data-id^=c]').hide();
                                        rest.path = "discussionCommentread";
                                        rest.put($scope.commentReadArray).success(function (res) {
                                            if (res.status == 1) {
                                                jQuery('.cmtclr' + $scope.jobDiscussionRedirect).css({ "color": "green" });
                                            }
                                        });
                                        $scope.commentsArrayAll();
                                        success(NewcommentsArray);
                                        $('ul.navigation').find('li[data-sort-key="oldest"]').trigger('click');
                                        jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                                        $('#comment-list').find(' > li[data-id^=c]').hide();
                                        usercommentsArr = [];
                                        // to remove same date li div
                                        // var seen = {};
                                        // $('.seperatordate').each(function() {
                                        //     var txt = $(this).text();
                                        //     if (seen[txt])
                                        //         $(this).remove();
                                        //     else
                                        //         seen[txt] = true;
                                        // });
                                        // end script
                                    }
                                });
                                
                            }, 5000);
                        }

                        success(commentsArray);
                        $('ul.navigation').find('li[data-sort-key="oldest"]').trigger('click');
                        //jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                        //jQuery('#attachment-list').scrollTop(jQuery('#attachment-list')[0].scrollHeight);
                        $('.userprof').on('dragstart', function (event) { event.preventDefault(); });
                        $('#comment-list').on('dragstart', function (event) { event.preventDefault(); });

                    }, 500);
                },
                searchUsers: function (term, success, error) {
                    setTimeout(function () {
                        success($scope.usersArray.filter(function (user) {

                            var containsSearchTerm = user.fullname.toLowerCase().indexOf(term.toLowerCase()) != -1;
                            var isNotSelf = user.id != loginid;
                            return containsSearchTerm && isNotSelf;
                        }));
                    }, 1000);
                },

                searchEmojitext: function (term, success, error) {
                    setTimeout(function () {
                        success($scope.emojitext.filter(function (emojitxt) {
                            var containsSearchTerm = emojitxt.emojiname.toLowerCase().indexOf(term.toLowerCase()) != -1;
                            return containsSearchTerm;
                        }));
                    }, 500);
                },
                postComment: function (data, success, error) {
                    data.job_id = defaultParamsJobid;
                    data.order_id = $scope.jobDiscussionRedirect;
                    data.user_id = $window.localStorage.getItem("session_iUserId");
                    data.fullname = $window.localStorage.getItem("session_vUserName");
                    data.profile_picture_url = 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic");
                    data.read_id = $window.localStorage.getItem("session_iUserId") + ',';

                    function escapeSpecialChars(regex) {
                        return regex.replace(/([()[{*+.$^\\|?])/g, '\\$1');
                    }
                    for (var i in emojimap) {
                        var regex = new RegExp(escapeSpecialChars(i), 'gim');
                        data.content = data.content.replace(regex, emojimap[i]);
                    }

                    var pingsvalue = [];
                    if (data.content) {
                        $(Object.keys(data.pings)).each(function (index, userId) {
                            var fullname = data.pings[userId];
                            var pingText = '@' + fullname;
                            data.content = data.content.replace(new RegExp('@' + userId, 'g'), pingText);

                            pingsvalue[index] = Object.keys(data.pings)[index];
                        });
                    }
                    
                    data.pings = pingsvalue.toString();
                    rest.path = "discussionOrder";
                    rest.post(data).success(function (info) {

                    }).error(errorCallback);
                    $timeout(function () {
                        success(data);
                    }, 500);
                },
                putComment: function (data, success, error) {
                    $routeParams.id = data.id;
                    data.login_userid = $window.localStorage.getItem("session_iUserId");
                    rest.path = 'discussionOrder';
                    rest.put(data).success(function (res) {
                        if (res.Status == 401) {
                            notification("You can not edit other user message", "error");
                            $timeout(function () {
                                location.reload();
                            }, 1000);
                        } else if (res.Status == 200) {
                            notification("Successfully edited", "success");
                        } else {
                            notification("Please try later", "warning");
                        }
                    }).error(errorCallback);
                    $timeout(function () {
                        success(data);
                    }, 500);
                },
                deleteComment: function (data, success, error) {
                    data.login_userid = $window.localStorage.getItem("session_iUserId");
                    rest.path = 'discussionOrder/' + data.id + '/' + data.login_userid;
                    rest.delete(data).success(function (data) {
                        if (data.Status == 401) {
                            notification("You can not edit other user message", "error");
                            $timeout(function () {
                                location.reload();
                            }, 1000);
                        } else if (data.Status == 200) {
                            notification("Successfully edited", "success");
                        } else {
                            notification("Please try later", "warning");
                        }
                    }).error(errorCallback);
                    $timeout(function () {
                        success();
                    }, 500);
                },
                upvoteComment: function (data, success, error) {
                    $routeParams.id = data.id;
                    rest.path = 'discussionOrder';
                    rest.put(data).success(function (data) {

                    }).error(errorCallback);
                    $timeout(function () {
                        success(data);
                    }, 500);
                },
                uploadAttachments: function (dataArray, success, error, data) {
                    /*"fileURL":dataArray[0].file_url,*/
                    $(dataArray).each(function (index, dataArrays) {
                        var obj = {
                            "order_id": $scope.jobDiscussionRedirect,
                            "user_id": $window.localStorage.getItem("session_iUserId"),
                            "fullname": $window.localStorage.getItem("session_vUserName"),
                            "profile_picture_url": 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic"),
                            "fileURL": "uploads/discussionfile/" + dataArray[index].file.name2,
                            "fileMimeType": dataArray[index].file.type,
                            "created": dataArray[index].created,
                            "modified": dataArray[index].modified,
                            "created_by_current_user": '1',
                            "upvote_count": '0',
                            "job_id": defaultParamsJobid,
                            "user_has_upvoted": '0',
                            "read_id": $window.localStorage.getItem("session_iUserId") + ',',

                        }
                        rest.path = "discussionOrder";
                        rest.post(obj).success(function (info) {

                        }).error(errorCallback);
                        dataArray[0].fullname = $window.localStorage.getItem("session_vUserName");
                        dataArray[0].profile_picture_url = 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic");
                    });
                    $timeout(function () {
                        success(dataArray);
                    }, 500);
                }
            });
        }, 1000);
    };
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('invoiceViewController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $uibModal, $uibModalInstance, $route, items) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    var userId = $cookieStore.get('session_iUserId');
    if (items) {
        rest.path = "viewAllInvoice/" + items + '/' + userId;
        rest.get().success(function (data) {
            $scope.invoiceList = data;

            if ($.isEmptyObject(data) == true) {
                $uibModalInstance.close();
                notification("Invoice not available", "warning");
            }

            $scope.type = items;
        }).error(errorCallback);
    }

    $scope.viewData = function (id) {
        $location.path('/invoice-show/' + id);
        $uibModalInstance.close();
    }

    $scope.cancel = function () {
        $uibModalInstance.close();
    }

}).controller('freelancerInvoiceViewController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $route, $uibModal) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.reminderBtnHideShow = false;

    if ($routeParams.id) {
        rest.path = "invoiceViewOne/" + $routeParams.id;
        rest.get().success(function (data) {
            $scope.invoiceDetail = data[0];
            $scope.invoiceDetail.invoice_date = moment($scope.invoiceDetail.invoice_date).format($window.localStorage.getItem('global_dateFormat'));
            $scope.vatNo = '';
            $scope.clientCity = $scope.clientCountry = $scope.clientZipcode = $scope.clientState = '';
            if ($scope.invoiceDetail.clientAddresDetail) {
                let clientAddDetail = JSON.parse($scope.invoiceDetail.clientAddresDetail);
                angular.forEach(clientAddDetail, function (clientAddress, i) {
                    if (clientAddress.id == 'address1_locality') {
                        $scope.clientCity = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_administrative_area_level_1') {
                        $scope.clientState = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_country') {
                        $scope.clientCountry = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_postal_code') {
                        $scope.clientZipcode = clientAddress.value;
                    }
                })
            }
            $scope.freelanceCity = $scope.freelanceCountry = $scope.freelanceZipcode = $scope.freelanceState = '';
            if ($scope.invoiceDetail.freelanceAddressDetail) {
                let freelanceAddDetail = JSON.parse($scope.invoiceDetail.freelanceAddressDetail);
                
                angular.forEach(freelanceAddDetail, function (freelanceAddress, i) {
                    if (freelanceAddress.id == 'address1_locality') {
                        $scope.freelanceCity = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_administrative_area_level_1') {
                        $scope.freelanceState = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_country') {
                        $scope.freelanceCountry = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_postal_code') {
                        $scope.freelanceZipcode = freelanceAddress.value;
                    }
                })
            }
            if ($scope.invoiceDetail.clientVatinfo) {
                let clntpaymentInfo = JSON.parse($scope.invoiceDetail.clientVatinfo);
                $scope.invoiceDetail.clientVatinfo = clntpaymentInfo.tax_id;
            }
            $scope.currencyType = '€';
            $scope.currencyPaymentMethod == 'Bank Transfer';

            rest.path = "getUserDataById/" + $scope.invoiceDetail.freelanceId;
            rest.get().success(function (dataUser) {
                //$scope.userData = dataUser.userData;
                $scope.userPaymentData = dataUser.userPaymentData;

                if (dataUser.userPaymentData.vPaymentInfo) {
                    let vpaymentInfo = JSON.parse(dataUser.userPaymentData.vPaymentInfo);
                    $scope.vatNo = vpaymentInfo.tax_id;
                }
                if ($scope.userPaymentData.vBankInfo) {
                    //var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.currencyType = $scope.vBankInfo.currency_code.split(',')[1];
                    $scope.vBankInfo.currency_code = $scope.vBankInfo.currency_code.split(',')[0];
                    
                    //$scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.currencyPaymentMethod = $scope.vBankInfo.payment_method;
                }

                if ($scope.currencyPaymentMethod == 'Bank Transfer') {
                    $timeout(function () {
                        $("#Bank").prop('checked', true);
                    }, 100);

                } else {
                    $timeout(function () {
                        $("#Paypal").prop('checked', true);
                    }, 100);
                }

                $scope.invoiceDetail.payment = $scope.currencyPaymentMethod;

            }).error(errorCallback);

            $scope.invoiceList = data;
            $scope.grandJobTotal = 0;
            angular.forEach($scope.invoiceList, function (val, i) {
                if (val.item) {
                    angular.forEach(val.item, function (v, i) {
                        $scope.grandJobTotal += v.itemTotal;
                    })
                }
            })

            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(data[0].created_date, data[0].number_of_days);
            
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            var mobileNo = JSON.parse($scope.invoiceDetail.freelancePhone).mobileNumber;
            var countryCode = JSON.parse($scope.invoiceDetail.freelancePhone).countryTitle;
            $scope.invoiceDetail.freelancePhone = '(' + countryCode.split(':')[1].trim() + ')' + ' ' + mobileNo;

            var mobileNo1 = JSON.parse($scope.invoiceDetail.companyPhone).mobileNumber;
            var countryCode1 = JSON.parse($scope.invoiceDetail.companyPhone).countryTitle;
            $scope.invoiceDetail.companyPhone = '(' + countryCode1.split(':')[1].trim() + ')' + ' ' + mobileNo1;

            var newPaydueDate = TodayAfterNumberOfDays($scope.invoiceDetail.created_date, $scope.invoiceDetail.number_of_days)
            if (($scope.invoiceDetail.invoice_type != 'draft' && $scope.invoiceDetail.invoice_status != 'Cancel' && $scope.invoiceDetail.invoice_status != 'Complete' && $scope.invoiceDetail.is_approved == 1)) {
                if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
                    $scope.reminderBtnHideShow = true;
                }
            }

        }).error(errorCallback);
    }

    $scope.getInvoicePartPayments = function () {
        rest.path = "getInvoicePartPayments/" + $routeParams.id;
        rest.get().success(function (partPayments) {
            $scope.partPaymentList = partPayments;
            
        });
    }
    $scope.getInvoicePartPayments();

    $scope.printIt = function (number) {
        kendo.drawing.drawDOM($("#exportable")).then(function (group) {
            group.options.set("font", "12px DejaVu Sans");
            group.options.set("pdf", {
                margin: {
                    left: "40mm",
                    top: "0mm",
                    right: "40mm",
                    bottom: "0mm"
                }
            });
            kendo.drawing.pdf.saveAs(group, number + ".pdf");
        });
    }

    $timeout(function () {
        // var newPaydueDate = TodayAfterNumberOfDays($scope.invoiceDetail.created_date, $scope.invoiceDetail.number_of_days)
        // if(($scope.invoiceDetail.invoice_type != 'draft' && $scope.invoiceDetail.invoice_status != 'Cancel' && $scope.invoiceDetail.invoice_status != 'Complete' && $scope.invoiceDetail.is_approved == 1)){
        //     if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
        //         $scope.reminderBtnHideShow = true;
        //     }
        // }
    }, 500);

    $scope.sendRemiderinvoice = function (number) {
        kendo.drawing.drawDOM($("#exportable"))
            .then(function (group) {
                // Render the result as a PDF file
                return kendo.drawing.exportPDF(group, {
                    //paperSize: "auto",
                });
            })
            .done(function (data) {
                $scope.invoicemailDetail = {
                    'pdfData': data,
                    'invoiceno': number,
                    'invoice_id': $routeParams.id,
                    'freelanceEmail': $scope.invoiceDetail.freelanceEmail,
                    'freelanceName': $scope.invoiceDetail.freelanceName,
                    'emailRemind1': $scope.invoiceDetail.emailRemind1,
                    'emailRemind2': $scope.invoiceDetail.emailRemind2,
                };
                rest.path = 'sendInvoiceMail';
                rest.post($scope.invoicemailDetail).success(function (data) {
                    if (data.status == 200) {
                        notification('Reminder mail has been sent successfully', 'success');
                    }
                }).error(errorCallback);
            });
    }

}).controller('InvoiceCreateController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.invoiceList = [];
    $scope.editInvoiceField = true;
    $scope.taxPercentage = 0;
    $scope.invoiceNumOfdays = 30;
    //get data of invoice

    if ($cookieStore.get('invoiceJobId').length) {
        var obj = [];
        angular.forEach($cookieStore.get('invoiceJobId'), function (val, i) {
            obj.push({ "id": val });
        });

        $scope.invoiceLt = {};
        $scope.invoiceLt.id = obj;
        rest.path = "invoiceCreate";
        rest.post($scope.invoiceLt).success(function (data) {
            $scope.invoiceDetail = data[0];
            
            if ($scope.invoiceDetail.clientVatinfo) {
                const clientPayment = JSON.parse($scope.invoiceDetail.clientVatinfo);
                $scope.invoiceDetail.clientVatinfo = clientPayment.tax_id ? clientPayment.tax_id : '';
            }
            $scope.vatNo = '';
            $scope.clientCity = $scope.clientCountry = $scope.clientZipcode = $scope.clientState = '';
            if ($scope.invoiceDetail.clientAddresDetail) {
                let clientAddDetail = JSON.parse($scope.invoiceDetail.clientAddresDetail);
                angular.forEach(clientAddDetail, function (clientAddress, i) {
                    if (clientAddress.id == 'address1_locality') {
                        $scope.clientCity = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_administrative_area_level_1') {
                        $scope.clientState = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_country') {
                        $scope.clientCountry = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_postal_code') {
                        $scope.clientZipcode = clientAddress.value;
                    }
                })
            }
            $scope.freelanceCity = $scope.freelanceCountry = $scope.freelanceZipcode = $scope.freelanceState = '';
            if ($scope.invoiceDetail.freelanceAddressDetail) {
                let freelanceAddDetail = JSON.parse($scope.invoiceDetail.freelanceAddressDetail);
                
                angular.forEach(freelanceAddDetail, function (freelanceAddress, i) {
                    if (freelanceAddress.id == 'address1_locality') {
                        $scope.freelanceCity = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_administrative_area_level_1') {
                        $scope.freelanceState = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_country') {
                        $scope.freelanceCountry = freelanceAddress.value;
                    }
                    if (freelanceAddress.id == 'address1_postal_code') {
                        $scope.freelanceZipcode = freelanceAddress.value;
                    }
                })
            }
            $scope.currencyType = '€ ';
            $scope.currencyPaymentMethod == 'Bank Transfer'
            rest.path = "getUserDataById/" + $scope.invoiceDetail.freelanceId;
            rest.get().success(function (dataUser) {
                
                $scope.userPaymentData = dataUser.userPaymentData;
                if (dataUser.userPaymentData && dataUser.userPaymentData.vPaymentInfo) {
                    let vpaymentInfo = JSON.parse(dataUser.userPaymentData.vPaymentInfo);
                    $scope.vatNo = vpaymentInfo.tax_id;
                    $scope.taxPercentage = dataUser.userPaymentData.tax_percentage ? dataUser.userPaymentData.tax_percentage : 0;
                    
                }
                
                if ($scope.userPaymentData && $scope.userPaymentData.vBankInfo) {
                    //var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    //$scope.currencyType = $scope.vBankInfo.currency_code.split(',')[1];
                    $scope.vBankInfo.currency_code = $scope.vBankInfo.currency_code.split(',')[0];
                    //$scope.vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                    $scope.currencyPaymentMethod = $scope.vBankInfo.payment_method;
                }
                if ($scope.currencyPaymentMethod == 'Bank Transfer') {
                    $timeout(function () {
                        $("#Bank").prop('checked', true);
                    }, 100);
                } else {
                    $timeout(function () {
                        $("#Paypal").prop('checked', true);
                    }, 100);
                }

                $scope.invoiceDetail.payment = $scope.currencyPaymentMethod;

            }).error(errorCallback);

            // Currency display for invoice
            // rest.path = 'customerpriceAll/' + 2;  //2 for external userID
            // rest.get().success(function (data) {
            //     const currency = data.filter(pd => {
            //         if(pd.resource_id == $scope.invoiceDetail.freelanceId){
            //             $scope.currencyType = (pd.price_currency).toString().includes(',') ? (pd.price_currency).split(',')[0] : 'EUR';
            //             return pd;
            //         }
            //     })
            // })

            $scope.currencyType = ($scope.invoiceDetail.freelance_currency).toString().includes(',') ? ($scope.invoiceDetail.freelance_currency).split(',')[0] : 'EUR';
            
            var mobileNo = JSON.parse($scope.invoiceDetail.freelancePhone).mobileNumber;
            var countryCode = JSON.parse($scope.invoiceDetail.freelancePhone).countryTitle;
            $scope.invoiceDetail.freelancePhone = '(' + countryCode.split(':')[1].trim() + ')' + ' ' + mobileNo;

            var mobileNo1 = JSON.parse($scope.invoiceDetail.companyPhone).mobileNumber;
            var countryCode1 = JSON.parse($scope.invoiceDetail.companyPhone).countryTitle;
            $scope.invoiceDetail.companyPhone = '(' + countryCode1.split(':')[1].trim() + ')' + ' ' + mobileNo1;
            $scope.invoiceNumOfdays = data[0].number_of_days;
            var date = new Date();
            //$scope.invoiceDetail.invoiceNumber = data[0].poNumber.split('_')[0] + '_' + data[0].jobCode + '_' + pad(data[0].invoiceCount + 1, 3);
            $scope.invoiceDetail.invoiceNumber = 'S-' + pad(data[0].invoiceCount + 1, 6);
            $scope.invoiceDetail.custom_invoice_no = $scope.invoiceDetail.invoiceNumber;
            $scope.invoiceDetail.invoiceDate = date;
            $scope.invoiceDetail.job_id = obj;
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(date, data[0].number_of_days);
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            
            //$scope.invoiceDetail.invoice_date = $filter('globalDtFormat')(TodayAfterNumberOfDays($scope.invoiceDetail.invoice_date, 0));
            $scope.invoiceDetail.invoice_date = $filter('globalDtFormat')(TodayAfterNumberOfDays(date, 0));
            
            $scope.invoiceList = data;
            
            $scope.vat = 0;
            $scope.invoiceTotal = 0;
            $scope.grandTotal = 0;
            angular.forEach($scope.invoiceList, function (val, i) {
                if (val.item) {
                    var itemTotal = 0;
                    angular.forEach(val.item, function (v, i) {
                        //$scope.grandTotal += v.itemTotal;
                        //$scope.invoiceTotal += v.itemTotal;
                        itemTotal += v.itemTotal;
                    })
                    $scope.invoiceTotal += val.price_per_job;

                    //$scope.invoiceList[i].job.itemTotalVal = $filter('customNumber')(itemTotal);
                    $scope.invoiceList[i].price_per_job = $filter('customNumber')(val.price_per_job);
                }
            })
            let taxRate = $scope.invoiceList[0].tax_percentage ? $scope.invoiceList[0].tax_percentage : 0;
            
            let amountTaxRate = taxRateAmountCalc($scope.invoiceTotal, taxRate);
            $scope.taxValue = amountTaxRate;
            //let itemPriceTax = parseFloat(val.scoop_value) + parseFloat(amountTaxRate);                        
                
            $scope.grandTotal = $scope.invoiceTotal + parseFloat(amountTaxRate);
            $scope.invoiceTotal = $filter('customNumber')($scope.invoiceTotal);
        });
    }

    //change jobitem price module
    //$scope.vat = 0;
    $scope.changeInvoiceField = function (index, parentIndex, itemVal = 0, type = '') {
        var invoiceSum = 0;
        $(".invoiceCal").each(function () {
            var invPrice = numberFormatCommaToPoint(this.value)
            if (!isNaN(invPrice) && this.value.length != 0) {
                invoiceSum += parseFloat(invPrice);
            }
        });
        if ($scope.vat && $scope.vat.indexOf(',') > -1) {
            $scope.vat = numberFormatCommaToPoint($scope.vat);
        }
        if (type == 'vat') {
            $scope.vat = numberFormatCommaToPoint(itemVal);
            //$scope.grandTotal = parseFloat(invoiceSum) + parseFloat($scope.vat);
            var invoiceTotal = $scope.invoiceTotal
            if ($scope.invoiceTotal.indexOf(',') > -1) {
                invoiceTotal = numberFormatCommaToPoint($scope.invoiceTotal);
            }
            $scope.grandTotal = parseFloat(invoiceTotal) + parseFloat($scope.vat);
            //$scope.grandTotal = parseFloat(invoiceSubTotal) + parseFloat(invoiceVat);
        }
        if (type == 'invoiceTotal') {
            $scope.invoiceTotal = numberFormatCommaToPoint(itemVal);
            $scope.grandTotal = parseFloat($scope.invoiceTotal) + parseFloat($scope.vat);
            if ($scope.invoiceTotal.indexOf('.') > -1 && $scope.invoiceTotal.indexOf(',') == -1)
                $scope.invoiceTotal = $filter('customNumber')($scope.invoiceTotal);;
            //$scope.grandTotal = parseFloat($scope.invoiceTotal) + parseFloat(invoiceVat);
        }
        if (type == 'itemPrice') {
            $scope.grandTotal = parseFloat(invoiceSum) + parseFloat($scope.vat);
            $scope.invoiceTotal = $filter('customNumber')(invoiceSum);
            $scope.vat = ($scope.vat == 0) ? 0 : $scope.vat;
            angular.element('#invSubtotal').val($scope.invoiceTotal);
        }
        $scope.vat = $filter('customNumber')($scope.vat);
    }

    $scope.changeCreateDate = function(input){
        if(input){
            let dtInput = originalDateFormatNew(input);
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(dtInput, $scope.invoiceNumOfdays);
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
        }
    }

    $scope.save = function (frmId, invoiceType) {
        if ($scope.invoiceD == undefined || $scope.invoiceD == null || $scope.invoiceD == "") {
            $scope.invoiceData = {};
        }
        switch (invoiceType) {
            case "save":
                $scope.invoiceData.invoice_type = invoiceType;
                break;
            case "draft":
                $scope.invoiceData.invoice_type = invoiceType;
                break;
        }
        $scope.invoiceData.freelance_id = $scope.invoiceDetail.freelanceId;
        $scope.invoiceData.createdBy = $window.localStorage.getItem('session_iUserId');
        $scope.invoiceData.customer_id = $scope.invoiceDetail.clientId;
        $scope.invoiceData.job_id = JSON.stringify(obj);
        $scope.invoiceData.payment_type = $scope.invoiceDetail.payment;
        $scope.invoiceData.invoice_number = $scope.invoiceDetail.invoiceNumber;
        $scope.invoiceData.custom_invoice_no = $scope.invoiceDetail.custom_invoice_no;

        $scope.invoiceData.vat = numberFormatCommaToPoint($scope.vat);
        $scope.invoiceData.job_total = numberFormatCommaToPoint($scope.invoiceTotal);
        $scope.invoiceData.Invoice_cost = $scope.grandTotal;
        $scope.invoiceData.invoice_date = originalDateFormatNew($scope.invoiceDetail.invoice_date);

        $scope.invoiceData.job = [];
        $scope.invoiceList.forEach(element => {
            const elItemID = element.jobId;
            const elIntemVal = $('input[name=itemVal_' + element.jobId).val();
            $scope.invoiceData.job.push({
                'id': elItemID,
                'value': numberFormatCommaToPoint(elIntemVal)
            })
        });

        if ($scope.invoiceDetail.payment) {
            rest.path = "invoiceSave";
            rest.post($scope.invoiceData).success(function (data) {
                if (data.status == 422) {
                    notification('Invoice already added for this job.', 'error');
                } else {
                    notification('Successfully inserted.', 'success');
                    if (data) {
                        $location.path('/invoice-show/' + data.inserted_id);
                    } else {
                        $location.path('/invoice-detail');
                    }
                }
            });
        } else {
            notification("Please add payment detail", 'warning');
        }
    }

    $scope.cancel = function () {
        $location.path('/invoice-detail');
    }

}).controller('clientInvoiceCreateController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.invoiceList = [];
    $scope.currencyType = 'EUR';
    $scope.invoiceNumOfdays = 30;
            
    //get data of invoice
    if ($cookieStore.get('invoiceScoopId').length) {
        var obj = [];
        angular.forEach($cookieStore.get('invoiceScoopId'), function (val, i) {
            obj.push({ "id": val });
        });

        $scope.invoiceLt = {};
        $scope.invoiceLt.id = obj;
        rest.path = "clientInvoiceCreate";
        rest.post($scope.invoiceLt).success(function (data) {
            
            $scope.invoiceDetail = data[0];
            
            if ($scope.invoiceDetail.clientVatinfo) {
                const clientPayment = JSON.parse($scope.invoiceDetail.clientVatinfo);
                $scope.invoiceDetail.clientVatinfo = clientPayment.tax_id ? clientPayment.tax_id : '';
            }
            $scope.invoiceDetail.tax_rate = $scope.invoiceDetail.tax_rate ? $scope.invoiceDetail.tax_rate : 0 ;
            $scope.clientZipcode = $scope.clientCountry = $scope.clientCity = '';
            if ($scope.invoiceDetail.companyAddressDtl) {
                let clientAddDetail = JSON.parse($scope.invoiceDetail.companyAddressDtl);
                angular.forEach(clientAddDetail, function (clientAddress, i) {
                    if (clientAddress.id == 'address1_locality') {
                        $scope.clientCity = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_administrative_area_level_1') {
                        $scope.clientState = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_country') {
                        $scope.clientCountry = clientAddress.value;
                    }
                    if (clientAddress.id == 'address1_postal_code') {
                        $scope.clientZipcode = clientAddress.value;
                    }
                })

            }
            rest.path = "customerpriceAll/1";
            rest.get().success(function (dataPrice) {
                
                dataPrice.filter( (el) =>{
                    if(el.resource_id == $scope.invoiceDetail.clientId){
                        //$scope.currencyType = el.price_currency.includes(',') ?  el.price_currency.split(',')[0] : 'EUR';
                        
                    }
                })
            })    
            $scope.currencyType = $scope.invoiceDetail && $scope.invoiceDetail.client_currency.includes(',') ?  $scope.invoiceDetail.client_currency.split(',')[0] : 'EUR';

            rest.path = "getUserDataById/" + $scope.invoiceDetail.freelanceId;
            rest.get().success(function (dataUser) {
                $scope.userPaymentData = dataUser.userPaymentData;
                //var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                var vBankInfo = $scope.invoiceDetail['vBankInfo'][0];
                $scope.vBankInfo = $scope.invoiceDetail['vBankInfo'][0];
                //$scope.currencyType = vBankInfo.currency_code.split(',')[1];
                
                //$scope.currencyType = vBankInfo.currency_code;

                $scope.currencyPaymentMethod = 'Bank Transfer';
                //$scope.vBankInfo.currency_code = 'EUR,€'; 
                //$scope.currencyType = '€ ';
                if ($scope.currencyPaymentMethod == 'Bank Transfer') {
                    $timeout(function () {
                        $("#Bank").prop('checked', true);
                    }, 100);
                } else {
                    $timeout(function () {
                        $("#Paypal").prop('checked', true);
                    }, 100);
                }

                $scope.invoiceDetail.payment = $scope.currencyPaymentMethod;

            }).error(errorCallback);

            var mobileNo = $scope.invoiceDetail.freelancePhone ? JSON.parse($scope.invoiceDetail.freelancePhone).mobileNumber : '';
            var countryCode = $scope.invoiceDetail.freelancePhone ? JSON.parse($scope.invoiceDetail.freelancePhone).countryTitle : ':';
            $scope.invoiceDetail.freelancePhone = '(' + countryCode.split(':')[1].trim() + ')' + ' ' + mobileNo;
        
            var mobileNo1 = $scope.invoiceDetail.companyPhone ? JSON.parse($scope.invoiceDetail.companyPhone).mobileNumber : '';
            var countryCode1 = $scope.invoiceDetail.companyPhone ? JSON.parse($scope.invoiceDetail.companyPhone).countryTitle : ':';
            $scope.invoiceDetail.companyPhone = '(' + countryCode1.split(':')[1].trim() + ')' + ' ' + mobileNo1;

            var date = new Date();
            
            $scope.invoiceNumOfdays = data[0].number_of_days;
            
            //$scope.invoiceDetail.invoiceNumber = data[0].orderNumber + '_' + pad(data[0].invoiceCount + 1, 3);
            $scope.invoiceDetail.invoiceNumber = 'S-' + pad(data[0].invoiceCount + 1, 6);
            $scope.invoiceDetail.invoiceDate = date;
            $scope.invoiceDetail.invoice_date = $filter('globalDtFormat')(TodayAfterNumberOfDays(date, 0) );
            $scope.invoiceDetail.scoop_id = obj;
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(date, data[0].number_of_days);
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            
            $scope.invoiceList = data;
            

            // $scope.grandTotal = 0;
            // angular.forEach($scope.invoiceList, function(val, i) {
            //     if (val.item) {
            //         angular.forEach(val.item, function(v, i) {
            //             $scope.grandTotal += v.itemTotal;
            //         })
            //     }
            // })
            $scope.vatTax = 0;
            $scope.vatAmount = 0;
            $scope.invoiceTotal = 0;
            $scope.grandTotal = 0;
            angular.forEach($scope.invoiceList, function (val, i) {
                if (val.item) {
                    var itemTotal = 0;
                    angular.forEach(val.item, function (v, i2) {
                        //$scope.invoiceTotal += v.itemTotal;
                        itemTotal += v.itemTotal;
                    })
                }
                $scope.invoiceList[i].tax_rate = $scope.invoiceList[i].tax_rate ? $scope.invoiceList[i].tax_rate : 0;
                $scope.vatTax = $scope.invoiceList[i].tax_rate;    
                //let amountTaxRate = taxRateAmountCalc(val.scoop_value, $scope.invoiceList[i].tax_rate);
                //let itemPriceTax = parseFloat(val.scoop_value) + parseFloat(amountTaxRate);                        
                $scope.invoiceTotal += parseFloat(val.scoop_value);
                $scope.invoiceList[i].item.itemTotalVal = $filter('customNumber')(val.scoop_value);
                $scope.invoiceList[i].item.priceWithTax = parseFloat(val.scoop_value);
                //$scope.invoiceList[i].item.priceWithTax = itemPriceTax;
                //$scope.invoiceList[i].itemPriceTax = $filter('customNumber')(itemPriceTax);
            })
            //$scope.grandTotal = $scope.invoiceTotal;
            $scope.vatAmount = taxRateAmountCalc($scope.invoiceTotal, $scope.vatTax);
            $scope.grandTotal = $scope.invoiceTotal + parseFloat($scope.vatAmount);
            $scope.invoiceTotal = $filter('customNumber')($scope.invoiceTotal);


        });
    }

    $scope.changeCreateDate = function(input){
        if(input){
            let dtInput = originalDateFormatNew(input);
            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(dtInput, $scope.invoiceNumOfdays);
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
        }
    }

    $scope.vat = 0;
    //change jobitem price module
    $scope.changeInvoiceField = function (index, parentIndex, itemVal = 0, type = '') {
        var invoiceSum = 0;
        $(".invoiceCal").each(function (indx) {
            var invPrice = numberFormatCommaToPoint(this.value)
            if (!isNaN(invPrice) && this.value.length != 0) {
                //let amountTaxRate = taxRateAmountCalc(invPrice, $scope.invoiceList[0].tax_rate);
                //let itemPriceTax = parseFloat(invPrice) + parseFloat(amountTaxRate);                        
                $('#priceWithTax'+indx).text($filter('customNumber')(invPrice));
                //$('#priceWithTax'+indx).text($filter('customNumber')(itemPriceTax));
                //$scope.invoiceTotal = $filter('customNumber')(itemPriceTax);
                invoiceSum += parseFloat(invPrice);
            }
        });
        if (type == 'invoiceTotal') {
            $scope.invoiceTotal = numberFormatCommaToPoint(itemVal);
            $scope.grandTotal = parseFloat($scope.invoiceTotal) + parseFloat($scope.vat);
        }
        if (type == 'itemPrice') {
            $scope.vatAmount = taxRateAmountCalc(invoiceSum, $scope.vatTax);
            $scope.grandTotal = parseFloat(invoiceSum) + parseFloat($scope.vatAmount);
            $scope.invoiceTotal = $filter('customNumber')(invoiceSum);
            $scope.totalDue = $scope.grandTotal - $scope.invoiceList[0].paid_amount;
            angular.element('#invSubtotal').val($scope.invoiceTotal);
        }
    }

    $scope.save = function (frmId, invoiceType) {
        if ($scope.invoiceD == undefined || $scope.invoiceD == null || $scope.invoiceD == "") {
            $scope.invoiceData = {};
        }

        switch (invoiceType) {
            case "save":
                $scope.invoiceData.invoice_type = invoiceType;
                break;
            case "draft":
                $scope.invoiceData.invoice_type = invoiceType;
                break;
        }

        $scope.invoiceData.freelance_id = $scope.invoiceDetail.freelanceId;
        $scope.invoiceData.customer_id = $scope.invoiceDetail.clientId;
        $scope.invoiceData.scoop_id = JSON.stringify(obj);
        $scope.invoiceData.payment_type = $scope.invoiceDetail.payment;
        $scope.invoiceData.invoice_number = $scope.invoiceDetail.invoiceNumber;

        $scope.invoiceData.vat = $scope.vat;
        //$scope.invoiceData.item_total = $scope.invoiceTotal;
        $scope.invoiceData.item_total = numberFormatCommaToPoint($scope.invoiceTotal);
        $scope.invoiceData.Invoice_cost = $scope.grandTotal;

        $scope.invoiceData.invoice_date = originalDateFormatNew($scope.invoiceDetail.invoice_date);
        
        //$scope.upInvoiceData.item_total = numberFormatCommaToPoint($scope.invoiceTotal)  
        // $scope.upInvoiceData.vat = $scope.vat
        // $scope.upInvoiceData.Invoice_cost = $scope.grandTotal;  
        $scope.invoiceData.item = [];
        $scope.invoiceList.forEach(element => {
            const elItemID = element.itemId;
            const elIntemVal = $('input[name=itemVal_' + element.itemId).val();
            $scope.invoiceData.item.push({
                'id': elItemID,
                'value': numberFormatCommaToPoint(elIntemVal)
            })
        });
        //

        if ($scope.invoiceDetail.payment) {
            rest.path = "clientinvoiceSave";
            rest.post($scope.invoiceData).success(function (data) {
                if (data.status == 422) {
                    notification('Invoice already added for this Project / Scoop.', 'error');
                } else {
                    if (data['inserted_id']) {
                        notification('Invoice created successfully', 'success');
                        $location.path('/client-invoice-show/' + data['inserted_id']);
                    } else {
                        //$location.path('/invoice-client');
                        $location.path('/client-invoice-create');
                    }
                }
            });
        } else {
            notification("Please add payment detail", 'warning');
        }
    }

    $scope.cancel = function () {
        $location.path('/invoice-client');
    }

}).controller('clientInvoiceViewController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $route, $uibModal) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.is_disabled = false;

    if ($routeParams.id) {
        rest.path = "clientInvoiceViewOne/" + $routeParams.id;
        rest.get().success(function (data) {
            $scope.invoiceDetail = data[0];
            
            if ($scope.invoiceDetail.clientVatinfo) {
                const clientPayment = JSON.parse($scope.invoiceDetail.clientVatinfo);
                $scope.invoiceDetail.clientVatinfo = clientPayment.tax_id ? clientPayment.tax_id : '';
            }
            $scope.clientZipcode = $scope.clientCountry = $scope.clientCity = '';
            if ($scope.invoiceDetail.companyAddressDtl) {
                const companyAddressDtl = JSON.parse($scope.invoiceDetail.companyAddressDtl);
                if (companyAddressDtl.length > 4) {
                    $scope.clientCity = (companyAddressDtl[1].value) ? companyAddressDtl[1].value + ', ' : '';
                    const stateAddr = (companyAddressDtl[2].value) ? companyAddressDtl[2].value + ', ' : '';
                    $scope.clientCountry = (companyAddressDtl[3].value) ? companyAddressDtl[3].value : '';
                    $scope.clientZipcode = (companyAddressDtl[4].value) ? companyAddressDtl[4].value : '';
                    $scope.invoiceDetail.companyAddressDtl = $scope.clientCity;
                    $scope.clientCountry = $scope.clientCountry;
                }

            }

            rest.path = "getUserDataById/" + $scope.invoiceDetail.freelanceId;
            rest.get().success(function (dataUser) {
                //$scope.userData = dataUser.userData;
                //$scope.userPaymentData = dataUser.userPaymentData;
                $scope.userPaymentData = dataUser.userPaymentData;
                //var vBankInfo = JSON.parse($scope.userPaymentData.vBankInfo);
                var vBankInfo = $scope.invoiceDetail['vBankInfo'][0];
                $scope.vBankInfo = $scope.invoiceDetail['vBankInfo'][0];
                $scope.currencyType = vBankInfo.currency_code.split(',')[1];
                //$scope.currencyType = vBankInfo.currency_code;
                $scope.currencyPaymentMethod = 'Bank Transfer';
                //$scope.vBankInfo.currency_code = 'EUR,€'; 
                $scope.currencyType = '€ ';
                if ($scope.currencyPaymentMethod == 'Bank Transfer') {
                    $timeout(function () {
                        $("#Bank").prop('checked', true);
                    }, 100);
                } else {
                    $timeout(function () {
                        $("#Paypal").prop('checked', true);
                    }, 100);
                }

                $scope.invoiceDetail.payment = $scope.currencyPaymentMethod;

            }).error(errorCallback);

            $scope.invoiceList = data;
            
            $scope.grandTotal = 0;
            angular.forEach($scope.invoiceList, function (val, i) {
                if (val.item) {
                    angular.forEach(val.item, function (v, i) {
                        $scope.grandTotal += v.itemTotal;
                    })
                }
            })

            $scope.invoiceDetail.paymentDueDate = TodayAfterNumberOfDays(data[0].created_date, data[0].number_of_days);
            
            $scope.invoiceDetail.paymentDueDate = $scope.invoiceDetail.paymentDueDate.split('.').reverse().join('-');
            var mobileNo = JSON.parse($scope.invoiceDetail.freelancePhone).mobileNumber;
            var countryCode = JSON.parse($scope.invoiceDetail.freelancePhone).countryTitle;
            $scope.invoiceDetail.freelancePhone = '(' + countryCode.split(':')[1].trim() + ')' + ' ' + mobileNo;

            var mobileNo1 = JSON.parse($scope.invoiceDetail.companyPhone).mobileNumber;
            
            var countryCode1 = JSON.parse($scope.invoiceDetail.companyPhone).countryTitle;
            $scope.invoiceDetail.companyPhone = '(' + countryCode1.split(':')[1].trim() + ')' + ' ' + mobileNo1;

            if ($scope.invoiceDetail.invoice_status == 'Irrecoverable') {
                angular.element('#irrecoverable').addClass('btn-danger');
                angular.element('#irrecoverable').removeClass('btn-info');
                $scope.is_disabled = true;
            }
            // send Outstanding invoice Button
            $scope.reminderBtnHideShow = false;
            $timeout(function () {
                var newPaydueDate = TodayAfterNumberOfDays($scope.invoiceDetail.created_date, $scope.invoiceDetail.number_of_days)
                if ($scope.invoiceDetail.invoice_type != 'draft' && $scope.invoiceDetail.invoice_status != 'Complete' && $scope.invoiceDetail.invoice_status != 'Cancel') {
                    if (newPaydueDate < dateFormat(new Date()).split(".").reverse().join("-")) {
                        $scope.reminderBtnHideShow = true;
                    }
                }
            }, 500);

        }).error(errorCallback);
    }

    $scope.getInvoicePartPayments = function () {
        rest.path = "getClientInvoicePartPayments/" + $routeParams.id;
        rest.get().success(function (partPayments) {
            $scope.partPaymentList = partPayments;
        });
    }
    $scope.getInvoicePartPayments();

    $scope.printIt = function (number) {
        kendo.drawing.drawDOM($("#exportable")).then(function (group) {
            group.options.set("font", "12px DejaVu Sans");
            group.options.set("paperSize", "A4");
            group.options.set("pdf", {
                margin: {
                    left: "40mm",
                    top: "0mm",
                    right: "40mm",
                    bottom: "0mm"
                }
            });
            kendo.drawing.pdf.saveAs(group, number + ".pdf");
        });
    }

    // Start Invoice Outstanding with reminder - invoices which are past their due date and reminder has been sent to the client 
    $scope.sendRemiderinvoice = function (number) {
        kendo.drawing.drawDOM($("#exportable"))
            .then(function (group) {
                // Render the result as a PDF file
                return kendo.drawing.exportPDF(group, {
                    //paperSize: "auto",
                });
            })
            .done(function (data) {
                $scope.invoicemailDetail = {
                    'pdfData': data,
                    'invoice_id': $scope.invoiceDetail.invoice_id,
                    'invoiceno': $scope.invoiceDetail.invoice_number,
                    'freelanceEmail': $scope.invoiceDetail.freelanceEmail,
                    'freelanceName': $scope.invoiceDetail.freelanceName,
                    'clientCompanyName': $scope.invoiceDetail.clientCompanyName,
                    'companycontactEmail': $scope.invoiceDetail.companycontactEmail,
                    'outstanding_reminder': 1,
                };
                rest.path = 'sendClientInvoiceMail';
                rest.post($scope.invoicemailDetail).success(function (data) {
                    if (data.status == 200) {
                        notification('Reminder mail has been sent successfully', 'success');
                    }
                }).error(errorCallback);
            });
    }
    // End Invoice send Outstaing Reminder

}).controller('clientInvoiceViewPopupController', function ($scope, $log, $timeout, $window, rest, $location, $routeParams, $cookieStore, $uibModal, $uibModalInstance, $route, items) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    var userId = $cookieStore.get('session_iUserId');
    if (items) {
        rest.path = "viewAllClientInvoice/" + items + '/' + userId;
        rest.get().success(function (data) {
            $scope.invoiceList = data;

            if ($.isEmptyObject(data) == true) {
                $uibModalInstance.close();
                notification("Invoice not available", "warning");
            }

            $scope.type = items;
        }).error(errorCallback);
    }

    $scope.viewData = function (id) {
        $location.path('/client-invoice-show/' + id);
        $uibModalInstance.close();
    }

    $scope.cancel = function () {
        $uibModalInstance.close();
    }

}).controller('viewProjectController', function ($scope, $log, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    if ($routeParams.id) {
        $routeParams.id;
        rest.path = 'viewProjectCustomerDetail';
        rest.model().success(function (data) {
            $scope.customer = data;
            $window.localStorage.clientproCustomerName = $scope.customer.client;
            $window.localStorage.ContactPerson = $scope.customer.contact;
            $routeParams.ClientIdd = data['client'];
            $window.localStorage.ClientName = $routeParams.ClientIdd;
            if ($scope.customer.memo) {
                $scope.warn = true;
                $timeout(function () {
                    $scope.warn = false;
                }, 10000);
            }
        }).error(errorCallback);

        $routeParams.id;
        rest.path = 'contactPerson';
        rest.model().success(function (data) {
            angular.forEach(data, function (val, i) {
                if (val.vResourcePosition == 3) {
                    angular.element('#coordinator').html(val.vUserName);
                } else if (val.vResourcePosition == 2) {
                    angular.element('#manager').html(val.vUserName);
                } else if (val.vResourcePosition == 4) {
                    angular.element('#QASpecialist').html(val.vUserName);
                }
            })
        }).error(errorCallback);

        $routeParams.id = $routeParams.id;
        rest.path = 'generalVieData/' + $routeParams.id + '/' + $window.localStorage.ClientName;
        rest.get().success(function (data) {
            $scope.general = data;
            
            // $scope.properties = JSON.parse($scope.general.properties);
            var properties = [];
            if ($scope.general.properties) {
                angular.forEach(JSON.parse($scope.general.properties), function (val, i) {
                    rest.path = 'generalPropertiesView/' + val;
                    rest.get().success(function (data) {
                        angular.element('#' + i).html(data);
                    })
                    properties.push({
                        id: i
                    });
                })
            }
            $scope.properties = properties;
            $scope.item_number = data;

            //$scope.general.order_date = $scope.general.order_date;
            $scope.general.order_date = moment($scope.general.order_date).format($window.localStorage.getItem('global_dateFormat') + ' HH:mm A');

            $scope.general.due_date = $scope.general.due_date.split(' ')[0].split('.').reverse().join('-') + ' ' + $scope.general.due_date.split(' ')[1];
            $scope.general.due_date = moment($scope.general.due_date).format($window.localStorage.getItem('global_dateFormat') + ' HH:mm A');

            if ($scope.general.order_date == undefined) {
                var currentdate = new Date();
                $scope.general.order_date = getDatetime(currentdate);
            }
            $scope.generaldata = {};
            $scope.generaldata.order_no = $window.localStorage.orderNo;
            $scope.generaldata.abbrivation = $window.localStorage.abbrivation;

            if ($scope.general == null) {
                $scope.general = {};
                $scope.generaldata = {};
                $scope.generaldata.order_no = $window.localStorage.orderNo;
                $scope.generaldata.abbrivation = $window.localStorage.abbrivation;
                if ($scope.general.order_no == "") {

                }
            }
        }).error(errorCallback);

        $routeParams.id = $routeParams.id;
        rest.path = 'prolanguage';
        rest.model().success(function (data) {
            $scope.langList = data;
        }).error(errorCallback);

        rest.path = 'itemsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.itemList = data;
        })
    }

    if ($routeParams.id != undefined && $routeParams.id != "") {
        rest.path = 'usertask/' + $routeParams.id + '/' + $window.localStorage.userType;
        rest.get().success(function (data) {
            $scope.tasklist = data.data;
        }).error(errorCallback);
    }

    $scope.generalEmail = function (id) {
        if (id != undefined && id != " " && id != null) {
            $window.localStorage.generalMsg = id;
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'html/generalmsg.html',
                controller: 'generalmsgController',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.data;
                    }
                }
            });
        } else {
            notification('Please Add Email', 'warning');
        }
    };

    $scope.cancel = function () {
        $uibModalInstance.close();
    }

    $scope.editProjectDetail = function (id) {
        if (id) {
            rest.path = 'order/' + id + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                if (data.userName != null) {
                    $scope.orderdata = data;

                    $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                    $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                    $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                    $window.localStorage.orderNo = $scope.orderdata.order_number;
                    $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                    $window.localStorage.orderID = id;
                    $window.localStorage.iUserId = id;
                    $window.localStorage.userType = 3;
                    $window.localStorage.currentUserName = data.vClientName;
                    $window.localStorage.genfC = 1;

                    //set isNewProject to false
                    $window.localStorage.setItem("isNewProject", "false");

                    $location.path('/general/'+data.order_id);
                    $window.localStorage.orderBlock = 1;
                    $timeout(function () {
                        $scope.cancel();
                    }, 500);
                } else {
                    notification('Information not available', 'warning');
                }
            }).error(errorCallback);
        }

    };

}).controller('viewProjectPopupController', function ($scope, $log, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams, $timeout, items, $uibModalInstance, $cookieStore) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    if (items) {
        $routeParams.id = items
    }
    if ($routeParams.id) {
        $routeParams.id;
        rest.path = 'viewProjectCustomerDetail';
        rest.model().success(function (data) {
            $scope.customer = data;
            $window.localStorage.clientproCustomerName = $scope.customer.client;
            $window.localStorage.ContactPerson = $scope.customer.contact;
            $routeParams.ClientIdd = data['client'];
            $window.localStorage.ClientName = $routeParams.ClientIdd;
            if ($scope.customer.memo) {
                $scope.warn = true;
                $timeout(function () {
                    $scope.warn = false;
                }, 10000);
            }
        }).error(errorCallback);

        $routeParams.id;
        rest.path = 'contactPerson';
        rest.model().success(function (data) {
            angular.forEach(data, function (val, i) {
                if (val.vResourcePosition == 3) {
                    angular.element('#coordinator').html(val.vUserName);
                } else if (val.vResourcePosition == 2) {
                    angular.element('#manager').html(val.vUserName);
                } else if (val.vResourcePosition == 4) {
                    angular.element('#QASpecialist').html(val.vUserName);
                }
            })
        }).error(errorCallback);

        $routeParams.id = $routeParams.id;
        rest.path = 'generalVieData/' + $routeParams.id + '/' + $window.localStorage.ClientName;
        rest.get().success(function (data) {
            $scope.general = data;
            
            // $scope.properties = JSON.parse($scope.general.properties);
            var properties = [];
            if ($scope.general.properties) {
                angular.forEach(JSON.parse($scope.general.properties), function (val, i) {
                    rest.path = 'generalPropertiesView/' + val;
                    rest.get().success(function (data) {
                        angular.element('#' + i).html(data);
                    })
                    properties.push({
                        id: i
                    });
                })
            }
            $scope.properties = properties;
            $scope.item_number = data;

            //$scope.general.order_date = $scope.general.order_date;
            $scope.general.order_date = moment($scope.general.order_date).format($window.localStorage.getItem('global_dateFormat') + ' HH:mm A');

            $scope.general.due_date = $scope.general.due_date.split(' ')[0].split('.').reverse().join('-') + ' ' + $scope.general.due_date.split(' ')[1];
            $scope.general.due_date = moment($scope.general.due_date).format($window.localStorage.getItem('global_dateFormat') + ' HH:mm A');

            if ($scope.general.order_date == undefined) {
                var currentdate = new Date();
                $scope.general.order_date = getDatetime(currentdate);
            }
            $scope.generaldata = {};
            $scope.generaldata.order_no = $window.localStorage.orderNo;
            $scope.generaldata.abbrivation = $window.localStorage.abbrivation;

            if ($scope.general == null) {
                $scope.general = {};
                $scope.generaldata = {};
                $scope.generaldata.order_no = $window.localStorage.orderNo;
                $scope.generaldata.abbrivation = $window.localStorage.abbrivation;
                if ($scope.general.order_no == "") {

                }
            }
        }).error(errorCallback);

        $routeParams.id = $routeParams.id;
        rest.path = 'prolanguage';
        rest.model().success(function (data) {
            $scope.langList = data;
        }).error(errorCallback);

        rest.path = 'itemsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.itemList = data;
        })
    }

    $scope.addProjectInvoice = function (data) {
        
        var client = "";
        var flag = 0;
        var array = [];

        angular.forEach(data, function (val, i) {
            if (val.SELECTED == 1) {
                if (!client) {
                    client = val.contactName;
                }
                if (val.contactName != client) {
                    flag = 1;
                } else {
                    array.push(val.itemId);
                }
            }
        });
        
        if (flag != 1 && array.length) {
            $scope.cancel();
            $cookieStore.put('invoiceScoopId', array);
            $location.path('/client-invoice-create');
        } else {
            if (flag != 1) {
                notification("Pelase select Project Scoop", "warning");
            }
        }
    }

    if ($routeParams.id != undefined && $routeParams.id != "") {
        rest.path = 'usertask/' + $routeParams.id + '/' + $window.localStorage.userType;
        rest.get().success(function (data) {
            $scope.tasklist = data.data;
        }).error(errorCallback);
    }

    $scope.generalEmail = function (id) {
        if (id != undefined && id != " " && id != null) {
            $window.localStorage.generalMsg = id;
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'html/generalmsg.html',
                controller: 'generalmsgController',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.data;
                    }
                }
            });
        } else {
            notification('Please Add Email', 'warning');
        }
    };

    $scope.cancel = function () {
        $uibModalInstance.close();
    }

    $scope.editProjectDetail = function (id) {
        if (id) {
            rest.path = 'order/' + id + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                if (data.userName != null) {
                    $scope.orderdata = data;

                    $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                    $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                    $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                    $window.localStorage.orderNo = $scope.orderdata.order_number;
                    $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                    $window.localStorage.orderID = id;
                    $window.localStorage.iUserId = id;
                    $window.localStorage.userType = 3;
                    $window.localStorage.currentUserName = data.vClientName;
                    $window.localStorage.genfC = 1;

                    //set isNewProject to false
                    $window.localStorage.setItem("isNewProject", "false");

                    $location.path('/general/'+data.order_id);
                    $window.localStorage.orderBlock = 1;
                    $timeout(function () {
                        $scope.cancel();
                    }, 500);
                } else {
                    notification('Information not available', 'warning');
                }
            }).error(errorCallback);
        }

    };

}).controller('viewScoopPopupController', function (allLanguages, $scope, $log, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams, $timeout, items, $uibModalInstance, $cookieStore, $interval, DTOptionsBuilder, $filter, $q) {
    //debugger
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $routeParams.id = items ? items.order_id : 0;
    $scope.order_id = items ? items.order_id : 0;
    $scope.scoop_id = items ? items.scoop_id : 0;
    $scope.dateFormatGlobal = $window.localStorage.getItem('global_dateFormat');
    $scope.newchildPriceArr = [];
    
    if ($scope.order_id) {
        console.log('items-popup',items)
        //getting ProjectOrderName and indirect clint name
        rest.path = 'getClientIndirectClient/' + $scope.order_id;
        rest.get().success(function (data) {
            if (data.order_number) {
                $scope.projectOrderData = data;
                var projectOrderName = $scope.projectOrderData.abbrivation + pad($scope.projectOrderData.order_number, 4);
                $window.localStorage.setItem("projectOrderName", projectOrderName);
                $window.localStorage.setItem("indirectCustomerName", $scope.projectOrderData.indirect_customer);
                $scope.projectOrderName = $window.localStorage.getItem('projectOrderName'); 
            }
        }).error(errorCallback);

        //get single order Detail
        rest.path = 'getOrderSingle/' + $scope.order_id;
        rest.get().success(function (data) {
            $scope.orderData = data;
        }).error(errorCallback);

        rest.path = 'usertaskodueDategate/' + $scope.order_id;
        rest.get().success(function (data) {
            $scope.dueDateItem = data;
        }).error(errorCallback);

        $scope.clientpriceList = {};
        $scope.customer = {};
        rest.path = 'customer/' + $scope.order_id;
        rest.get().success(function (res) {
            $scope.customer = res;
            $scope.customerData = res;
            $scope.price_ClientID = $scope.customer.client;
        })

        rest.path = 'masterPriceitemget/' + $scope.order_id;
        rest.get().success(function (data) {
            $scope.masterPrice = data;
        }).error(errorCallback);

        // Get PriceList for client.
        $scope.scoopSpecializationArr = '';
        $scope.customerpriceAll = [];
        $scope.custPriceAll = function (data) {
            var deferred = $q.defer();
            rest.path = 'customerpriceAll/' + 1;
            rest.get().success(function (data) {
                var newdata = data;
                $scope.customerpriceAll = data;
                $scope.clientpriceList = data.filter( function (data) {
                    if(data.price_basis)
                        data.price_basis = JSON.parse(data.price_basis)
                    if(data.price_language)
                        data.price_language = JSON.parse(data.price_language)    
                    if(data.specialization)
                        data.specialization = (data.specialization.toString()).split(',');     
                    return data.resource_id == $scope.customerData.client;  
                });
                deferred.resolve(newdata);
            }).error(function () {
                deferred.reject();
            });

            return deferred.promise;
        };

        $scope.childPrice = [];
        $scope.childPriceAll = function (data) {        
            var deferredCh = $q.defer();
            rest.path = 'childPriceitemget';
            rest.get().success(function (data) {
                $scope.childPrice = data;
                
                deferredCh.resolve($scope.childPrice);
            }).error( function(){
                deferredCh.reject();
            })
            return deferredCh.promise;
        }    

        // Client Price list fetching
        $scope.changeClientPrice = function(priceId, item_id, specializationArr, langPair){
            
            if(priceId > 0){
                let clientPricelist = $scope.customerpriceAll.filter((e) => e.price_list_id == priceId )
                if(clientPricelist){
                    angular.forEach($scope.newchildPriceArr[item_id], function (val, newi) {
                        angular.forEach(clientPricelist, function (val2, i2) {
                            val2.price_basis.find(x => {
                                    if(val.child_price_id == x.childPriceId){
                                        if(val.child_price_id == x.childPriceId){
                                            if(val.itemId == item_id){
                                                $scope.newchildPriceArr[item_id][newi].rate = x.basePrice; 
                                            }
                                        }
                                        return x;
                                    }
                                });    
                        });    
                    });
                }
            }else{
                angular.forEach($scope.newchildPriceArr[item_id], function(val, i) {
                    // Default price rate 0
                    $scope.newchildPriceArr[item_id][i].rate = 0;
                    angular.forEach($scope.clientpriceList, function (val2, i2) {
                        val2.price_basis.find(x => {
                            if(val.child_price_id == x.childPriceId){
                                const spclFound = specializationArr.some(r => (val2.specialization).indexOf(r) >= 0)
                                const lngPairFound = (val2.price_language).some(r => r.languagePrice == langPair)
                                
                                if(val.child_price_id == x.childPriceId && spclFound && lngPairFound){
                                    
                                    $scope.newchildPriceArr[item_id][i].rate = x.basePrice;  
                                }
                                return x;
                            }
                        });    
                    });    
                    
                });
            }
        }
        // END Client Price list fetching
        
        //currency update
        rest.path = 'orderCurrencyMatch/' + $scope.order_id;
        rest.get().success(function (data) {
            console.log('data-currency', data)
            if (data.currency) {
                var cur = JSON.parse(data.currency);

                angular.element('#currencyCh').select2('val', cur[0].currency);
                angular.element('#crntCur').text(cur[0].currency);
                angular.element('#defCur').text(data.defCurrency);
                angular.element('#curRate').text(cur[0].curRate);

            }
        }).error(errorCallback);

        //check itemfile manager and delete
        rest.path = "itemFilemanager/" + $scope.order_id;
        rest.delete().success(function (data) {
            if (data != 'No Item') {
                $route.reload();
            }
        }).error(errorCallback);
    }

    $scope.itemfolderOpen = function (id) {
        closeWindows();
        localStorage['scoopfolderId'] = id;
        $window.localStorage.ItemClient = '';
        $window.localStorage.ItemFolderid = id;
        // start to get downloaded folder name with client name
        rest.path = 'customer/' + $scope.order_id;
        rest.get().success(function (res) {
            $scope.customer = res;
            if (res) {
                rest.path = 'client/' + $scope.customer.client;
                rest.get().success(function (cData) {
                    $scope.directClientData = cData
                    $window.localStorage.ItemClient = $scope.directClientData.vUserName;
                }).error(function (data, error, status) { });
            }
        })
        // end
        var ItemcodeNumber = angular.element('.itemCode' + id).text();
        //var ItemClient = angular.element('.itemClient'+id).text();
        $window.localStorage.ItemcodeNumber = ItemcodeNumber;
        var itemPopup = $window.open('#/filemanage/item', "popup", "width=1000,height=650");
        itemPopup.addEventListener("beforeunload", function () {
            localStorage['parentId'] = ' ';
            var id1 = $window.localStorage.getItem("scoopFolderRoot");

            // files count 
            rest.path = 'getFilestotal/' + id;
            rest.get().success(function (data) {
                if (data) {
                    $scope.Filestotal = data[0].totalfile;
                }
                //angular.element('#filescount' + id).text($scope.Filestotal);
                $('#filescount' + id).text($scope.Filestotal);
            }).error(errorCallback);
            // files couunt end
            
            return false;
        }, false);

        openWindows.push(itemPopup);

        var pollTimer = window.setInterval(function () {
            if (itemPopup.closed !== false) { // !== is required for compatibility with Opera
                window.clearInterval(pollTimer);
                // files count //
                rest.path = 'getFilestotal/' + id;
                rest.get().success(function (data) {
                    if (data) {
                        $scope.Filestotal = data[0].totalfile;
                    }
                    angular.element('#filescount' + id).text($scope.Filestotal);
                }).error(errorCallback);
                // files couunt end //
            }
        }, 200);
    }
    var getCountScoopFolder = function () {
        var count = $window.localStorage.getItem("scoopFolderCount");
        if (!count) {
            count = 0;
        }
        var id = $window.localStorage.getItem("scoopfolderId");
        
        //$('#sourceCount-'+id).text(count);
        //$('#filescount'+id).text(count);
    }
    $interval(getCountScoopFolder, 1000);

    $scope.closeItem = function (frmId) {
        $route.reload();
    }

    $scope.itemAmountChilprice = function (id) {
        rest.path = 'childPriceitemAmountget/' + id;
        rest.get().success(function (data) {
            $scope.itemAmount = data.rate;
        })
    }

    $scope.$on('pls.onLanguageChanged', function (evt, lang) {
        lang.id = lang.id.replace(/[0-9]/g, '');
        var eleId = evt.targetScope.id.replace(/\D/g, '');
        if (lang.id == 'plsSourceLang') {
            angular.element('#source_lang' + eleId).text(lang.lang.name.trim());
            var sourceField = angular.element("div#" + evt.targetScope.id).children("a.pls-selected-locale");
            var sourceImg = sourceField.children('img');
            angular.element("div#" + evt.targetScope.id).children("a.pls-selected-locale").text('');
            sourceField.append(sourceImg);
            var sourceImg = sourceField.children('img').after(lang.lang.name);
        } else if (lang.id == 'plsTargetLang') {
            angular.element('#target_lang' + eleId).text(lang.lang.name.trim());
            var targetField = angular.element("div#" + evt.targetScope.id).children("a.pls-selected-locale");
            var targetImg = targetField.children('img');
            angular.element("div#" + evt.targetScope.id).children("a.pls-selected-locale").text('');
            targetField.append(targetImg);
            var targetImg = targetField.children('img').after(lang.lang.name);
        }
        var itemIndex = parseInt(angular.element("#indexItemSource" + eleId).text());

        var source = angular.element('#source_lang' + eleId).text();
        var target = angular.element('#target_lang' + eleId).text();
        
        if ($scope.itemList[itemIndex].item_number) {
            var item_number = pad($scope.itemList[itemIndex].item_number, 3);
        } else {
            var item_number = angular.element('#item_number' + eleId).text();
        }
        if ($scope.item == undefined || $scope.item == null || $scope.item == "") {
            $scope.item = {};
        }
        if (target == undefined || target == null || target == "") {
            target = '';
        }
        if (source == undefined || source == null || source == "") {
            source = '';
        }

        var indirectCustomerName = $window.localStorage.getItem('indirectCustomerName');
        if (source && !target) {
            //$scope.itemList[itemIndex].item_name = indirectCustomerName + ' | ' + source + ' - English (US)';
            $scope.itemList[itemIndex].item_name = indirectCustomerName + ' | ' + source + ' -  ';
        } else if (!source && target) {
            //$scope.itemList[itemIndex].item_name = indirectCustomerName + ' | English (US) - ' + target;
            $scope.itemList[itemIndex].item_name = indirectCustomerName + ' | - ' + target;
        } else {
            $scope.itemList[itemIndex].item_name = indirectCustomerName + ' | ' + source + '-' + target;
        }

        $scope.stLangPair = source + ' > ' + target;
        
        $scope.changeClientPrice(0, eleId, $scope.scoopSpecializationArr, $scope.stLangPair)
    });

    $scope.plsModel = {
        languages40: allLanguages,
    };
    //console.log('$scope.plsModel',$scope.plsModel.languages40);
    $timeout(function () {
        if ($scope.plsModel) {
            angular.forEach($scope.plsModel.languages40, function (val, i) {
                if (val.is_favourite == 1) {
                    $('.allsourcelang').find('a[title="' + val.title + '"]').addClass('favlang');
                    $('.alltargetlang').find('a[title="' + val.title + '"]').addClass('favlang');
                }
            });
        }

    }, 2000);
    
    $scope.itemQuentityDelete = function (id, index, parentIndex) {
        // var totalPrice1 = $scope.itemList[parentIndex].total_price;
        // var totalPrice = totalPrice1.toFixed(2);
        // var price1 = $scope.itemPriceUni[id][index].itemTotal;
        // var price = numberFormatCommaToPoint(price1);
        // if (totalPrice == price) {
        //     $scope.itemList[parentIndex].total_price = 0;
        // } else {
        //     var total = totalPrice - price;
        //     $scope.itemList[parentIndex].total_price = total;
        // }
        $scope.itemPriceUni[id].splice(index, 1);
        //$scope.itemPriceUni[id].splice(index, 1);
        var decimalPoint = 100;
        var grandTotal = 0;
        if($scope.itemPriceUni[id].length){    
            var smPromise = new Promise((resolve, reject) => {
                $scope.itemPriceUni[id].forEach((element, indx, array) => {
                    let elVal = $scope.itemPriceUni[id][indx].itemTotal;
                    
                    elVal = (elVal != 0 || elVal != '') ? CommaToPoint4Digit(elVal) : 0;
                    var subTtl = parseFloat(elVal);
                    grandTotal += isNaN(subTtl) ? 0 : subTtl;
                    if (indx === array.length -1) resolve();
                });
            });
            smPromise.then(() => {
                var decimalPoint = decimalNumberCount(grandTotal);    
                $scope.itemList[parentIndex].total_price = Math.round(grandTotal * decimalPoint)/decimalPoint;
            });
        }else{
            $scope.itemList[parentIndex].total_price = '00';
        }
    }

    $scope.itemPriceUni = [];
    //change item price module scopp-popup
    $scope.changeItemField = function (id, index, parentIndex, totalChng = 0) {
        var quantity = $scope.itemPriceUni[id][index].quantity;
        var itemPrice = $scope.itemPriceUni[id][index].itemPrice;
        var itemTtl = $scope.itemPriceUni[id][index].itemTotal;
        var itemAmt = $scope.itemPriceUni[id][index].amtSum;
        if (!quantity) {
            quantity = 0;
            $scope.itemPriceUni[id][index].quantity = 0;
        }
        if (!itemPrice) {
            itemPrice = 0;
            $scope.itemPriceUni[id][index].itemPrice = 0;
        }
        if (!itemTtl)
            itemTtl = 0;
        //$scope.itemPriceUni[id][index].itemTotal = numberFormatComma(itemTtl);
        quantity = CommaToPoint4Digit(quantity);
        if (quantity == '')
            itemPrice = 0;
        //itemPrice = CommaToPoint4Digit(itemPrice);
        itemPrice = commaToPoint(itemPrice);

        if (itemPrice == '')
            itemPrice = 0;

        //var decimalPoint = 100;   
        var decimalPoint = decimalNumberCount(itemPrice); 
        
        var price = parseFloat(quantity) * parseFloat(itemPrice);
        price = isNaN(price) ? 0 : Math.round(price * decimalPoint)/decimalPoint

        if (totalChng > 0) {
            $scope.itemPriceUni[id][index].itemTotal = itemTtl;
        } else {
            $scope.itemPriceUni[id][index].itemTotal = price ? numberFormatComma(price) : 0;
        }
        $scope.itemPriceUni[id][index].amtSum = price;
        //$scope.itemList[parentIndex].total_price = totalPrice;
        var grandTotal = 0;
        var smPromise = new Promise((resolve, reject) => {
            $scope.itemPriceUni[id].forEach((element, indx, array) => {
                let elVal = $scope.itemPriceUni[id][indx].itemTotal;
                elVal = (elVal != 0 || elVal != '') ? CommaToPoint4Digit(elVal) : 0;
                var subTtl = parseFloat(elVal);
                grandTotal += isNaN(subTtl) ? 0 : subTtl;
                if (indx === array.length -1) resolve();
            });
        });
        smPromise.then(() => {
            var decimalPoint = decimalNumberCount(grandTotal);
            $scope.itemList[parentIndex].total_price = Math.round(grandTotal * decimalPoint)/decimalPoint;
        });
    }
    // End scoop-popup calculation on change

    $scope.joboption = [];
    rest.path = 'Jobsummeryget';
    rest.get().success(function (data) {
        $scope.joboption = data;
    }).error(errorCallback)
    
    $scope.jobchainoption = [];
    //Pass OrderId to get Client ID To Display jobchain assign to client
    rest.path = 'masterJobchainget/' + $scope.order_id;
    rest.get().success(function (data) {
        $scope.jobchainoption = data;
        
    }).error(errorCallback)

    $scope.poNumberExist = false;
    $scope.checkPoNumberExist = function (id, searchText) {
        if(searchText.length > 1){
            rest.path = 'checkItemPonumberExist/' + id +'/' + searchText;
            rest.get().success(function (data) {
                if(data){
                    $scope.poNumberExist = true;
                    angular.element("#po_numberErr" + id).text('PO number has been used before.');
                    $('#po_numberErr'+id).css('display','block');
                }else{
                    //$('#po_numberErr'+id).css('display','none');
                    angular.element("#po_numberErr" + id).text('');
                    $scope.poNumberExist = false;
                }
            });
        }else{
            angular.element("#po_numberErr" + id).text('');
            //$('#po_numberErr'+id).css('display','none');
            $scope.poNumberExist = false;
        }
    }

    $scope.workflowChange = false;
    $scope.changeWorkflow = function (id) {
        $scope.workflowChange = true; 
    }
    //*****------- Update project scoop start-------****//
    $scope.jobi = {};
    $scope.saveitems = function (formId, formIndex) {
        // check PoNumber Exist call fun
        $scope.checkPoNumberExist($scope.itemList[formIndex].itemId, $scope.itemList[formIndex].po_number);

        if (angular.element('#item-form' + formId).valid()) {
            if ($scope.order_id) {
                if ($scope.itemList[formIndex].itemId) {
                    
                    if($scope.poNumberExist){
                        notification('PO number has been used before.','warning')
                        //return false;
                    }
                    // if empty language pair
                    var srcLang = angular.element("div#plsSourceLang" + formId).children("a.pls-selected-locale").text().trim();
                    var trgLang = angular.element("div#plsTargetLang" + formId).children("a.pls-selected-locale").text().trim();
                    if(!srcLang || !trgLang){
                        notification('Please select source-target language','warning')
                        return false;
                    }
                    var itemPriceUnit = [];
                    itemPriceUnit = $scope.itemPriceUni[formId];
                    if (itemPriceUnit) {
                        for (var j = 0; j < itemPriceUnit.length; j++) {
                            itemPriceUnit[j].itemTotal = CommaToPoint4Digit(itemPriceUnit[j].itemTotal);
                            //itemPriceUnit[j].itemTotal = numberFormatCommaToPoint(itemPriceUnit[j].itemTotal);
                        }
                    }
                    $scope.itemList[formIndex].price = JSON.stringify(itemPriceUnit);
                    delete $scope.itemList[formIndex]['itemPrice'];
                    delete $scope.itemList[formIndex]['quantity'];

                    if ($scope.itemList[formIndex].item_number != undefined) {
                        $scope.itemList[formIndex].item_number;

                    } else {
                        $scope.itemList[formIndex].item_number = angular.element('#item_number').text();
                        $scope.itemList[formIndex].item_number = $scope.itemList[formIndex].item_number.replace(/^0+/, '');
                    }

                    $scope.itemList[formIndex].order_id = $scope.order_id;
                    $scope.itemList[formIndex].total_amount = $scope.total_amount;

                    var sourceField = angular.element("div#plsSourceLang" + formId).children("a.pls-selected-locale");
                    var targetField = angular.element("div#plsTargetLang" + formId).children("a.pls-selected-locale");

                    var sourceObj = {
                        sourceLang: srcLang,
                        dataNgSrc: sourceField.children().attr('data-ng-src'),
                        alt: sourceField.children().attr('alt')
                    }

                    var targetObj = {
                        sourceLang: trgLang,
                        dataNgSrc: targetField.children().attr('data-ng-src'),
                        alt: targetField.children().attr('alt')
                    }

                    $scope.itemList[formIndex].source_lang = JSON.stringify(sourceObj);
                    $scope.itemList[formIndex].target_lang = JSON.stringify(targetObj);

                    $scope.itemList[formIndex].total_amount = $scope.itemList[formIndex].total_price;

                    /*if(!$scope.itemList[formIndex].total_amount || $scope.itemList[formIndex].price ==undefined){
                        $scope.itemList[formIndex].total_amount = 0
                        $scope.itemList[formIndex].total_price = 0
                        //$scope.itemList[formIndex].price = ''
                    }*/

                    // if ($scope.itemList[formIndex].attached_workflow) {
                    //     if ($('#jobchainName' + formId).val() !== 'select') {
                    //         var jobchainval = $('#jobchainName' + formId).val();
                    //         var jobchainName = $("#jobchainName" + formId + " option[value=" + jobchainval + "]").text();
                    //         var scoopitemData = $scope.TblItemList;
                    //         var chainworkflow = scoopitemData.filter(x => x.itemId == formId && x.attached_workflow == 'SingleJob -' + jobchainName).map(x => x.attached_workflow);
                    //         if (chainworkflow.length == 0) {
                    //             notification('workflow already attached', 'warning');
                    //         }
                    //         // notification('workflow already attached', 'warning');
                    //     }
                    // } else {
                        if ($('#jobchainName' + formId).val() == 'select' || $('#jobDropDown' + formId).val() == 'select') {
                            notification('Please select workflow.', 'warning');
                            //setting total amount to 0 in table listing
                            $scope.TblItemList[formIndex].total_amount = 0;
                            return false;
                        } else {
                            if ($scope.jobi.jobSummery  && $scope.workflowChange) {
                                // gettingName of selected workflow job chain
                                $scope.itemList[formIndex].attached_workflow = 'SingleJob -' + $('#jobchainName' + formId).find(':selected').text();

                                $scope.jobitem = {};
                                var dd = $scope.jobi.jobSummery;
                                $scope.jobi.jobSummery = dd.substr(1);
                                $scope.matchjob = dd.slice(0, 1);
                                if ($scope.matchjob == 'j') {
                                    rest.path = 'jobpertjobGet/' + $scope.jobi.jobSummery + '/' + $scope.order_id;
                                    rest.get().success(function (data) {
                                        $scope.itemdata = data;
                                        $scope.jobitem.item_id = $scope.itemList[formIndex].item_number;
                                        if ($scope.jobitem.item_id) {
                                            rest.path = 'jobitemsidget/' + $scope.jobitem.item_id + '/' + $scope.order_id;
                                            rest.get().success(function (data) {
                                                $scope.iData = data;
                                                var contact_person = [];
                                                var job_id = [];
                                                var order_id = [];
                                                var job_no = [];
                                                var due_date = [];
                                                var item_status = [];
                                                $scope.job_id = $scope.jobi.jobSummery;
                                                $scope.job_code = $scope.itemdata.job_code;
                                                $scope.order_id = $scope.order_id;
                                                $scope.job_no = $scope.itemdata.job_no;
                                                $scope.master_job_id = $scope.itemdata.job_id;

                                                if ($scope.iData != null) {
                                                    //$scope.contact_person = $scope.iData.contact_person;
                                                    $scope.contact_person = $scope.iData.manager;
                                                    $scope.due_date = $scope.iData.due_date;
                                                    $scope.item_status = $scope.iData.item_status;
                                                } else {
                                                    $scope.contact_person = "";
                                                    $scope.due_date = "";
                                                    $scope.item_status = "";
                                                }

                                                $scope.jobitem.job_no = $scope.job_no;
                                                $scope.jobitem.job_id = $scope.job_id;
                                                $scope.jobitem.job_code = $scope.job_code;
                                                $scope.jobitem.contact_person = $scope.contact_person;
                                                $scope.jobitem.order_id = $scope.order_id;
                                                $scope.jobitem.due_date = $scope.due_date;
                                                $scope.jobitem.master_job_id = $scope.master_job_id;
                                                if ($scope.job_no == undefined) {
                                                    $scope.job_no = 1;
                                                }
                                                if ($scope.iData) {
                                                    $scope.po_number = $scope.iData.abbrivation + pad($scope.iData.order_number, 4) + '_' + $scope.job_code + pad($scope.job_no, 3);
                                                    $scope.jobitem.tmp_po_number = $scope.po_number;
                                                }

                                                /* Job Status To New When Creating New Job*/
                                                $scope.jobitem.item_status = 'In preparation';

                                                // Remove if Display Assign PO Link
                                                //$scope.jobitem.po_number = '';
                                                $scope.jobitem.po_number = $scope.jobitem.tmp_po_number;
                                                $scope.jobitem.ItemLanguage = srcLang + ' > ' + trgLang;
                                                $scope.jobitem.price = '';
                                                $scope.jobitem.total_price = parseFloat(0.00);
                                                rest.path = 'jobSummarySave';
                                                rest.post($scope.jobitem).success(function (data) {
                                                    if (data) {
                                                        var obj = [];
                                                        if ($cookieStore.get('jobRecentAdd') != undefined) {
                                                            angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                                                obj.push(val);
                                                            });
                                                        }
                                                        obj.push(data['order_id']);
                                                        $cookieStore.put('jobRecentAdd', obj);
                                                        //$route.reload();
                                                    } else {
                                                        notification('Job already exists in this scoop.', 'error');
                                                    }
                                                })
                                            })
                                        }
                                    }).error(errorCallback);
                                } else {
                                    var chainId = $scope.itemList[formIndex].item_number;

                                    // gettingName of selected workflow job chain
                                    $scope.itemList[formIndex].attached_workflow = 'jobChain -' + $('#jobchainName').find(':selected').text();
                                    if (chainId != undefined  && $scope.workflowChange) {
                                        rest.path = 'jobpertjobChainGet/' + $scope.jobi.jobSummery + '/' + $scope.order_id + '/' + chainId;
                                        rest.get().success(function (data) {
                                            $scope.jobnumchain = data.job_no += 1;
                                            $scope.ijNum = 1;
                                            if (data.newJob == "") {
                                                //notification('No job in jobchain', 'warning');
                                            } else {
                                                angular.forEach(data.newJob, function (val, i) {
                                                    if (chainId) {
                                                        rest.path = 'jobitemsidget/' + chainId + '/' + $scope.order_id;
                                                        rest.get().success(function (data) {
                                                            $scope.iData = data;
                                                            var contact_person = [];
                                                            var job_id = [];
                                                            var order_id = [];
                                                            var job_no = [];
                                                            var due_date = [];
                                                            var item_status = [];
                                                            $scope.job_id = $scope.jobi.jobSummery;
                                                            $scope.job_code = val.job_code;
                                                            $scope.order_id = $scope.order_id;
                                                            $scope.master_job_id = val.job_id;
                                                            $scope.job_no = $scope.jobnumchain++;
                                                            if (!$scope.job_no) {
                                                                $scope.job_no = $scope.ijNum++;
                                                            }

                                                            if ($scope.iData != null) {
                                                                $scope.contact_person = $scope.iData.contact_person;
                                                                $scope.due_date = $scope.iData.due_date;
                                                                $scope.item_status = $scope.iData.item_status;
                                                            } else {
                                                                $scope.contact_person = "";
                                                                $scope.due_date = "";
                                                                $scope.item_status = "";
                                                            }
                                                            if ($scope.jobitem == undefined || $scope.jobitem == "" || $scope.jobitem == null) {
                                                                $scope.jobitem = {};
                                                            }

                                                            $scope.jobitem.job_no = $scope.job_no;
                                                            $scope.jobitem.master_job_id = $scope.master_job_id;
                                                            $scope.jobitem.job_id = $scope.master_job_id;
                                                            // $scope.jobitem.job_id = $scope.job_id;
                                                            $scope.jobitem.job_code = $scope.job_code;
                                                            $scope.jobitem.contact_person = $scope.contact_person;
                                                            $scope.jobitem.order_id = $scope.order_id;
                                                            $scope.jobitem.due_date = $scope.due_date;
                                                            if ($scope.job_no == undefined) {
                                                                $scope.job_no = 1;
                                                            }
                                                            if ($scope.iData) {
                                                                $scope.po_number = $scope.iData.abbrivation + pad($scope.iData.order_number, 4) + '_' + $scope.job_code + pad($scope.job_no, 3);
                                                                $scope.jobitem.tmp_po_number = $scope.po_number;
                                                            }

                                                            $scope.jobitem.item_status = 'In preparation';
                                                            $scope.jobitem.po_number = $scope.jobitem.tmp_po_number;
                                                            $scope.jobitem.ItemLanguage = srcLang + ' > ' + trgLang;

                                                            $scope.jobitem.job_chain_id = $scope.jobi.jobSummery;
                                                            $scope.jobitem.item_id = $scope.itemList[formIndex].item_number;

                                                            rest.path = 'jobSummarySave';
                                                            rest.post($scope.jobitem).success(function (data) {
                                                                var obj = [];
                                                                if ($cookieStore.get('jobRecentAdd') != undefined) {
                                                                    angular.forEach($cookieStore.get('jobRecentAdd'), function (val, i) {
                                                                        obj.push(val);
                                                                    });
                                                                }
                                                                obj.push(data['order_id']);
                                                                $cookieStore.put('jobRecentAdd', obj);
                                                                //$route.reload();
                                                            })
                                                        })
                                                    }
                                                })
                                            }
                                        });
                                    } else {
                                        notification('Please select item', 'warning');
                                    }
                                }
                            }
                        }
                    //}

                    // substitute pc,pm,qa
                    $scope.itemList[formIndex].subPm = $scope.checksubPm[formIndex] ? ($scope.itemList[formIndex].subPm).toString().split(',').pop() : ''; 
                    $scope.itemList[formIndex].subPc = $scope.checksubPc[formIndex] ? ($scope.itemList[formIndex].subPc).toString().split(',').pop() : ''; 
                    $scope.itemList[formIndex].subQa = $scope.checksubQa[formIndex] ? ($scope.itemList[formIndex].subQa).toString().split(',').pop() : ''; 
                    
                    $scope.itemList[formIndex].manager = ($scope.itemList[formIndex].manager).toString().split(',').pop();     
                    $scope.itemList[formIndex].coordinator = ($scope.itemList[formIndex].coordinator).toString().split(',').pop();
                    $scope.itemList[formIndex].qaSpecialist = ($scope.itemList[formIndex].qaSpecialist).toString().split(',').pop();

                    const hasKeySpclz = 'specialization' in $scope.itemList[formIndex];
                    if(hasKeySpclz)    
                        delete $scope.itemList[formIndex].specialization;

                    $scope.itemList[formIndex].due_date = $scope.itemList[formIndex].due_date.split(' ')[0].split('.').reverse().join('-');
                    $scope.itemList[formIndex].due_date = $scope.itemList[formIndex].due_date;
                    var due_timevl1 = angular.element('#due_time' + formIndex).val();
                    $scope.itemList[formIndex].due_date = moment($scope.itemList[formIndex].due_date + ' ' + due_timevl1).format("YYYY-MM-DD HH:mm");
                    //$scope.itemList[formIndex].due_date = originalDateFormatNew($scope.itemList[formIndex].due_date);
                    //$scope.itemList[formIndex].due_date = moment($scope.itemList[formIndex].due_date).format('YYYY-MM-DD HH:mm:ss');
                    $scope.itemList[formIndex].start_date = originalDateFormatNew($scope.itemList[formIndex].start_date);
                    $scope.itemList[formIndex].start_date = moment($scope.itemList[formIndex].start_date).format('YYYY-MM-DD HH:mm:ss');
                    // Upcoming scoop Project
                    if($scope.itemList[formIndex].upcomingDate){
                        $scope.itemList[formIndex].upcomingDate = originalDateFormatNew($scope.itemList[formIndex].upcomingDate);
                        $scope.itemList[formIndex].upcomingDate = moment($scope.itemList[formIndex].upcomingDate).format('YYYY-MM-DD HH:mm:ss');
                        if(! isNaN(Date.parse($scope.itemList[formIndex].upcomingDate))){
                            $scope.itemList[formIndex].start_date = $scope.itemList[formIndex].upcomingDate;
                        }
                    }else{
                        $scope.itemList[formIndex].upcomingDate = '0000-00-00';
                    }    
                    
                    $routeParams.id = $scope.itemList[formIndex].itemId
                    rest.path = 'ItemUpdate';
                    rest.put($scope.itemList[formIndex]).success(function () {
                        $('#jobchainName' + formId).val('select');
                        //Updating current updated row data(item)
                        $scope.getItems();

                        //After update change to global date format dates
                        $scope.itemList[formIndex].due_date = moment($scope.itemList[formIndex].due_date).format($scope.dateFormatGlobal);
                        $scope.itemList[formIndex].start_date = moment($scope.itemList[formIndex].start_date).format($scope.dateFormatGlobal);

                        //log file start
                        $scope.logMaster = {};
                        //$scope.logMaster.log_title = $scope.projectOrderName;
                        $scope.logMaster.log_title = $scope.projectOrderName +'-'+ $scope.itemList[formIndex].item_number.toString().padStart(3, '0');
                        $scope.logMaster.log_type_id = $scope.itemList[formIndex].order_id;
                        $scope.logMaster.task_id = $scope.itemList[formIndex].itemId;
                        $scope.logMaster.log_type = "update";
                        $scope.logMaster.log_status = "project_scoop";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                        //$route.reload();
                        notification('Item successfully updated.', 'success');
                        setTimeout(() => {
                            $route.reload();
                        }, 200);

                    });
                } else {
                    // nothing in popup
                }
            } else {
                //notification('Please Create project First', 'information');
            }
        }
    }
    //------- End Update scoop -------//

    // sybstitute pm, pc, qa
    $scope.checksubPm = []
    $scope.checksubPc = []
    $scope.checksubQa = []

    $scope.getItems = function () {
        var popitemList = [];
        rest.path = 'itemsGet/' + $scope.order_id;
        rest.get().success(function (data) {
            var data = data.filter(itemData => itemData.itemId == $scope.scoop_id);
            $scope.itemList = data;
            $scope.TblItemList = data;  
            $scope.projectItemEmpty = jQuery.isEmptyObject(data);
            $scope.totalPrice = 0;
            var cont = [];

            var newitemData = data;
            
            // ----->>>>  Price List Client <<<<---------
            //$scope.custPriceAll().then((chData) => {
            $scope.childPriceAll().then((chData) => {
                    newitemData.forEach( function(eleVal, index, arr){
                    if(eleVal.specialization)
                        $scope.scoopSpecializationArr = (eleVal.specialization.toString()).split(',')                    
                    var sourceLang = 'English (US)';
                    var targetLang = 'English (US)';
                    if(eleVal.target_lang){
                        sourceLang = JSON.parse(eleVal.source_lang)
                        sourceLang = sourceLang.sourceLang
                    }
                    if(eleVal.target_lang){
                        targetLang = JSON.parse(eleVal.target_lang)
                        targetLang = targetLang.sourceLang
                    }
                    var langPair = sourceLang+' > '+targetLang;
                    
                    const searchedPrice = $scope.childPrice.map(child => {
                        return Object.assign({}, child, {
                        itemId: arr[index].itemId
                        })
                    })
                    //newArr2[eleVal.itemId] = Object.assign({}, ...newArr1)
                    
                    $scope.newchildPriceArr[eleVal.itemId] = searchedPrice;
                    
                    $scope.custPriceAll().then((prData) => {
                        if(searchedPrice && $scope.newchildPriceArr[eleVal.itemId] && eleVal.project_pricelist)
                            $scope.changeClientPrice(eleVal.project_pricelist, eleVal.itemId)
                        if(searchedPrice && $scope.newchildPriceArr[eleVal.itemId] && !eleVal.project_pricelist){
                            $scope.changeClientPrice(0, eleVal.itemId, $scope.scoopSpecializationArr, langPair)
                        }
                    });    
                })
            });    
            
            angular.forEach(data, function (val, i) {
                $scope.item_number = val.item_number;
                $scope.scoop_number = val.item_number; 
                //getClient By OrderId while edit item
                rest.path = 'customer/' + val.order_id;
                rest.get().success(function (data) {
                    
                    angular.element('#manager' + val.itemId).select2('val', data.project_manager);
                    angular.element('#coordinator' + val.itemId).select2('val', data.project_coordinator);
                    angular.element('#QA_specialist' + val.itemId).val(data.QA_specialist);
                    
                    $scope.custPriceAll().then((prData) => {
                        let customerpriceFltr =  $scope.customerpriceAll ;
                        angular.element('#currency'+ val.itemId).text('Eur');
                        customerpriceFltr.filter( (el) => {
                            if(val.project_pricelist){
                                if(el.price_list_id == val.project_pricelist){
                                    let price_currency = el.price_currency.includes(',') ? el.price_currency.split(',')[0] : 'Eur';
                                    angular.element('#currency'+ val.itemId).text(price_currency);
                                    return el;
                                }
                            }else{
                                if(el.resource_id == data.client){
                                    let price_currency = el.price_currency.includes(',') ? el.price_currency.split(',')[0] : 'Eur';
                                    angular.element('#currency'+ val.itemId).text(price_currency);
                                    return el;
                                }
                            }
                        });
                    })
                    
                    var jobChainoption = $scope.jobchainoption;
                    
                    var chaintext = val.attached_workflow.split('jobChain -');
                    
                    var chainworkflow = jobChainoption.filter(x => x.job_name == chaintext[1]).map(x => x.job_chain_id);
                    
                    if (chainworkflow.length > 0)
                        $('#jobchainName' + val.itemId).val('c' + chainworkflow);

                    var joboption = $scope.joboption;
                    
                    var jobtext = val.attached_workflow.split('SingleJob -');
                    
                    var jobworkflow = joboption.filter(x => x.service_name + ' (' + x.job_code + ')' == jobtext[1]).map(x => x.job_id);
                    
                    if (jobworkflow.length > 0)
                        $('#jobchainName' + val.itemId).val('j' + jobworkflow);

                    if ($('#jobchainName' + val.itemId).val() !== 'select') {
                        //$('#jobchainName' + val.itemId).attr('disabled',true);
                    }

                    $scope.checksubPm[i] = $scope.itemList[i].subPm ? 1 : 0;
                    $scope.checksubPc[i] = $scope.itemList[i].subPc ? 1 : 0;
                    $scope.checksubQa[i] = $scope.itemList[i].subQa ? 1 : 0;
                    
                    $scope.itemList[i].manager = $scope.itemList[i].manager ? $scope.itemList[i].manager : data.project_manager;
                    $scope.itemList[i].coordinator = $scope.itemList[i].coordinator ? $scope.itemList[i].coordinator : data.project_coordinator;
                    $scope.itemList[i].qaSpecialist = $scope.itemList[i].qaSpecialist ? $scope.itemList[i].qaSpecialist : data.QA_specialist;
                    
                    if (val.price) {

                        $scope.itemPriceUni[val.itemId] = JSON.parse(val.price);
                        for (var j = 0; j < $scope.itemPriceUni[val.itemId].length; j++) {
                            $scope.itemPriceUni[val.itemId][j].itemTotal = numberFormatComma($scope.itemPriceUni[val.itemId][j].itemTotal);
                        }
                    }
                    
                    if( isNaN(Date.parse($scope.itemList[i].start_date)) )
                        $scope.itemList[i].start_date = moment($scope.itemList[i].created_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                    else
                        $scope.itemList[i].start_date = moment($scope.itemList[i].start_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                    //$scope.itemList[i].start_date = moment($scope.itemList[i].start_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                    
                    if( isNaN(Date.parse($scope.itemList[i].upcomingDate)) )
                        $scope.itemList[i].upcomingDate = '';
                    else
                        $scope.itemList[i].upcomingDate = moment($scope.itemList[i].upcomingDate).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                    
                    if ($scope.itemList[i].due_date) {
                        var new_due_date = moment($scope.itemList[i].due_date).format($scope.dateFormatGlobal + ' ' + 'HH:mm');
                        //var due_timevl = $scope.itemList[i].due_date.split(" ")[1];
                        var due_timevl = new_due_date.split(" ")[1];
                        $scope.itemList[i].due_date = moment($scope.itemList[i].due_date).format($window.localStorage.getItem('global_dateFormat'));
                        angular.element('#due_time' + i).val(due_timevl);
                    }

                    if ($scope.itemList[i].source_lang && $scope.itemList[i].target_lang) {
                        var sourceData = JSON.parse($scope.itemList[i].source_lang);
                        var targetData = JSON.parse($scope.itemList[i].target_lang);
                        angular.element('#source_lang' + val.itemId).text(sourceData.sourceLang);
                        angular.element('#target_lang').text(targetData.sourceLang);
                    } else {
                        angular.element('#source_lang' + val.itemId).text('English (US)');
                        angular.element('#target_lang' + val.itemId).text('English (US)');
                    }

                    var sourceField = angular.element("#plsSourceLang" + val.itemId).children("a.pls-selected-locale");

                    var targetField = angular.element("#plsTargetLang" + val.itemId).children("a.pls-selected-locale");
                    var sourceImg = sourceField.children('img');
                    var targetImg = targetField.children('img');

                    angular.element("#plsSourceLang" + val.itemId).children("a.pls-selected-locale").text('');
                    angular.element("#plsTargetLang" + val.itemId).children("a.pls-selected-locale").text('');

                    sourceField.append(sourceImg);
                    targetField.append(targetImg);

                    if ($scope.itemList[i].source_lang.length == 0 && $scope.itemList[i].target_lang.length == 0) {
                        let defaultImgSrc = 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png';
                        let defaultLangName = 'English (US)';
                        let defaultAltName = 'United States';
                        sourceField.children().attr('data-ng-src', '');
                        sourceField.children().attr('src', '');
                        sourceField.children().attr('alt', 'Select');
                        
                        //targetField.children().attr('data-ng-src', defaultImgSrc);
                        targetField.children().attr('data-ng-src', '');
                        targetField.children().attr('src', '');
                        targetField.children().attr('alt', 'Select');

                        var sourceImg = sourceField.children('img').after('');
                        var targetImg = targetField.children('img').after('');
                    } else {
                        sourceField.children().attr('data-ng-src', sourceData.dataNgSrc);
                        sourceField.children().attr('src', sourceData.dataNgSrc);
                        sourceField.children().attr('alt', sourceData.alt);

                        targetField.children().attr('data-ng-src', targetData.dataNgSrc);
                        targetField.children().attr('src', targetData.dataNgSrc);
                        targetField.children().attr('alt', targetData.alt);
                        var sourceImg = sourceField.children('img').after(sourceData.sourceLang);
                        var targetImg = targetField.children('img').after(targetData.sourceLang);
                    }
                }).error(errorCallback);

                /*if($scope.TblItemList[i].due_date){
                    $timeout(function() {
                        $scope.TblItemList[i].due_date = $scope.TblItemList[i].due_date.split(' ')[0]+' | ' +$scope.TblItemList[i].due_date.split(' ')[1];
                    },200);
                }else{

                }*/
                $scope.totalPrice += val.total_amount;
                if (val.itemId) {
                    $routeParams.id = val.itemId;
                    rest.path = 'itemsjobStatusGet/' + $routeParams.id + '/' + val.order_id;
                    rest.get().success(function (data) {
                        if (!data) {
                            $('#noJobNew' + val.itemId).text('false');
                        } else {
                            $('#noJobNew' + val.itemId).text('true');
                        }
                        $scope.jobitemStatus = data;
                        var appr = [];
                        var other = [];
                        angular.forEach(data, function (val, i) {
                            //$scope.scoop_number = val.item_id;
                            if (val.item_status == 'Approved') {
                                appr.push(val.item_status);
                            }
                            if (val.item_status != 'Approved') {
                                other.push(val.item_status);
                            }
                        });
                        $scope.it = {};
                        $scope.total = appr.length + other.length;
                        $scope.divis = 100 / $scope.total;
                        $scope.percent = Math.ceil($scope.divis * appr.length);
                        angular.element('#itemPer' + i).html($scope.percent);
                        angular.element('.itemPer' + i).val($scope.percent);
                        if ($scope.percent == 100) {
                            angular.element('#sumimg' + i).append('<img src="assets/img/wf_4.png" alt=""/> Completed /');
                        } else if ($scope.percent < 100 && $scope.percent != 0) {
                            angular.element('#sumimg' + i).append('<img src="assets/img/wf_3.png" alt=""/> Started /');
                        } else if ($scope.percent == 0) {
                            angular.element('#sumimg' + i).append('<img src="assets/img/wf_1.png" alt=""/> Not started /');
                        } else {
                            $('#noJob' + i).append('No jobs');
                            angular.element('#progress' + i).remove();
                            angular.element('#sumimg' + i).remove();
                        }
                    }).error(errorCallback);
                }
                rest.path = 'jobItemIconsetdata/' + val.item_number + '/' + val.order_id;
                rest.get().success(function (data) {
                    $scope.dueDate = data;
                }).error(errorCallback);

                $scope.Filestotal = 0;
                rest.path = 'getFilestotal/' + val.itemId;
                rest.get().success(function (data) {
                    if (data) {
                        $scope.Filestotal = data[0].totalfile;
                    }
                    angular.element('#filescount' + val.itemId).text($scope.Filestotal);
                }).error(errorCallback);



            })
        });
    }
    $scope.getItems();


    // Project Detail ---  ---   
    if ($routeParams.id) {
        $routeParams.id;
        rest.path = 'viewProjectCustomerDetail';
        rest.model().success(function (data) {
            $scope.customer = data;
            $window.localStorage.clientproCustomerName = $scope.customer.client;
            $window.localStorage.ContactPerson = $scope.customer.contact;
            $routeParams.ClientIdd = data['client'];
            $window.localStorage.ClientName = $routeParams.ClientIdd;
            if ($scope.customer.memo) {
                $scope.warn = true;
                $timeout(function () {
                    $scope.warn = false;
                }, 10000);
            }
        }).error(errorCallback);
        // })
    }

    $scope.addProjectInvoice = function (data) {
        var client = "";
        var flag = 0;
        var array = [];

        angular.forEach(data, function (val, i) {
            if (val.SELECTED == 1) {
                if (!client) {
                    client = val.contactName;
                }
                if (val.contactName != client) {
                    flag = 1;
                } else {
                    array.push(val.itemId);
                }
            }
        });
        if (flag != 1 && array.length) {
            $scope.cancel();
            $cookieStore.put('invoiceScoopId', array);
            $location.path('/client-invoice-create');
        } else {
            if (flag != 1) {
                notification("Pelase select Project Scoop", "warning");
            }
        }
    }

    $scope.generalEmail = function (id) {
        if (id != undefined && id != " " && id != null) {
            $window.localStorage.generalMsg = id;
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'html/generalmsg.html',
                controller: 'generalmsgController',
                size: '',
                resolve: {
                    items: function () {
                        return $scope.data;
                    }
                }
            });
        } else {
            notification('Please Add Email', 'warning');
        }
    };

    $scope.editProjectDetail = function (id) {
        if (id) {
            rest.path = 'order/' + id + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                if (data.userName != null) {
                    $scope.orderdata = data;
                    
                    $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                    $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                    $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                    $window.localStorage.orderNo = $scope.orderdata.order_number;
                    $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                    $window.localStorage.orderID = id;
                    $window.localStorage.iUserId = id;
                    $window.localStorage.userType = 3;
                    $window.localStorage.currentUserName = data.vClientName;
                    $window.localStorage.genfC = 1;

                    //set isNewProject to false
                    $window.localStorage.setItem("isNewProject", "false");

                    //$location.path('/general');
                    $location.path('/general/'+id);
                    $window.localStorage.orderBlock = 1;
                    $timeout(function () {
                        $scope.cancel();
                    }, 500);
                } else {
                    notification('Information not available', 'warning');
                }
            }).error(errorCallback);
        }

    };

    //*****------- Jobs listing --------*****//
    //set status auto update
    $timeout(function () {
        var temp = [];
        var autoUpdateS = [];
        var autoUpdateR = [];
        var Autocheck = [];
        angular.element(".jStatus").each(function (i) {
            angular.element(this).addClass('StatusData' + i);
            angular.element('.StatusData' + i + ' .joStatus').addClass('jobStatusData' + i);
            angular.element('.StatusData' + i + ' .jAuto').addClass('jStatusAuto' + i);
            angular.element('.StatusData' + i + ' .jsumeryIdAuto').addClass('jsumId' + i);
            angular.element('.StatusData' + i + ' .jjobnum').addClass('jjobnum' + i);
            angular.element('.StatusData' + i + ' .jduedate').addClass('jduedate' + i);
            angular.element('.StatusData' + i + ' .jobEmail').addClass('jobEmail' + i);
            angular.element('.StatusData' + i + ' .jobResource').addClass('jobResource' + i);
            angular.element('.StatusData' + i + ' .jobstatApp').addClass('jobstatsApp' + i);
            var status = angular.element('.jobStatusData' + i).text();
            var auto = angular.element('.jStatusAuto' + i).text();
            var summeryId = angular.element('.jsumId' + i).text();
            var jobnumber = angular.element('.jjobnum' + i).text();
            var jduedate = angular.element('.jduedate' + i).text();
            var jobEmail = angular.element('.jobEmail' + i).text();
            var jobResource = $('.jobResource' + i).text();
            if (auto == 'Auto' && status != 'Approved' && i == 0 && status != 'Requested') {
                if ($scope.jobdetail == undefined || $scope.jobdetail == null || $scope.jobdetail != '') {
                    $scope.jobdetail = {};
                }
                Autocheck.push(i);
                if (status == 'In preparation' && jobResource) {
                    $scope.item_status = "Requested";
                    $scope.jobdetail.jobnumber = jobnumber;
                    $scope.jobdetail.jduedate = jduedate;
                    $scope.jobdetail.jobEmail = jobEmail;
                    $scope.jobdetail.item_status = $scope.item_status;
                    $routeParams.id = summeryId;
                    rest.path = 'jobSummeryDetailsUpdate';
                    rest.put($scope.jobdetail).success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                }
            } else if (auto == 'Auto' && status == 'Approved') {
                temp.push(i + 1);
            } else if (auto == 'Auto' && status != 'Requested' && status != 'Approved') {
                autoUpdateS.push(i);
            } else if (auto == 'Auto' && status == 'Requested') {
                autoUpdateR.push(i);
            }
        });

        if (autoUpdateR == "") {
            var statusfirst = autoUpdateS[0];
        }

        var statusLast = temp.slice(-1).pop();
        var acheck = Autocheck[0];
        if (statusLast && acheck == undefined || statusfirst != undefined && acheck == undefined) {
            if (statusLast) {
                var status = angular.element('.jobStatusData' + statusLast).text();
                var auto = angular.element('.jStatusAuto' + statusLast).text();
                var summeryId = angular.element('.jsumId' + statusLast).text();
                var jobnumber = angular.element('.jjobnum' + statusLast).text();
                var jduedate = angular.element('.jduedate' + statusLast).text();
                var jobEmail = angular.element('.jobEmail' + statusLast).text();
                var jobResource = angular.element('.jobResource' + statusLast).text();
            } else {
                var status = angular.element('.jobStatusData' + statusfirst).text();
                var auto = angular.element('.jStatusAuto' + statusfirst).text();
                var summeryId = angular.element('.jsumId' + statusfirst).text();
                var jobnumber = angular.element('.jjobnum' + statusfirst).text();
                var jduedate = angular.element('.jduedate' + statusfirst).text();
                var jobEmail = angular.element('.jobEmail' + statusfirst).text();
                var jobResource = angular.element('.jobResource' + statusfirst).text();
            }

            if (auto == 'Auto' && status != 'Requested') {
                if ($scope.jobdetail == undefined || $scope.jobdetail == null || $scope.jobdetail != '') {
                    $scope.jobdetail = {};
                }
                if (status == 'In preparation' && jobResource) {
                    $scope.item_status = "Requested";
                    $scope.jobdetail.jobnumber = jobnumber;
                    $scope.jobdetail.jduedate = jduedate;
                    $scope.jobdetail.jobEmail = jobEmail;
                    $scope.jobdetail.item_status = $scope.item_status;
                    $routeParams.id = summeryId;
                    rest.path = 'jobSummeryDetailsUpdate';
                    rest.put($scope.jobdetail).success(function (data) {
                        $route.reload();
                    }).error(errorCallback);
                }
            }
        }
    }, 1000);

    //approved file data send to requested item
    $timeout(function () {
        var findApproved = [];
        for (var i = 0; i < angular.element('[class^=joStatus]').length; i++) {
            var status = angular.element('.jobStatusData' + i).text();
            var autoUpdate = angular.element('.jStatusAuto' + i).text();
            if (status === 'Approved' && autoUpdate != undefined) {
                findApproved.push(parseInt(i));
            }
        }

        var obj = [];
        for (var i = 0; i < angular.element('[class^=joStatus]').length; i++) {
            var lastApproved = $(findApproved).get(-1);
            if (lastApproved == 0 || lastApproved != "" && lastApproved != undefined) {
                var getStatus = lastApproved + 1;
                var status = angular.element('.jobStatusData' + getStatus).text();
                var approveStatus = angular.element('.jobStatusData' + lastApproved).text()
                var approveId = angular.element('.jsumId' + lastApproved).text();
                var requestId = angular.element('.jsumId' + getStatus).text();
                var appstat = angular.element('.jobstatsApp' + lastApproved).text();
                if (appstat == 0) {
                    if (approveId != "" && requestId != "") {
                        obj.push({
                            approveId: approveId,
                            requestId: requestId,
                            appSt: appstat
                        });
                    }
                }
            }
        }

        var last = obj.slice(-1)[0];
        if (last != undefined) {
            if (last.approveId != undefined && last.requestId != undefined && last.appSt == 0) {
                rest.path = "filemanagerApproveSend/" + last.approveId + '/' + last.requestId;
                rest.get().success(function (data) {
                    $route.reload();
                }).error(errorCallback);
            }
        }

    }, 1000);

    $scope.resouceEdit1 = function (id, item, resource) {
        angular.element('input#resources' + id + item).select2('val', resource);
        $scope.resourceStatus = id + "" + item;
    }
    $scope.resouceEdit = function (id, item, resource) {
        angular.element('input#resources' + id + item).select2('val', resource);
        $scope.resourceStatus = id + "" + item;
    }

    $scope.resourceSave = function (sumId, resourceId) {
        if ($scope.jobd == "" || $scope.jobd == undefined || $scope.jobd == null) {
            $scope.jobd = {};
        }

        $scope.resource = resourceId;
        $scope.jobd.resource = $scope.resource;
        $routeParams.id = sumId;
        
        rest.path = 'jobSummeryJobDetailsUpdate';
        rest.put($scope.jobd).success(function (data) {
            $route.reload();
        }).error(errorCallback);
    }

    $scope.hoverIn = function () {
        this.hoverEdit = true;
    };

    $scope.hoverOut = function () {
        this.hoverEdit = false;
    };

    // DataTables configurable options
    $scope.dtOptions = DTOptionsBuilder.newOptions().withOption('scrollY', '100%').withOption('scrollX', '100%').withOption('scrollCollapse', true).withOption('paging', false).withOption('paging', false).withOption('paging', false);

    
    if ($routeParams.id) {
        $scope.item = $routeParams.id;
        rest.path = 'jobitemsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            
            $scope.itemjobList = data.filter(jobData => jobData.order_id == $scope.order_id &&  jobData.item_number == $scope.item_number);
        }).error(errorCallback);
        rest.path = 'jobDetailLanguageGet/' + $routeParams.id;
        rest.get().success(function (data) {
            $scope.language = data;
        }).error(errorCallback);

        //getting ProjectOrderName and indirect clint name
        // rest.path = 'getClientIndirectClient/' + $routeParams
        rest.path = 'getClientIndirectClient/' + $routeParams.id;
        rest.get().success(function (data) {
            if (data.order_number) {
                $scope.projectOrderData = data;
                var projectOrderName = $scope.projectOrderData.abbrivation + pad($scope.projectOrderData.order_number, 4);
                $window.localStorage.setItem("projectOrderName", projectOrderName);
                $window.localStorage.setItem("indirectCustomerName", $scope.projectOrderData.indirect_customer);
            }
        }).error(errorCallback);
    }


    var allitCheked = [];
    $scope.itemAll = [];
    if ($routeParams.id) {
        $routeParams.id = $scope.order_id;
        rest.path = 'itemsGet/' + $routeParams.id;
        rest.get().success(function (data1) {
            $scope.itemLength = data1.filter(jobData => jobData.order_id == $scope.order_id &&  jobData.item_number == $scope.item_number);
            //$scope.itemLength = data1;
            $routeParams.id = $scope.order_id;
            rest.path = 'jobsummeryGet/' + $routeParams.id;
            rest.get().success(function (data) {
                $scope.itemListFinal = [];
                rest.path = "getsaveSortedJobsData/" + $scope.order_id;
                rest.get().success(function (d) {
                    $scope.availableSortedJobs = d;
                    if ($scope.availableSortedJobs.length > 0) {
                        $scope.itemListJob = d;
                    } else {
                        $scope.itemListJob = data.filter(jobData => jobData.order_id == $scope.order_id &&  jobData.item_id == $scope.item_number);
                        
                        //$scope.itemListJob = data;
                    }

                    angular.forEach($scope.itemLength, function (e, i) {
                        $scope.itemListFinal.push($scope.itemListJob.filter(function (e1, i1) {
                            return e1.item_id == e.item_number;
                        }));
                    });

                    angular.forEach($scope.itemListJob, function (val, i) {
                        if (val.job_summmeryId) {
                            rest.path = 'jobSummeryDetailsGet/' + val.job_summmeryId;
                            rest.get().success(function (data) {
                                $timeout(function () {
                                    //count file
                                    if (data) {
                                        rest.path = 'filefolderstget/' + data[0].fmanager_id + '/' + $routeParams.id;
                                        rest.get().success(function (data) {
                                            var sourceFile = [];
                                            var targetFile = [];
                                            angular.element('.sourceC' + val.job_summmeryId).text(data.source);
                                            angular.element('.targteC' + val.job_summmeryId).text(data.target);
                                        }).error(errorCallback);
                                    }
                                }, 100);
                            }).error(errorCallback);
                        }
                    })

                    $timeout(function () {
                        $('#tblDataLoading').css('display', 'none');
                    }, 300);

                    // calcualtion for profit margin
                    angular.forEach($scope.itemjobList, function (val, i) {
                        var scoopItem = val.item_number;
                        var totalJobAmount = 0;
                        angular.forEach($scope.itemListJob, function (value, j) {
                            //$timeout(function() {
                            if (val.item_number == value.item_id && val.order_id == value.order_id) {
                                var tPrice = (value.total_price) ? value.total_price : parseInt(0);
                                if (tPrice) {
                                    totalJobAmount += parseFloat(tPrice);
                                }
                            }
                            //}, 100);
                        })
                        if (totalJobAmount == undefined) {
                            totalJobAmount = 0.00;
                        }
                        var scoopAmount = $scope.itemjobList[i].total_amount ? parseFloat($scope.itemjobList[i].total_amount) : 0;
                        var jobAmount = parseFloat(totalJobAmount);
                        var profit = scoopAmount - jobAmount;
                        if (scoopAmount) {
                            var marginloss = 0;
                            var profitMargin = ((scoopAmount - jobAmount) * 100) / parseFloat(scoopAmount);
                        } else {
                            var marginloss = 1;
                            if (jobAmount > 0) {
                                profitMargin = -100;
                            } else {
                                profitMargin = 0;
                            }
                        }
                        var grossProfit = scoopAmount - jobAmount;
                        var grossProfit = grossProfit ? grossProfit : 0.00;
                        if (profitMargin) {
                            profitMargin = profitMargin.toFixed(2);
                            var isNegetive = Math.sign(profitMargin);
                            if (isNegetive == -1 || isNegetive == -0) {
                                var marginloss = 1;
                            }
                            profitMargin = $filter('NumbersCommaformat')(profitMargin) + "%";
                        } else {
                            profitMargin = '0,00' + "%";
                            var marginloss = 1;
                        }

                        angular.element('#profitMargin' + $scope.itemjobList[i].item_number).text(profitMargin);
                        if (marginloss) {
                            $('#profitMargin' + $scope.itemjobList[i].item_number).css("color", "red");
                        }
                        if (val.due_date != null) {
                            var sales = val.total_amount
                            sales = $filter('NumbersCommaformat')(sales);
                            var sales = sales ? sales : '0,00';
                            var expense = $filter('NumbersCommaformat')(jobAmount);
                            var expense = expense ? expense : '0,00';
                            var grossProfit = $filter('NumbersCommaformat')(grossProfit);
                            var grossProfit = grossProfit ? grossProfit : '0,00';
                            var html = "<table><tr><td>Sales : </td><td>" + sales + "</td></tr><tr><td>Expense I (Prices) : </td><td> " + expense + " <td></tr><tr><td>Gross profit : </td><td> " + grossProfit + "</td></tr><tr><td>Profit margin : </td><td> " + profitMargin + "</td></tr></table>";
                            $timeout(function () {
                                angular.element("#myPopover" + i).popover({
                                    title: '',
                                    content: html,
                                    html: true,
                                });

                            }, 3000);
                        }
                    })

                    if (!$scope.itemListJob.length || $scope.itemListJob == "" || $scope.itemListJob == "") {
                        $scope.displayNodata = true;
                    }
                }).error(errorCallback);

                $scope.itemjobDataId = [];
                angular.forEach(data, function (val, i) {
                    if (val.item_id != 0) {
                        $scope.itemjobDataId = 1;
                    }
                })

            }).error(errorCallback);

        })

        $scope.manual = false;
        $scope.auto = true;
    }

        $scope.countAction = function (id, name) {
        closeWindows();
        localStorage['jobfolderId'] = id;
        localStorage['typeOfJobFolder'] = name;
        $window.localStorage.ItemClient = '';
        var ItemcodeNumber = angular.element('#itemCode').text();
        // start to get downloaded folder name with client name
        rest.path = 'customer/' + $window.localStorage.orderID;
        rest.get().success(function (res) {
            $scope.customer = res;
            if (res) {
                rest.path = 'client/' + $scope.customer.client;
                rest.get().success(function (cData) {
                    $scope.directClientData = cData
                    $window.localStorage.ItemClient = $scope.directClientData.vUserName;
                }).error(function (data, error, status) { });
            }
        })
        // end
        $window.localStorage.ItemcodeNumber = ItemcodeNumber;

        var JobFolders = window.open('#/filemanager/' + name, "popup", "width=1000,height=750");
        JobFolders.addEventListener("beforeunload", function () {
            var id1 = $window.localStorage.getItem("jobFolderRoot");
            var type1 = $window.localStorage.getItem("jobFoldertype");
            var externalResourceUserId1 = null;
            var count;
            rest.path = 'filefolderGet/' + id1 + '/' + type1 + '/' + externalResourceUserId1;
            rest.get().success(function (data) {
                count = data.length;
                if (!count) {
                    count = 0;
                }
                if (type1) {
                    if (type1 == 'source') {
                        $('#sourceCount-' + id).text(count);
                        
                    }
                    if (type1 == 'target') {
                        $('#targetCount-' + id).text(count);
                    }
                }
            }).error(errorCallback);

            localStorage['parentId'] = ' ';
            $window.localStorage.setItem("jobFoldertype", '');
            return false;
        }, false);
        openWindows.push(JobFolders);
    }

    var getCountJobFolder = function () {
        var count = $window.localStorage.getItem("sourceFolderCount");
        if (!count) {
            count = 0;
        }
        var type = $window.localStorage.getItem("jobFoldertype");
        var id = $window.localStorage.getItem("jobfolderId");
        
        if (type) {
            if (type == 'source') {
                $('#sourceCount-' + id).text(count);
                $('#targetCount-' + id).text(count);
                //$('.sourceC-' + id).text(count);
            }
            if (type == 'target') {
                $('#sourceCount-' + id).text(count);
                $('#targetCount-' + id).text(count);
                //$('#targetCount-' + id).text(count);
            }
        }
    }
    $interval(getCountJobFolder, 1000);

    $scope.edit = function (jobId) {
        $window.localStorage.projectJobChainOrderId = $scope.order_id;
        scrollBodyToTop();
        //$location.path('/job-summery-details/' + id);
        $routeParams.id = jobId;
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: 'tpl/jobEditPopup.html',
            controller: 'jobSummeryDetailsController',
            size: '',
            resolve: {
                items: function () {
                    return $scope.data;
                }
            }
        });

        $uibModalInstance.close();
    }

    $scope.deletejobsDetails = function (id, orderId, taskName) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'jobitemDelete/' + id;
                rest.delete().success(function (res) {
                    if (res.status) {
                        notification('You can not delete invoice created job.', 'error');
                    } else {
                        //log file start 
                        $scope.logMaster = {};
                        $scope.logMaster.log_type_id = orderId;
                        $scope.logMaster.task_id = id;
                        $scope.logMaster.log_title = taskName;
                        $scope.logMaster.log_type = "delete";
                        $scope.logMaster.log_status = "task";
                        $scope.logMaster.created_by = $window.localStorage.getItem("session_iUserId");
                        rest.path = "saveLog";
                        rest.post($scope.logMaster).success(function (data) { });
                        //log file end
                    }
                    $route.reload();
                }).error(errorCallback);
            }
        });

        $uibModalInstance.close();
    }

    $scope.cancel = function () {
        $uibModalInstance.close();
    }

    // Delete scoop if jobs not exist
    $scope.itemJobs = [];
    if($scope.order_id){
        rest.path = 'select2Jobdata';
        rest.get().success(function (data) {
            const itemJobs = data.filter( el => {
                if (el.order_id == $scope.order_id)
                    return el;
            })
            $scope.itemJobs = itemJobs;
            
        });    
    }

    $scope.deleteItemsId = function (itemId, itemNnumber) {
        itemId = itemId + '-' + itemNnumber;
        const itemJobsExist = $scope.itemJobs.filter( el => {
            if (el.item_id == itemNnumber)
                return el;
        })
        //var deleteMessage = "Are you sure you want to <b>DELETE</b> this scoop?";
        //if(itemJobsExist.length){
            let deleteInput = `<div class="checkbox" style="margin-top:20px; margin-bottom:-30px;"> <label class="i-checks i-checks-sm"> <input type='checkbox' name='scoopdelete${itemId}' id='scoopdelete${itemId}' value='1'> <i></i> Yes, I want to delete the scoop </label> </div>`;
            //deleteMessage = "Jobs are available in the scoop. You can not delete.";
            var deleteMessage = "<p> Are you sure you want to delete this scoop? </p> <p> It might have jobs connected to it.</p> " + deleteInput;
        
            $(".bootbox-confirm [data-bb-handler|='confirm']").hide()
        //}
        
        $scope.cancel();

        bootbox.confirm(deleteMessage, function (result) {
            deleteMessage = '';
            if (result == true) {
                if($('#scoopdelete'+itemId).is(':checked')){
                    rest.path = 'itemDelete/' + itemId + '/' + $scope.order_id;
                    rest.get().success(function (data) {
                        if (data.status == 422) {
                            notification(data.msg, 'error');
                        } else {
                            var hideId = itemId.split('-')[0];
                            $('#item-form' + hideId).hide('slow', function () { $('#item-form' + hideId).remove(); });
                            $('#trRowId' + hideId).hide('slow', function () { $('#trRowId' + hideId).remove(); });
                            notification('Scoop deleted successfully.', 'success');
                            $route.reload();
                        }
                    }).error(errorCallback);
                
                }else{
                    notification('Scoop not deleted.', 'information');
                }
            }

        });
        // if (confirm('Are you sure you want to save this thing into the database?')) {
        
        // } else {
        // }
    }

}).controller('resourceAdvanceSearchController', function ($timeout, $scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.clientnamec = "";

    //current year get
    $scope.date = new Date();
    var year = $scope.date.getFullYear();
    $scope.Currentyear = year.toString().substr(2, 2);

    //Advance Resource search start
    $scope.jobstatusReportsearch = function (frmId, eID, job) {

        if ($scope.jobReport == undefined || $scope.jobReport == null || $scope.jobReport == "") {
            notification('Please Select option', 'information');
        } else {
            rest.path = 'advanceSearchResource';
            rest.get().success(function (data) {

                var obj;
                angular.forEach(data, function (val, i) {
                    if (!jQuery.isEmptyObject(val.userCountry)) {
                        obj = JSON.parse(val.userCountry);
                        val.userCountry = obj[3].value;
                    }
                    if (val.JobDueDate) {
                        val.JobDueDate = val.JobDueDate.split(' ')[0].split('-').reverse().join('.');
                    }
                });
                $scope.statusResult = data;
                if (job.userRateLow != NaN && job.userRateHigh != NaN) {
                    var low = job.userRateLow;
                    var high = job.userRateHigh;
                    $scope.rateFilterData = $filter('ratingRange')(data, low, high);
                    if ($scope.rateFilterData != '') {
                        $scope.statusResult = $scope.rateFilterData;
                    }
                }
                if ($scope.jobDate.FrmDate != undefined && $scope.jobDate.ToDate != undefined) {
                    var frmDate = Date.parse($scope.jobDate.FrmDate.split('.').reverse().join('-'));
                    var toDate = Date.parse($scope.jobDate.ToDate.split('.').reverse().join('-'));
                    $scope.filterData = $filter('dateRange')(data, frmDate, toDate);
                    if ($scope.filterData != '') {
                        $scope.statusResult = $scope.filterData;
                    }

                }
            })
            scrollToId(eID);
        }
    }

    $scope.reseteSearch = function (frmId) {
        $route.reload();
    }

    $scope.jobsumResource = function (resourceName, jobSummeryId) {
        
        rest.path = 'jobsummeryResourceMail/' + resourceName + '/' + jobSummeryId;
        rest.get().success(function (data) {
            notification('Mail send successfully', 'success');
            $route.reload();
        }).error(errorCallback);
    }

    //Remove Selection
    $scope.clearCode = function (frmId, action) {
        switch (action) {
            case "jobCode":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.jobCode = '';
                    angular.element('#jobassigned').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }

                }
                break;
            case "jobStatus":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.jobStatus = '';
                    angular.element('#jobStatus1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "currency":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.currency = '';
                    angular.element('#currency').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "freelancerType":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.freelancerType = '';
                    angular.element('#userTypes1').val();
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "userCountry":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.userCountry = '';
                    angular.element('#userCountry').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (jQuery.isEmptyObject($scope.jobReport)) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "FrmDate":
                if ($scope.jobDate != undefined) {
                    $scope.jobDate.FrmDate = '';
                    angular.element('#FrmDate').val('');
                }
                break;
            case "ToDate":
                if ($scope.jobDate != undefined) {
                    $scope.jobDate.ToDate = '';
                    angular.element('#ToDate').val('');
                }
                break;

        }
    }
}).controller('linguistSearchController', function ($timeout, $scope, $log, $location, $route, rest, $routeParams, $window, $uibModal, $filter) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $window.localStorage.clientnamec = "";
    $scope.resourceType = 'external';
    // 1 for external users users
    $scope.propertyList = [];
    rest.path = 'propertyByType/1' ;
    rest.get().success(function (data) {
        $scope.propertyList = data;
        
    });    
    $scope.jobReport = {};
    $scope.jobReport.resourceType = 'external';

    $scope.chnageResourceType = function(type){
        if(type){
            $scope.jobReport = {};
            $scope.jobReport.resourceType = type;
        }
    }

    //Advance Resource search start
    $scope.jobstatusReportsearch = function (frmId, eID, job) {
        //if ($scope.jobReport == undefined || $scope.jobReport == null || $scope.jobReport == "") {
        if($scope.jobReport.resourceType == 'external'){
            if (Object.keys($scope.jobReport).length < 2) {
                    notification('Please Select option', 'information');
            } else {
                
                rest.path = 'searchExternalResource';
                rest.get().success(function (data) {

                    let temp_data = data;
                    if($scope.jobReport.freelancerType){
                        temp_data = temp_data.filter((obj)=> obj.freelancerType === $scope.jobReport.freelancerType);
                    }
                    if($scope.jobReport.resourceName){
                        temp_data = temp_data.filter((obj) => {
                            let firstName = obj.vFirstName.toUpperCase();
                            let lastName = obj.vLastName.toUpperCase();
                            let fullName = firstName +' '+ lastName;
                            let nameArr = [fullName, firstName, lastName];
                            if( nameArr.includes($scope.jobReport.resourceName.toUpperCase()) )
                                return obj;
                        });
                    }

                    if($scope.jobReport.companyName){
                        temp_data = temp_data.filter((obj) => {
                            if( $scope.jobReport.companyName.toUpperCase() == obj.companyName.toUpperCase() )
                                return obj;
                        });
                    }
                    if($scope.jobReport.currency){
                        temp_data = temp_data.filter((obj) => {
                            if (obj.price_currency) {
                                if(obj.price_currency.includes(',')){
                                    obj.currency = obj.price_currency.split(',')[0];
                                    if($scope.jobReport.currency == obj.currency)
                                        return obj;
                                }    
                            }
                        });
                    }
                    if($scope.jobReport.userCountry){
                        temp_data = temp_data.filter((obj) => {
                            if (obj.userCountry) {
                                const userCountryLen = JSON.parse(obj.userCountry);
                                if(userCountryLen.length > 2){
                                    obj.userCountry = userCountryLen[3].value;
                                    if($scope.jobReport.userCountry == obj.userCountry)
                                        return obj;
                                }    
                            }
                        });
                    }
                    if($scope.jobReport.priceUnit){
                        temp_data = temp_data.filter((obj) => {
                            if (obj.price_basis) {
                                let priceObj = JSON.parse(obj.price_basis);
                                let priceUnit = priceObj.filter( (prc) => { 
                                    if(prc.childPriceId == $scope.jobReport.priceUnit) 
                                        return prc.childPriceId 
                                });
                                if(priceUnit.length)
                                    return obj
                            }
                        });
                    }
                    if($scope.jobReport.priceUnit){
                        temp_data = temp_data.filter((obj) => {
                            if (obj.price_basis) {
                                let priceObj = JSON.parse(obj.price_basis);
                                let priceUnit = priceObj.filter( (prc) => { 
                                    if(prc.childPriceId == $scope.jobReport.priceUnit) 
                                        return prc.childPriceId 
                                });
                                if(priceUnit.length)
                                    return obj
                            }
                        });
                    }
                    if($scope.jobReport.priceRate){
                        const priceRate = numberFormatCommaToPoint($scope.jobReport.priceRate); 
                        temp_data = temp_data.filter((obj) => {
                            if (obj.price_basis) {
                                let priceObj = JSON.parse(obj.price_basis);
                                let priceRateObj = priceObj.filter( (prc) => { 
                                    if(prc.basePrice == priceRate) 
                                        return prc.childPriceId 
                                });
                                if(priceRateObj.length)
                                    return obj
                            }
                        });
                    }
                    if($scope.jobReport.specialization){
                        temp_data = temp_data.filter((obj) => {
                            if(obj.specialization){
                                let spclz = obj.specialization.toString();
                                if (spclz.split(',').includes($scope.jobReport.specialization)) {
                                    return obj
                                }
                            }
                        });
                    }
                    if($scope.jobReport.source_lang){
                        temp_data = temp_data.filter((obj) => {
                            if (!jQuery.isEmptyObject(obj.price_language)) {
                                let langObj = JSON.parse(obj.price_language);
                                let srcLang = langObj.filter( (lng) => { 
                                    if(lng.languagePrice.split(' > ')[0] == $scope.jobReport.source_lang) 
                                        return lng.languagePrice 
                                });
                                if(srcLang.length)
                                    return obj;
                            }
                        });
                    }
                    if($scope.jobReport.target_lang){
                        temp_data = temp_data.filter((obj) => {
                            if (!jQuery.isEmptyObject(obj.price_language)) {
                                let langObj = JSON.parse(obj.price_language);
                                let trgtLang = langObj.filter( (lng) => { 
                                    if(lng.languagePrice.split(' > ')[1] == $scope.jobReport.target_lang) 
                                        return lng.languagePrice 
                                });
                                if(trgtLang.length)
                                    return obj
                            }
                        });
                    }

                    if($scope.jobReport.property_id){
                        temp_data = temp_data.filter((obj) => {
                            let prt = $scope.propertyList.filter( (pl) => {
                                if(pl.property_id == $scope.jobReport.property_id &&  pl.user_id == obj.iUserId) 
                                    return pl 
                            });
                            if(prt.length)
                                return obj;
                        });
                    }
                    if($scope.jobReport.value_id){
                        temp_data = temp_data.filter((obj) => {
                            let prv = $scope.propertyList.filter( (pl) => {
                                if(pl.user_id == obj.iUserId && pl.value_id.toString().split(',').includes($scope.jobReport.value_id)) 
                                    return pl 
                            });
                            if(prv.length)
                                return obj;
                        });
                    }

                    var objC;
                    angular.forEach(data, function (val, i) {
                        if(!$scope.jobReport.userCountry){
                            if (!jQuery.isEmptyObject(val.userCountry)) {
                                objC = JSON.parse(val.userCountry);
                                val.userCountry = objC[3].value;
                            }
                        }    
                        if (!jQuery.isEmptyObject(val.price_basis)) {

                        }

                        if (val.price_currency) {
                            if(val.price_currency.includes(','))
                                val.currency = val.price_currency.split(',')[0];
                        }
                    });
                    //$scope.statusResult = data;
                    
                    $scope.statusResult = Object.keys($scope.jobReport).length > 0 ? UniqueArraybyId(temp_data, 'iUserId') : {};
                })
                scrollToId(eID);
            }
        }

        if($scope.jobReport.resourceType == 'internal'){
            
            if (Object.keys($scope.jobReport).length < 2) {
                    notification('Please Select option', 'information');
            }else{
                rest.path = 'user/1';
                rest.get().success(function (data) {
                    $scope.userlist = data.data;
                
                    let temp_internal = $scope.userlist;
                    if($scope.jobReport.resourceName){
                        temp_internal = temp_internal.filter((obj) => {
                            let firstName = obj.vFirstName.toUpperCase();
                            let lastName = obj.vLastName.toUpperCase();
                            let fullName = firstName +' '+ lastName;
                            let nameArr = [fullName, firstName, lastName];
                            if( nameArr.includes($scope.jobReport.resourceName.toUpperCase()) )
                                return obj;
                        });
                    }
                    if($scope.jobReport.eUserStatus){
                        temp_internal = temp_internal.filter((obj)=> obj.eUserStatus === $scope.jobReport.eUserStatus);
                    }
                    if($scope.jobReport.vResourcePosition){
                        temp_internal = temp_internal.filter((obj)=> {
                            let vResourcePosition = obj.vResourcePosition.toString().split(',')
                            if( vResourcePosition.includes($scope.jobReport.vResourcePosition) ){
                                return obj;
                            }
                        });
                    }
                    if($scope.jobReport.vEmailAddress){
                        temp_internal = temp_internal.filter((obj)=> obj.vEmailAddress === $scope.jobReport.vEmailAddress);
                    }

                    if($scope.jobReport.tabPermission){
                        let tabField = $scope.jobReport.tabPermission.toString().split(',')
                        temp_internal = temp_internal.filter((obj)=> {
                            if (obj.tabPermission) {
                                let tabPermission = JSON.parse(obj.tabPermission);
                                if(Object.keys(tabPermission)){
                                    let tabKeys = Object.keys(tabPermission);
                                    if(tabField.every(elem => tabKeys.includes(elem)))
                                        return obj
                                }
                            }
                        });
                    }
                    if($scope.jobReport.menu_access){
                        let menuField = $scope.jobReport.menu_access.toString().split(',')
                        temp_internal = temp_internal.filter((obj)=> {
                            if (obj.menu_access) {
                                let menu_access = JSON.parse(obj.menu_access);
                                if(Object.keys(menu_access)){
                                    let menuKeys = Object.keys(menu_access);
                                    if(menuField.every(elem => menuKeys.includes(elem)))
                                        return obj
                                }
                            }
                        });
                    }
                    
                    var objC;
                    //$scope.internalResult = Object.keys($scope.jobReport).length > 0 ? UniqueArraybyId(temp_internal, 'iUserId') : {};
                    $scope.internalResult = temp_internal;
                })
                scrollToId(eID);
            }    
        }

    }

    $scope.show_value = false;
    $scope.loadValue = function (id, element) {
        $scope.show_value = true;
        rest.path = 'propertyvalues/' + id ;
        rest.get().success(function (data) {
            
            var valueData = [];
            angular.forEach(data, function (value, key) {
                var obj = {
                    'id': value.value_id,
                    'text': value.value_name.toString()
                };
                valueData.push(obj);
            });
            angular.element('#' + element).select2({
                allowClear: true,
                data: valueData,
                multiple: false
            });
        }).error(function (data, error, status) { });
    };

    // Price multiple selection
    rest.path = 'masterPriceitemgetFromPriceList';
    rest.get().success(function (data) {
        $scope.masterPrice = data;
        
    }).error(errorCallback);

    rest.path = 'childPriceitemget';
    rest.get().success(function (data) {
        $scope.childPrice = data;
        
    }).error(errorCallback);
    $scope.masterChildDropDown = function() {
        $scope.pricesArray = [];
        $timeout(function () {
            angular.forEach($scope.masterPrice, function (val, i) {
                var obj1 = {
                    id: '',
                    text: val.name,
                    children: []
                }
                $scope.pricesArray.push(obj1);
            })
            angular.forEach($scope.masterPrice, function (v, i) {
                angular.forEach($scope.childPrice, function (val1, i1) {
                    
                    if (v.master_price_id == val1.master_price_id) {
                        var obj2 = {
                            id: val1.child_price_id,
                            text: val1.name
                        }
                        $scope.pricesArray[i].children.push(obj2);
                    }
                })
            })
        }, 2000);

        $('#priceUnit').select2({
            multiple: true,
            allowClear: true,
            placeholder: "Select price..",
            data: $scope.pricesArray,
            query: function (options) {
                var selectedIds = options.element.select2('val');
                
                var selectableGroups = $.map(this.data, function (group) {
                    var areChildrenAllSelected = true;
                    $.each(group.children, function (i, child) {
                        if (selectedIds.indexOf(child.id) < 0) {
                            areChildrenAllSelected = false;
                            return false; // Short-circuit $.each()
                        }
                    });
                    return !areChildrenAllSelected ? group : null;
                });
                options.callback({ results: selectableGroups });
            }
        }).on('select2-selecting', function (e) {
            var $select = $(this);
            if (e.val == '') {
                e.preventDefault();
                $select.select2('data', $select.select2('data').concat(e.object.children));
                $select.select2('close');
            }
            //* Single selection replace selected option *//
            const inputIdS2 = '#s2id_'+$(this).attr('id');
            if(e.object){
                $(inputIdS2+' li').each(function() {
                    const childDiv = $(this).children();
                    let eleText = (childDiv[0]) ? childDiv[0].innerText : '';
                    if(eleText){
                        if(eleText !== e.object.text){
                            $(inputIdS2+' li').find("div:contains("+ eleText +")").next().click();
                        }    
                    }
                });
            }
        });
    }
    $timeout(function () {
        $scope.masterChildDropDown();
    }, 200);

    $scope.reseteSearch = function (frmId) {
        $route.reload();
    }

    //Remove Selection
    $scope.clearCode = function (frmId, action) {
        switch (action) {
            case "jobCode":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.jobCode = '';
                    angular.element('#jobassigned').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }

                }
                break;
            case "jobStatus":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.jobStatus = '';
                    angular.element('#jobStatus1').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "currency":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.currency = '';
                    angular.element('#currency').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "freelancerType":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.freelancerType = '';
                    angular.element('#userTypes1').val();
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "userCountry":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.userCountry = '';
                    angular.element('#userCountry').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "specialization":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.specialization = '';
                    angular.element('#specialization').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "priceUnit":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.priceUnit = '';
                    angular.element('#priceUnit').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;    
            case "priceRate":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.priceRate = '';
                    angular.element('#priceRate').val();
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;                
            case "source_lang":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.source_lang = '';
                    angular.element('#sourceLanguage').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;
            case "target_lang":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.target_lang = '';
                    angular.element('#targetLanguage').select2('val', '');
                    angular.forEach($scope.jobReport, function (value, key) {
                        if (value === "" || value === null) {
                            delete $scope.jobReport[key];
                        }
                    });
                    if (Object.keys($scope.jobReport).length < 2) {
                        $scope.statusResult = '';
                    }
                }
                break;    
            case "property_id":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.property_id = '';
                    angular.element('#property_id').select2('val', '');
                    $scope.show_value = false;
                }
            break;
            case "value_id":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.value_id = '';
                    angular.element('#property-value').select2('val', '');
                }
            break; 
            case "companyName":
                if ($scope.jobReport != undefined) {
                    $scope.jobReport.companyName = '';
                    angular.element('#companyName').select2('val', '');
                }
            break;        
            // External Resource    
            case "eUserStatus":
            if ($scope.jobReport != undefined) {
                $scope.jobReport.eUserStatus = '';
                angular.element('#eUserStatus').select2('val', '');
                angular.forEach($scope.jobReport, function (value, key) {
                    if (value === "" || value === null) {
                        delete $scope.jobReport[key];
                    }
                });
                if (Object.keys($scope.jobReport).length < 2) {
                    $scope.internalResult = '';
                    $scope.statusResult = '';
                }
            }
            case "vResourcePosition":
            if ($scope.jobReport != undefined) {
                $scope.jobReport.vResourcePosition = '';
                angular.element('#vResourcePosition').select2('val', '');
                angular.forEach($scope.jobReport, function (value, key) {
                    if (value === "" || value === null) {
                        delete $scope.jobReport[key];
                    }
                });
                if (Object.keys($scope.jobReport).length < 2) {
                    $scope.internalResult = '';
                    $scope.statusResult = '';
                }
            }
            case "vResourcePosition":
            if ($scope.jobReport != undefined) {
                $scope.jobReport.vResourcePosition = '';
                angular.element('#vResourcePosition').select2('val', '');
                angular.forEach($scope.jobReport, function (value, key) {
                    if (value === "" || value === null) {
                        delete $scope.jobReport[key];
                    }
                });
                if (Object.keys($scope.jobReport).length < 2) {
                    $scope.internalResult = '';
                    $scope.statusResult = '';
                }
            }
            break;
            case "FrmDate":
            if ($scope.jobDate != undefined) {
                $scope.jobDate.FrmDate = '';
                angular.element('#FrmDate').val('');
            }
            break;
                    
        case "ToDate":
            if ($scope.jobDate != undefined) {
                $scope.jobDate.ToDate = '';
                angular.element('#ToDate').val('');
            }
            break;

        }
    }


}).controller('dateFormatController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.toDayDate = new Date();
    $scope.dateFormatD = moment($scope.toDayDate).format($window.localStorage.getItem('global_dateFormat'));
    $scope.loginUserId = $window.localStorage.getItem('session_iUserId');

    rest.path = 'getAllFormat/' + $window.localStorage.getItem('session_iUserId');
    rest.get().success(function (data) {
        $scope.dtFormatList = data;
    }).error(errorCallback);


    $scope.getEdit = function (id, eID) {
        rest.path = 'getdateFormatById/' + id;
        rest.get().success(function (data) {
            $scope.dateModel = data;
            
            $scope.dateFormatD = data.dateformat;
            $('#dateFormat').select2('data', { id: data.select2_val, text: data.dateformat });
            $('#dateFormat').val(data.select2_val).trigger('change');

            $('#dateSeparator').select2('data', { id: data.dateSeparator, text: data.dateSeparator });
            if (data.dateSeparator == ',') {
                $scope.changeDateSeparator();
                //$('#dateSeparator').val(data.dateSeparator).trigger('change');
                angular.element('#dateSeparator').select2('val', data.dateSeparator);
            }
            $('#dateSeparator').val(data.dateSeparator).trigger('change');

        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.loginUserId != 1) {
                notification('You don\'\t have permission.', 'error');
                return false;
            } else {

                if (!$scope.dateModel.is_active) {
                    $scope.dateModel.is_active = 0;
                }
                var dateData = $('#dateFormat').select2('data');
                if (dateData.length > 0) {
                    dateData.text = (dateData.length > 0) ? dateData[0].text : dateData;
                    dateData.id = (dateData.length > 0) ? dateData[0].id : dateData;
                }

                $scope.dateModel.dateFormat = dateData.text;
                $scope.dateModel.select2_val = dateData.id;
                $scope.dateModel.iUserId = $window.localStorage.getItem('session_iUserId');
                if ($scope.dateModel.dateformat_id) {
                    $routeParams.id = $scope.dateModel.dateformat_id;

                    rest.path = 'updateDateFormat';
                    rest.put($scope.dateModel).success(function (data) {

                        if (data.status == 422) {
                            notification(data.msg, 'error');
                        }
                        if (data.status == 200) {
                            $scope.replaceAfterUpdate = $scope.dateModel.dateFormat.replace(/\//g, $scope.dateModel.dateSeparator);
                            $window.localStorage.global_dateFormat = $scope.replaceAfterUpdate;
                            $window.localStorage.dtSeparator = $scope.dateModel.dateSeparator;
                            notification('Record updated successfully.', 'success');
                            $route.reload();
                        }
                    }).error(errorCallback);
                } else {
                    rest.path = 'saveDateFormat';
                    rest.post($scope.dateModel).success(function (data) {
                        if (data.status == 422) {
                            notification(data.msg, 'error');
                        }
                        if (data.status == 200) {
                            $scope.replaceAfterSave = $scope.dateModel.dateFormat.replace(/\//g, $scope.dateModel.dateSeparator);
                            $window.localStorage.global_dateFormat = $scope.replaceAfterSave;
                            $window.localStorage.dtSeparator = $scope.dateModel.dateSeparator;
                            notification('Record inserted successfully.', 'success');
                            $route.reload();
                        }
                    }).error(errorCallback);
                }
            }

        }
    };

    $scope.changeFormat = () => {
        var dateData = $('#dateFormat').select2('data');
        if (dateData.length > 0) {
            dateData = dateData[0].text;
            //dateData.text = dateData;
            $scope.dateFormatD = moment($scope.toDayDate).format(dateData);

            var dateSeparator = $('#dateSeparator').select2('data');
            if (dateSeparator.length > 0)
                dateSeparator.text = dateSeparator[0].text;

            //if(dateSeparator){
            if (dateSeparator.length > 0) {
                if ($scope.prevSeparator == '/') {
                    $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                    $scope.dateFormatD = $scope.dateFormatD.replace($scope.replaceTxt, dateSeparator.text);
                } else if ($scope.prevSeparator == '.') {
                    $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                    $scope.dateFormatD = $scope.dateFormatD.replace(/\./g, dateSeparator.text);
                } else {
                    $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                    $scope.dateFormatD = $scope.dateFormatD.replace($scope.replaceTxt, dateSeparator.text);
                }
            }
        }
    }

    $scope.changeDateSeparator = () => {
        var separatorArray = ['/', ',', '.'];
        var dateSeparator = $('#dateSeparator').select2('data');

        if (dateSeparator.length > 0 || $('#dateSeparator').val() == ',') {
            var go = true;
            $.each(separatorArray, function (i, val) {
                if (go) {
                    var contains = $scope.dateFormatD.includes(val);
                    
                    if (contains) {
                        $scope.prevSeparator = val;
                        go = false;
                    }
                }
            })

            dateSeparator = $('#dateSeparator').select2('data');
            if (dateSeparator.length > 0)
                dateSeparator.text = (dateSeparator.length > 0) ? dateSeparator[0].text : $('#dateSeparator').val();

            if ($scope.prevSeparator == '/') {
                $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                $scope.dateFormatD = $scope.dateFormatD.replace($scope.replaceTxt, dateSeparator.text);
            } else if ($scope.prevSeparator == '.') {
                $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                $scope.dateFormatD = $scope.dateFormatD.replace(/\./g, dateSeparator.text);
            } else {
                $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                $scope.dateFormatD = $scope.dateFormatD.replace($scope.replaceTxt, dateSeparator.text);
            }
        }
    }

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'deletedateFormat/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };

}).controller('decimalSeparatorController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.loginUserId = $window.localStorage.getItem('session_iUserId');

    rest.path = 'getAllDecimalSeperator';
    rest.get().success(function (data) {
        $scope.seperatorList = data;
    }).error(errorCallback);


    $scope.getEdit = function (id, eID) {
        rest.path = 'getSeparatorById/' + id;
        rest.get().success(function (data) {
            $scope.separator = data;
            $('#separatorChar').select2('data', { id: data.separatorChar, text: data.separatorChar });
            if (data.separatorChar == ',') {
                angular.element('#separatorChar').select2('val', data.separatorChar);
            } else {
                //$('#separatorChar').val(data.separatorChar).trigger('change');
            }
            $('#separatorChar').val(data.separatorChar).trigger('change');



        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {

        if (angular.element("#" + formId).valid()) {
            if ($scope.loginUserId != 1) {
                notification('You don\'\t have permission.', 'error');
                return false;
            } else {

                if (!$scope.separator.is_active) {
                    $scope.separator.is_active = 0;
                }
                var separatorData = $('#separatorChar').select2('data');

                $scope.separator.iUserId = $window.localStorage.getItem('session_iUserId');
                if ($scope.separator.separator_id) {
                    $routeParams.id = $scope.separator.separator_id;
                    rest.path = 'updateDecimalSeparator';
                    rest.put($scope.separator).success(function (data) {
                        if (data.status == 200) {
                            $window.localStorage.setItem('DecimalSeparator', $scope.separator.separatorChar);
                            $window.localStorage.setItem('DecimalNumber', $scope.separator.decimal_number);
                        }
                        notification('Record updated successfully.', 'success');
                        $route.reload();
                    }).error(errorCallback);
                } else {
                    rest.path = 'saveDecimalSeparator';
                    rest.post($scope.separator).success(function (data) {
                        if (data.status == 422) {
                            notification(data.msg, 'error');
                        }
                        if (data.status == 200) {
                            $window.localStorage.setItem('DecimalSeparator', $scope.separator.separatorChar);
                        }
                        notification('Record inserted successfully.', 'success');
                        $route.reload();
                    }).error(errorCallback);
                }
            }
        }
    };

    $scope.changeDecimalSeparator = () => {
        /*var dateData = $('#dateFormat').select2('data');
        
        $scope.dateFormatD = moment($scope.toDayDate).format(dateData.text);
        
        var dateSeparator = $('#dateSeparator').select2('data');
        if(dateSeparator){
            if($scope.prevSeparator == '/'){
                $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                $scope.dateFormatD = $scope.dateFormatD.replace($scope.replaceTxt,dateSeparator.text);
            }else if($scope.prevSeparator == '.'){
                $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                $scope.dateFormatD = $scope.dateFormatD.replace(/\./g,dateSeparator.text);
            }else{
                $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
                $scope.dateFormatD = $scope.dateFormatD.replace($scope.replaceTxt,dateSeparator.text);
            }
        }*/
    }

    /*$scope.changeDateSeparator = () =>{
        var separatorArray = ['/',',','.'];

        var go = true;
        $.each(separatorArray,function(i,val){
            if(go){
                var contains = $scope.dateFormatD.includes(val);
                if(contains){
                    $scope.prevSeparator = val;
                    go = false;
                }    
            }
        })
        
        var dateSeparator = $('#dateSeparator').select2('data');
        if($scope.prevSeparator == '/'){
            $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
            $scope.dateFormatD = $scope.dateFormatD.replace($scope.replaceTxt,dateSeparator.text);
        }else if($scope.prevSeparator == '.'){
            $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
            $scope.dateFormatD = $scope.dateFormatD.replace(/\./g,dateSeparator.text);
        }else{
            $scope.replaceTxt = new RegExp($scope.prevSeparator, "g");
            $scope.dateFormatD = $scope.dateFormatD.replace($scope.replaceTxt,dateSeparator.text);
        }
        
    }*/


    $scope.deleteModel = function (id) {
        if ($scope.loginUserId != 1) {
            notification('You don\'\t have permission.', 'error');
            return false;
        } else {
            bootbox.confirm("Are you sure you want to delete this row?", function (result) {
                if (result == true) {
                    rest.path = 'deleteSeparator/' + id;
                    rest.delete().success(function () {
                        notification('Record deleted successfully.', 'success');
                        $route.reload();
                    }).error(errorCallback);
                }
            });
        }
    };

}).controller('statusWiseProjectController', function (items, $uibModalInstance, $scope, $window, $compile, $timeout, $uibModal, $log, rest, $rootScope, $location, $cookieStore, $route, $routeParams) {
    $scope.displayType = items;
    $scope.proejctsToDisplay = [];
    rest.path = "dashboardOrderGet";
    rest.get().success(function (data) {
        angular.forEach(data, function (val, i) {
            var newLangData = { sourceLang: 'English (US)', dataNgSrc: 'assets/vendor/Polyglot-Language-Switcher-2-master/images/flags/us.png', alt: '' };
            if (val.itemsSourceLang) {
                data[i].itemsSourceLang = JSON.parse(val.itemsSourceLang);
            } else {
                data[i].itemsSourceLang = newLangData;
            }
            if (val.itemsTargetLang) {
                data[i].itemsTargetLang = JSON.parse(val.itemsTargetLang);
            } else {
                data[i].itemsTargetLang = newLangData;
            }

            if ($scope.displayType == 'All') {
                $scope.dispalyTxt = 'All';
                $scope.proejctsToDisplay = data;
            } else if ($scope.displayType == 'To be Assigned') {
                if (val.itemStatus == 'To be Assigned') {
                    $scope.dispalyTxt = 'To be Assigned';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'In Progress') {
                if (val.itemStatus == 'In Progress') {
                    $scope.dispalyTxt = 'In Progress';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'Completed by linguist') {
                if (val.itemStatus == 'Completed by linguist') {
                    $scope.dispalyTxt = 'Completed by linguist';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'QA Ready') {
                if (val.itemStatus == 'QA Ready') {
                    $scope.dispalyTxt = 'QA Ready';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'To be Delivered') {
                if (val.itemStatus == 'To be Delivered') {
                    $scope.dispalyTxt = 'To be Delivered';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'Delivered') {
                if (val.itemStatus == 'Delivered') {
                    $scope.dispalyTxt = 'Delivered';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'Approved') {
                if (val.itemStatus == 'Approved') {
                    $scope.dispalyTxt = 'Approved';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'Invoiced') {
                if (val.itemStatus == 'Invoiced') {
                    $scope.dispalyTxt = 'Invoiced';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'Paid') {
                if (val.itemStatus == 'Paid') {
                    $scope.dispalyTxt = 'Paid';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'Without invoice') {
                if (val.itemStatus == 'Without invoice') {
                    $scope.dispalyTxt = 'Without invoice';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'Cancelled') {
                if (val.itemStatus == 'Cancelled') {
                    $scope.dispalyTxt = 'Cancelled';
                    $scope.proejctsToDisplay.push(val);
                }
            } else if ($scope.displayType == 'headsUp') {
                if (val.heads_up == 1) {
                    $scope.dispalyTxt = 'headsUp';
                    $scope.proejctsToDisplay.push(val);
                }
            }
        });

        // angular.forEach(data, function (val, i) {
        //     if ($scope.displayType == 'All') {
        //         $scope.dispalyTxt = 'All';
        //         $scope.proejctsToDisplay = data;
        //     } else if ($scope.displayType == '4') {
        //         if (val.projectStatus == 4) {
        //             $scope.dispalyTxt = 'In progress';
        //             $scope.proejctsToDisplay.push(val);
        //         }
        //     } else if ($scope.displayType == 4) {
        //         if (val.projectStatus == 4) {
        //             $scope.dispalyTxt = 'In progress';
        //             $scope.proejctsToDisplay.push(val);
        //         }
        //     } else if ($scope.displayType == 'headsUp') {
        //         if (val.heads_up == 1) {
        //             $scope.dispalyTxt = 'headsUp';
        //             $scope.proejctsToDisplay.push(val);
        //         }
        //     }
        // });
    });

    $scope.viewProejct = (orderId) => {
        $location.path('/viewProject/' + orderId);
        $scope.cancel();
    }

    $scope.edit = function (id) {
        if (id) {
            rest.path = 'order/' + id + '/' + $window.localStorage.getItem("session_iUserId");
            rest.get().success(function (data) {
                if (data.userName != null) {
                    $scope.orderdata = data;
                    $window.localStorage.setItem('sessionProjectEditedBy', data.userName);
                    $window.localStorage.setItem('sessionProjectEditedId', data.order_id);
                    $window.localStorage.setItem('sessionProjectUserId', data.edited_by);

                    $window.localStorage.orderNo = $scope.orderdata.order_number;
                    $window.localStorage.abbrivation = $scope.orderdata.abbrivation;
                    $window.localStorage.orderID = id;
                    $window.localStorage.iUserId = id;
                    $window.localStorage.userType = 3;
                    $window.localStorage.currentUserName = data.vClientName;
                    $window.localStorage.genfC = 1;

                    //set isNewProject to false
                    $window.localStorage.setItem("isNewProject", "false");

                    $location.path('/general/'+data.order_id);
                    $window.localStorage.orderBlock = 1;
                    $timeout(function () {
                        $scope.cancel();
                    }, 500);
                } else {
                    notification('Information not available', 'warning');
                }
            }).error(errorCallback);
        }

    };
    /*rest.path = "dashboardOrderGet";
    rest.get().success(function(data) {
        
        $scope.filteredTodos = [], $scope.currentPage = 1, $scope.numPerPage = 10, $scope.maxSize = 5;
        $scope.filteredTodos = data;
        $scope.makeTodos = function() {
            $scope.todos = [];
            angular.forEach($scope.filteredTodos, function(val, i) {
                 
            });
        }

        $scope.makeTodos();

        $scope.$watch('currentPage + numPerPage', function() {
            var begin = (($scope.currentPage - 1) * $scope.numPerPage),
                end = begin + $scope.numPerPage;
            $scope.adminOrderData = $scope.filteredTodos.slice(begin, end);

            var projectInProgerss = 0;
            var projectDilevered = 0;
            var dueTodayCount = 0;
            var dueTomorrowCount = 0;
            var dueDayAfterTomorrowCount = 0;
            var overDueDateCount = 0;
            var headsUp = 0;

            angular.forEach($scope.filteredTodos, function(val, i) {
                if (val.projectStatus == 4) {
                    projectInProgerss++;
                }
                $scope.projectInProgerss = projectInProgerss;

                if (val.projectStatus == 11) {
                    projectDilevered++;
                }
                $scope.projectDilevered = projectDilevered;

                if (val.DueDate.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 1)) {
                    dueTomorrowCount++;
                }
                $scope.DueDateTomorrowCount = dueTomorrowCount;

                if (val.DueDate.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 2)) {
                    dueDayAfterTomorrowCount++;
                }
                $scope.dueDayAfterTomorrowCount = dueDayAfterTomorrowCount;

                if (val.DueDate.split(' ')[0] == dateFormat(new Date())) {
                    dueTodayCount++;
                }
                $scope.DueDateTodayCount = dueTodayCount;

                if (val.DueDate.split(' ')[0].split(".").reverse().join("-") < dateFormat(new Date()).split(".").reverse().join("-")) {
                    overDueDateCount++;
                }
                $scope.overDueDateCount = overDueDateCount;

                if (val.heads_up == 1) {
                    headsUp++;
                }
                $scope.headsUp = headsUp;
            });

            var go;
            $scope.OverdueFilter = function(id, eID) {
                eID = "projectScroll";
                
                $scope.dateOverdue = $filter('dateLessThenToday')($scope.adminOrderData, today);
                scrollToId(eID);
                angular.element('#exportable').hide();
                angular.element('#exportable1').show();
                angular.element('#exportExport1').show();
                angular.element('#exportExport').hide();
                angular.element('.DashboardTask').css('margin-top', '-5%');
            }
        });

        var order = { 
            inpreparation: 0,
            assignedwaiting: 0,
            inprogress: 0,
            overdue: 0,
            delivered: 0,
            approved: 0,
            duetoday: 0,
            duetommorow: 0,
            duetoday: 0,
            duedayaftertomorrow: 0
        };

         
        angular.forEach(data, function(val, i) {
            if (val.DueDate != "") {}
            if (val.itemStatus == 'In preparation') {
                order.inpreparation += 1;
            }
            if (val.itemStatus == 'Assigned-waiting') {
                order.assignedwaiting += 1;
            }
            if (val.itemStatus == 'In-progress') {
                order.inprogress += 1;
            }
             
            if (val.itemStatus == 'Delivered') {
                order.delivered += 1;
            }
            if (val.itemStatus == 'Approved') {
                order.approved += 1;
            }
           
        });

         
        var obj = [];
        angular.forEach(order, function(val, i) {
            obj.push({ name: i, y: val });
            angular.element('#ap_' + i).text(val);
        });

        $scope.adminEmpty = jQuery.isEmptyObject(data);

    });*/

    $scope.cancel = function () {
        $uibModalInstance.close();
    }
}).controller('statusWiseJobsController', function (items, $uibModalInstance, $scope, $window, $compile, $timeout, $uibModal, $log, rest, $rootScope, $location, $cookieStore, $route, $routeParams) {
    $scope.jobDisplayType = items;
    $scope.jobsToDisplay = [];


    rest.path = 'getJobsFromTmsSummeryView';
    rest.get().success(function (data) {
        $scope.dashboardJobList = data;
        
        angular.forEach($scope.dashboardJobList, function (val, i) {
            val.item_id = pad(val.item_id, 3);
            if ($scope.jobDisplayType == 'Requested') {
                if (val.item_status == 'Requested') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'Requested';
                }
            } else if ($scope.jobDisplayType == 'tobeAssigned') {
                if (val.item_status == 'In preparation') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'In preparation';
                }
            } else if ($scope.jobDisplayType == 'inProgress') {
                if (val.item_status == 'In-progress' || val.item_status == 'Ongoing') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'In Progress';
                }
            } else if ($scope.jobDisplayType == 'jobTobeDilevered') {
                if (val.item_status == 'Ready to be Delivered') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'Ready to be Delivered';
                }
            } else if ($scope.jobDisplayType == 'jobDilevered') {
                if (val.item_status == 'Delivered' || val.item_status == 'Completed') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'Delivered';
                }
            } else if ($scope.jobDisplayType == 'jobApproved') {
                if (val.item_status == 'Approved' || val.item_status == 'Invoice Ready') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'Approved';
                }
            } else if ($scope.jobDisplayType == 'jobInvoiced') {
                if (val.item_status == 'Invoice Accepted' || val.item_status == 'Invoiced') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'Invoice Accepted';
                }
            } else if ($scope.jobDisplayType == 'jobPaid') {
                if (val.item_status == 'Paid') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'Paid';
                }
            } else if ($scope.jobDisplayType == 'jobWithoutInvoiced') {
                if (val.item_status == 'Without invoice') {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'Without Invoice';
                }
            } else if ($scope.jobDisplayType == 'DueToday') {
                if (val.due_date.split(' ')[0] == dateFormat(new Date()).split(".").reverse().join("-")) {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'DueToday';
                }
            } else if ($scope.jobDisplayType == 'DueTomorrow') {
                if (val.due_date.split(' ')[0] == TodayAfterNumberOfDays(new Date(), 1)) {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'DueTomorrow';
                }
            } else if ($scope.jobDisplayType == 'Overdue') {
                if (val.due_date.split(' ')[0] < dateFormat(new Date()).split(".").reverse().join("-")) {
                    $scope.jobsToDisplay.push(val);
                    $scope.jobDispalyTxt = 'Overdue';
                }
            }

        });
    }).error(errorCallback);


    $scope.goToJob = function (jobId, OrderId) {
        scrollBodyToTop();
        rest.path = 'jobDetailchange/' + jobId;
        rest.get().success(function (data) {
            if (data) {
                $window.localStorage.projectJobChainOrderId = OrderId;
                $window.localStorage.orderID = OrderId;
                $routeParams.id = jobId;
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: 'tpl/jobEditPopup.html',
                    controller: 'jobSummeryDetailsController',
                    size: '',
                    resolve: {
                        items: function () {
                            return $scope.data;
                        }
                    }
                });
            } else {
                notification('This Record is deleted.', 'error');
            }
        }).error(errorCallback);
        $scope.cancel();
    };
    $scope.cancel = function () {
        $uibModalInstance.close();
    }
}).controller('jobStatusRejectController', function ($scope, $log, $window, $compile, $timeout, $uibModal, rest, $route, $rootScope, $routeParams, $location, $uibModalInstance) {
    $scope.userRight = $window.sessionStorage.getItem("session_iFkUserTypeId");
    $scope.rejectId = $routeParams.id;

    // jobReject
    $scope.ok = function (frmId, data) {
        if (angular.element("#" + frmId).valid()) {
            $('#rejectLoder').css('display', 'block');
            $routeParams.id;
            rest.path = 'rejectJobStatus';
            rest.put(data).success(function (data) {
                if (data.status == 200 && data.emailSend == 'true') {
                    notification('job is rejected successfully and email sent to project manager.', 'success');
                    $('#rejectLoder').css('display', 'none');
                }
                $uibModalInstance.dismiss('cancel');
                $route.reload();
            }).error(errorCallback);
        }
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

}).controller('viewfeedbackPoupController', function (items, $uibModalInstance, $scope, $window, $compile, $timeout, $uibModal, $log, rest, $rootScope, $location, $cookieStore, $route, $routeParams) {
    $scope.exUserId = items.userId;
    $scope.DisplayUserName = items.userName;

    $scope.model = {
        basic: 0,
        readonly: 2.5,
        readonly_enables: true,
        minMaxStep: 0,
        pristine: 3,
        resetable: 1,
        heightWidth: 1.5,
        callbacks: 5,
        custom: 4,
    };

    rest.path = 'resourceAssetsByIuserId/' + $scope.exUserId;
    rest.get().success(function (data) {
        $scope.reviewJobs = data;

        if ($scope.reviewJobs.length == 0) {
            $scope.cancel();
            notification('No feedback available.', 'warning');
        }

        angular.forEach($scope.reviewJobs, function (val, i) {
            var fDt = val.period.split('^')[0];
            var tDt = val.period.split('^')[1];

            fDt = moment(fDt).format($window.localStorage.getItem('global_dateFormat'));
            tDt = moment(tDt).format($window.localStorage.getItem('global_dateFormat'));
            val.period = fDt + '  To  ' + tDt;
        })
    }).error(errorCallback);

    $scope.cancel = function () {
        $uibModalInstance.close();
    }
}).controller('userActivationController', function ($scope, $window, $compile, $timeout, $uibModal, $log, rest, $rootScope, $location, $cookieStore, $route, $routeParams) {
    $scope.activate = function () {
        $scope.actiationData = {
            "activationToken": $routeParams.id
        }

        rest.path = 'activateAccount';
        rest.post($scope.actiationData).success(function (data) {
            if (data) {
                notification(data.msg, 'success');
                $location.path('/');
            }
        }).error(errorCallback);
    }
}).controller('passwordResetController', function ($scope, $window, $compile, $timeout, $uibModal, $log, rest, $rootScope, $location, $cookieStore, $route, $routeParams) {
    $scope.updatePassword = function (reset, formId) {
        if ($("#" + formId).valid()) {
            $scope.resetData = {
                "resetToken": $routeParams.id,
                "newPassword": $scope.reset.newPass
            }
            rest.path = 'resetpassword1';
            rest.post($scope.resetData).success(function (data) {
                notification('Password reseted successfully.', 'success');
                $location.path('/');
            }).error(function (data) {
                if (data.status == 404) {
                    notification(data.msg, 'warning');
                    $location.path('/resetpassword');
                } else {
                    errorCallback(data);
                }
            });
        }
    };
}).controller('languagesController', function ($scope, $log, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.CurrentDate = new Date();
    $scope.editOn = 0;

    $scope.save = function (formId) {
        if (angular.element('#' + formId).valid()) {
            if ($scope.langs.lang_id) {

                $routeParams.id = $scope.langs.lang_id;
                rest.path = 'langsupdate';
                rest.put($scope.langs).success(function (data) {
                    notification('Record updated successfully.', 'success');
                    //$route.reload();
                    $timeout(function () {
                        $window.location.reload();
                    }, 100);
                }).error(errorCallback);
            } else {
                if ($scope.langs.is_active == undefined) {
                    $scope.langs.is_active = '0';
                }
                if ($scope.langs.is_favourite == undefined) {
                    $scope.langs.is_favourite = '0';
                }
                rest.path = 'languageSave';
                rest.post($scope.langs).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    if ($window.localStorage.getItem("session_iUserId")) {
        rest.path = 'languagesGet';
        rest.get().success(function (data) {
            $scope.langsList = data;
        }).error(errorCallback);

    }

    $scope.disableField = false;
    $scope.LangEdit = function (id, eID) {
        $scope.editOn = 1;
        rest.path = 'LangsgetOne/' + id;
        rest.get().success(function (data) {
            $scope.langs = data;
            $scope.disableField = true;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteLang = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteLangs/' + id;
                rest.delete().success(function (data) {
                    if (data.status == 422) {
                        notification('You can not delete this record.', 'warning');
                    } else {
                        notification('Record deleted successfully.', 'success');
                        $route.reload();
                    }
                }).error(errorCallback);
            }
        });
    }
}).controller('specializedController', function ($scope, $log, $location, $route, rest, $uibModal, $rootScope, $window, $routeParams, $timeout) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.CurrentDate = new Date();
    $scope.editOn = 0;

    $scope.save = function (formId) {
        if (angular.element('#' + formId).valid()) {
            if ($scope.speclz.id) {

                $routeParams.id = $scope.speclz.id;
                rest.path = 'specializedUpdate';
                rest.put($scope.speclz).success(function (data) {
                    notification('Record updated successfully.', 'success');
                    //$route.reload();
                    $timeout(function () {
                        $window.location.reload();
                    }, 100);
                }).error(errorCallback);
            } else {
                if ($scope.speclz.is_active == undefined) {
                    $scope.speclz.is_active = '0';
                }
                
                rest.path = 'specializedSave';
                rest.post($scope.speclz).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    }

    if ($window.localStorage.getItem("session_iUserId")) {
        rest.path = 'specializedGet';
        rest.get().success(function (data) {
            $scope.speclzList = data;
        }).error(errorCallback);

    }

    $scope.disableField = false;
    $scope.LangEdit = function (id, eID) {
        $scope.editOn = 1;
        rest.path = 'specializedOne/' + id;
        rest.get().success(function (data) {
            $scope.speclz = data;
            $scope.disableField = true;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.deleteLang = function (id) {
        bootbox.confirm("Are you sure you want to delete?", function (result) {
            if (result == true) {
                rest.path = 'deleteSpecialized/' + id;
                rest.delete().success(function (data) {
                    if (data.status == 422) {
                        notification('You can not delete this record.', 'warning');
                    } else {
                        notification('Record deleted successfully.', 'success');
                        $route.reload();
                    }
                }).error(errorCallback);
            }
        });
    }

}).controller('commentchatController', function ($scope, $q, $log, $location, $route, rest, $routeParams, $window, $uibModal, $cookieStore, $timeout, $uibModalInstance, items) {

    var loginid = $window.localStorage.getItem("session_iUserId");
    var userprofilepic = $window.localStorage.getItem("session_vProfilePic");

    if (items) {
        $routeParams.id = items;
    }

    $scope.login_userid = $window.localStorage.getItem("session_iUserId");

    rest.path = 'viewProjectCustomerDetail';
    rest.model().success(function (data) {
        $scope.customer = data;
        $window.localStorage.clientproCustomerName = $scope.customer.client;
        $window.localStorage.ContactPerson = $scope.customer.contact;
        $routeParams.ClientIdd = data['client'];
        $window.localStorage.ClientName = $routeParams.ClientIdd;
        if ($scope.customer.memo) {
            $scope.warn = true;
            $timeout(function () {
                $scope.warn = false;
            }, 10000);
        }
    }).error(errorCallback);

    //$routeParams.id;
    $scope.jobLinguist = [];
    var linguistObj = [];
    if ($routeParams.id) {
        rest.path = 'jobsummeryGet/' + $routeParams.id;
        rest.get().success(function (data) {
            //$scope.jobLinguist = data;
            angular.forEach(data, function (val, i) {
                // var linguistObj = {
                //     id: val.id,
                //     read_id: loginid
                // }
                if (val.resource) {
                    $scope.jobLinguist.push(val);
                }
            });
            $scope.jobLinguist = UniqueArraybyId($scope.jobLinguist, 'resource');
            
        });
    }
    var projectTeam = [];
    rest.path = 'contactPerson';
    rest.model().success(function (data) {
        
        angular.forEach(data, function (val, i) {
            if (val.vResourcePosition == 3) {
                angular.element('#coordinatorIcon').html(val.vUserName);
                var coordpic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                angular.element('.coordinatorIcon').html(coordpic);

            } else if (val.vResourcePosition == 2) {
                angular.element('#managerDesignation').html(val.vUserName);
                var managerpic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                angular.element('.managerIcon').html(managerpic);

            } else if (val.vResourcePosition == 4) {
                angular.element('#QASpecialist').html(val.vUserName);
                var QApic = (val.vProfilePic) ? '<img class="img-full" src="uploads/profilePic/' + val.vProfilePic + '"  alt="Manger-img">' : '<i class="fa fa-user"></i>';
                angular.element('.QAIcon').html(QApic);

            }
        })
    }).error(errorCallback);

    $routeParams.id = $routeParams.id;
    rest.path = 'generalVieData/' + $routeParams.id + '/' + $window.localStorage.ClientName;
    rest.get().success(function (data) {
        $scope.general = data;
        
        //$scope.general.order_date = $scope.general.order_date;
        //$scope.general.order_date = moment($scope.general.order_date).format($window.localStorage.getItem('global_dateFormat'));
        //$scope.general.due_date = $scope.general.due_date.split(' ')[0].split('.').reverse().join('-');
        if ($scope.general.due_date)
            $scope.general.due_date = moment($scope.general.due_date).format("DD-MM-YYYY | HH:mm");
        if ($scope.general.heads_up) {
            if ($scope.general.expected_start_date && $scope.general.expected_start_date != '0000-00-00 00:00:00' && $scope.general.expected_start_date != "Invalid Date") {
                $scope.general.expected_start_date = $scope.general.expected_start_date.split(' ')[0].split('.').reverse().join('-');
                $scope.general.expected_start_date = moment($scope.general.expected_start_date).format("DD-MM-YYYY");
            } else {
                $scope.general.expected_start_date = '-';
            }
        } else {
            if ($scope.general.order_date) {
                $scope.general.expected_start_date = $scope.general.order_date.split(' ')[0].split('.').reverse().join('-');
                $scope.general.expected_start_date = moment($scope.general.order_date).format("DD-MM-YYYY");
            } else {
                $scope.general.expected_start_date = '-';
            }
        }

        // if ($scope.general.order_date == undefined) {
        //     var currentdate = new Date();
        //     $scope.general.order_date = getDatetime(currentdate);
        // }
        $scope.generaldata = {};
        //$scope.generaldata.order_no = $window.localStorage.orderNo;
        //$scope.generaldata.abbrivation = $window.localStorage.abbrivation;

        if ($scope.general == null) {
            $scope.general = {};
            $scope.generaldata = {};
            //$scope.generaldata.order_no = $window.localStorage.orderNo;
            //$scope.generaldata.abbrivation = $window.localStorage.abbrivation;
            // if ($scope.general.order_no == "") {

            // }
        }
        
    }).error(errorCallback);

    $scope.projectPriceChat = 0;
    if ($routeParams.id) {
        rest.path = 'itemsGet/' + $routeParams.id;
        rest.get().success(function (data) {
            angular.forEach(data, function (val, i) {
                
                if (val.total_price) {
                    $scope.projectPriceChat += val.total_price;
                }
            });
            

        });

        //-- project Team Users --//
        $scope.teamArray = [];
        rest.path = "users";
        rest.get().success(function (data) {
            
            angular.forEach(data.data, function (val, i) {
                //if(val.iUserId != loginid && val.freelancer == 'freelancer' ){
                if (val.iUserId != loginid) {
                    $scope.teamArray.push(val.iUserId);
                }
            });
        }).error(errorCallback);

    }

    if ($scope.isNewProject === 'true' && $scope.userRight == 1) {
        $location.path('/dashboard1');
        notification('Please create project.', 'warning');
    }
    $window.localStorage.getItem("session_iUserId");
    $window.localStorage.getItem("session_vUserName");
    $window.localStorage.getItem("session_iFkUserTypeId");
    $scope.backtoPage = function () {
        if ($window.localStorage.getItem("session_iFkUserTypeId") == 1) {
            $location.path('jobs-detail/' + $window.localStorage.orderID);
        } else {
            $location.path('dashboard1');
        }
    }

    if ($routeParams.id) {

        var commentsArray = [];
        var NewcommentsArray = [];
        $scope.commentReadArray = [];
        var promises = [];
        var usercommentsArr = [];
        var newUserCommentsArr = [];
        $scope.msgIDArr = [];
        $scope.commentsArrayAll = async function () {
            var deferred = $q.defer();
            rest.path = "discussionOrder/" + $routeParams.id;
            rest.get().success(function (data) {
                setTimeout(function () {
                    //var setintrvlMenu = setInterval(function() {
                    angular.forEach(data, function (val, i) {
                        var dataId = val.id;

                        /*if (val.content == "") {
                            var dataId = val.id;
                            var hrefClass = 'attachment';
                            var hrefTarget = '_blank';
                            var data = '<a class=' + hrefClass + ' href=' + val.fileURL + ' target=' + hrefTarget + '><img src=' + val.fileURL + '></img></a>';
                            if(val.user_id == 1){
                                //$('li[data-id=' + dataId + ']').addClass('cmtright');
                                //$(time).addClass('cmtright');
                            }
                            $('li[data-id=' + dataId + ']').find('.content').html(data);
                            $('li[data-id=' + dataId + ']').clone(true).appendTo('#attachment-list');
                        }*/
                        //
                        var msgReadArr = val.read_id.split(",");
                        var msgReadArrFilter = msgReadArr.filter(function (el) {
                            if ($scope.teamArray.indexOf(parseInt(el)) != -1) {
                                return el;
                            }
                            return 0;
                        });

                        $('#comment-list').find(' > li[data-id^=c]').css('display', 'none');
                        $('#comment-list').find(' > li[data-id^=c]').hide();
                        //$('li[data-id=c' + val.id + ']').addClass('pull-right cmtright');
                        //$('.upload').html('<i class="fa fa-paperclip"></i><input id="discussionFileUpload" type="file" data-role="none" multiple="multiple">');

                        if (userprofilepic) {
                            $('.commenting-field .profile-picture').replaceWith('<img src=" uploads/profilePic/' + userprofilepic + '" class="img-circle round userpic" alt="...">');
                        }
                        var filedata = '';
                        if (val.fileURL != "") {
                            var filetype = val.fileMimeType;
                            var filetype1 = filetype.includes("image/");
                            var file_format = '';
                            var file_type = '';
                            var mimeTypeParts = val.fileMimeType.split('/');
                            if (mimeTypeParts.length == 2) {
                                file_format = mimeTypeParts[1];
                                file_type = mimeTypeParts[0];
                            }
                            // Icon
                            var availableIcons = ['archive', 'audio', 'code', 'excel', 'image', 'movie', 'pdf', 'photo',
                                'picture', 'powerpoint', 'sound', 'video', 'word', 'zip'
                            ];

                            var iconClass = 'fa fa-file-o';
                            // File Extension name
                            var extName = '';
                            var extParts = val.fileURL.split('/');
                            var extFileName = extParts[extParts.length - 1];
                            var extFileName = extFileName.split('?')[0];
                            extName = extFileName.split('.')[1];

                            if (availableIcons.indexOf(file_format) > 0) {
                                iconClass = 'fa fa-file-' + file_format + '-o';
                            } else if (availableIcons.indexOf(file_type) > 0) {
                                iconClass = 'fa fa-file-' + file_type + '-o';
                            } else if (extName == 'docx') {
                                iconClass = 'fa fa-file-word-o';
                            } else if (extName == 'xlsx' || extName == 'xlsm') {
                                iconClass = 'fa fa-file-excel-o';
                            } else if (extName == 'zip') {
                                iconClass = 'fa fa-file-archive-o';
                            }

                            //$window.localStorage.setItem("chatimg_"+val.fileURL, val.fileURL);
                            //var cmtimgName = $window.localStorage.getItem("chatimg_"+val.fileURL);
                            var cmtimgName = val.fileURL + '?v=' + jQuery.now();

                            if (file_type == 'image') {
                                var filehtml = '<img src=' + cmtimgName + '></img>';
                            } else if (file_type == 'video') {
                                var filehtml = '<video src=' + cmtimgName + ' controls="controls"></video>';
                            } else {
                                var filename = val.fileURL;
                                var filehtml = '<i class="' + iconClass + '"></i> ' + filename.replace('uploads/discussionfile/', '');
                            }
                            var hrefClass = 'attachment';
                            var hrefTarget = '_blank';
                            filedata = '<a class=' + hrefClass + ' href=' + val.fileURL + ' target=' + hrefTarget + '>' + filehtml + '</a>';

                        }
                        if (val.user_id == loginid) {
                            //$('li[data-id=' + val.id + ']').addClass('pull-right cmtright');
                            $('li[data-id=' + val.id + ']').find('.usrnamespan').addClass('hideusername');

                            if (val.content == '' || val.content == null) {
                                //$('li[data-id=' + dataId + ']').find('.content').html(filedata);
                                //$('li[data-id=' + dataId + ']').clone(true).appendTo('#attachment-list');
                            } else {
                                //var htmldata = '<a href class="pull-right thumb-sm avatar"><img src=" '+ val.profile_picture_url +'" class="img-circle" alt="..."></a> <div class="m-r-xxl"> <div class="pos-rlt wrapper bg-info r r-2x"> <span class="arrow right pull-up arrow-info"></span> <p class="m-b-none"> '+ val.content +' </p> </div> <small class="text-muted">1 minutes ago</small> </div>';
                                //$('li[data-id=' + val.id + ']').find('.content').html(htmldata);
                            }
                            if (msgReadArrFilter.length > 0) {
                                $('li[data-id=' + dataId + ']').find(' .comment-wrapper').after('<div style="color: #27c24c;position: absolute;right: 40px;font-size: 12px;"><i class="fa fa-check" aria-hidden="true"></i></div>');
                            }
                        } else {
                            //$('li[data-id=' + val.id + ']').addClass('pull-left cmtleft');
                            //$('li[data-id=' + val.id + ']').find('.profile-picture').addClass('pull-left thumb-sm avatar');
                            if (val.content == "" || val.content == null) {
                                //$('li[data-id=' + dataId + ']').find('.content').html(filedata);
                                //$('li[data-id=' + dataId + ']').clone(true).appendTo('#attachment-list');
                            }
                        }
                        // if (file_type == 'image' || file_type == 'video') {
                        //     $('li[data-id=' + dataId + ']').find('.wrapper').addClass('imgblock');
                        // }
                        
                        if (val.content) {
                            $('li[data-id=' + dataId + ']').find('.content').html(val.content);
                        }
                        //$compile(val.content)($scope);
                        // ------------ Script for date seperating in chat box --------------//
                        var ndt = new Date(data[i].created);
                        var mm = ("0" + (ndt.getMonth() + 1)).slice(-2);
                        var dd = ("0" + ndt.getDate()).slice(-2);
                        var yy = ndt.getFullYear();
                        //var timeText = dd + '-' + mm + '-' + yy;
                        //var dateSeprt = dd + '-' + mm + '-' + yy;
                        var dateSeprt = commentDateToformat(data[i].created);

                        // const todayDate = new Date();
                        // if (ndt.getDate() == todayDate.getDate() &&
                        //     ndt.getMonth() == todayDate.getMonth() &&
                        //     ndt.getFullYear() == todayDate.getFullYear()) {
                        //     $('li[data-id=' + dataId + ']').prepend('<div id="dtseperator"></div>');
                        //     var timeText = 'Today';
                        // }
                        var timeText = commentDatetimeToText(data[i].created);
                        if (timeText == "Today") {
                            $('li[data-id=' + dataId + ']').prepend('<div id="dtseperator"></div>');
                        }
                        // ------count total attachment------//
                        let totalAttachment = 0;
                        totalAttachment = $('#attachment-list').find('li .attachment').length;
                        //$('.att_count').text(totalAttachment);

                        if (i > 0) {
                            var ndt1 = new Date(data[i - 1].created);
                            // var mm = ("0" + (ndt.getMonth() + 1)).slice(-2);
                            // var dd = ("0" + ndt.getDate()).slice(-2);
                            // var yy = ndt.getFullYear();
                            //var dateSeprt2 = dd + '-' + mm + '-' + yy;
                            var dateSeprt2 = commentDateToformat(data[i - 1].created);

                            if (dateSeprt != dateSeprt2) {
                                if ($('li[new-id=' + dataId + ']').length === 0)
                                    $('#comment-list').find(' > li[data-id=' + dataId + ']').before('<li class="seperatordate comment" new-id=' + dataId + '> <span>' + timeText + '</span> </li>');
                            }
                        } else {
                            if ($('li[new-id=' + dataId + ']').length === 0)
                                $('#comment-list').find(' > li[data-id=' + dataId + ']').before('<li class="seperatordate comment" new-id=' + dataId + '> <span>' + timeText + ' </span></li>');
                        }

                        var msgRead_id = val.read_id;

                        if (msgRead_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)"))) {
                            //
                        } else {
                            var cmtObj = {
                                id: val.id,
                                read_id: loginid
                            }
                            $scope.commentReadArray.push(cmtObj);
                        }
                        // Read/ Unread - check comment id exist in db
                        promises.push(val);

                        if (val.user_id != loginid) {
                            usercommentsArr.push(val.user_Id)
                        }
                        if (val.id) {
                            $scope.msgIDArr.push(val.id)
                        }


                    });

                    deferred.resolve(promises);
                    $(".comment-wrapper").each(function (i, v) {
                        /*var dateTime = $(this).find('time')[0].innerText;
                        
                        //dateTime = moment(dateTime).format($window.localStorage.getItem('global_dateFormat'));
                        dateTime = moment(dateTime).format('DD-MM-YYYY');
                        $(this).find('time')[0].innerText = dateTime;*/

                        //$(this).find('time')[0].append("testing");
                    });

                    if (data.length == promises.length) {
                        //jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                    }

                }, 1500);
                commentsArray = data;
                
                //var usercommentsArr = commentsArray.filter(function(commentsArray) { return commentsArray.user_id != loginid });
                
            }).error(errorCallback);

            //return deferred.promise;

        }
        $scope.commentsArrayAll();
    }




    if ($routeParams.id) {
        $scope.usersArray = [];
        rest.path = "users";
        //$timeout(function () {
        rest.get().success(function (data) {
            angular.forEach(data.data, function (val, i) {
                var uObj = {
                    id: val.iUserId,
                    fullname: val.vUserName,
                    email: val.vEmailAddress,
                    profile_picture_url: "uploads/profilePic/user-icon.png"
                }
                $scope.usersArray.push(uObj);
            });

        }).error(errorCallback);

        //}, 100);
        // emoji text
        $scope.emojitext = [];
        /*rest.path = "emojitext";
        $timeout(function() {
            rest.get().success(function(data) {
                
                    angular.forEach(data, function(val, i) {
                        var eObj = {
                            id              : val.id,
                            emojiname        : val.emojiname,
                            emojipic          : val.emojipic,
                        }
                        $scope.emojitext.push(eObj);
                    });
                
            }).error(errorCallback);
        }, 200);*/
    }

    //emoji text change
    //$timeout(function() {
    //$scope.emojimap=[];
    // we are using this for emoji
    var emojimap = {
        "<3": "\u2764\uFE0F",
        "</3": "\uD83D\uDC94",
        ":D": "\uD83D\uDE00",
        //":)": "\uD83D\uDE03",
        ":)": "🙂",
        ";)": "\uD83D\uDE09",
        ":(": "\uD83D\uDE12",
        ":p": "\uD83D\uDE1B",
        ";p": "\uD83D\uDE1C",
        ":'(": "\uD83D\uDE22",
        ":o)": "\uD83D\uDE2E",
        ":*": "\uD83D\uDC8B",
        ":>": "\uD83D\uDE06",
        ":blush": "\uD83D\uDE0A",
        ">:(": "\uD83D\uDE20",
        ":-)": "\uD83D\uDE42",
        ":'(": "\uD83D\uDE22",
        "):": "\uD83D\uDE1E",
        ":-\\\\": "\uD83D\uDE15",
        "<\\/3": "\uD83D\uDC94",
        "8)": "\uD83D\uDE0E",
        ":|": "\uD83D\uDE10",
        ":o": "\uD83D\uDE2E"
    };

    $timeout(function () {
        if ($routeParams.id) {
            //$timeout(function() {
            rest.path = "discussionCommentread";
            rest.put($scope.commentReadArray).success(function (res) {
                
                if (res.status == 1) {
                    jQuery('.cmtclr' + $routeParams.id).css({ "color": "green" });
                }
            });
            //},2300);
        }

        //  Scroll to bottom  
        // jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
        // jQuery('#attachment-list').scrollTop(jQuery('#attachment-list')[0].scrollHeight);

        //$('.textarea-wrapper').before('<input type="text" id="addemoji" data-emoji-placeholder=":smiley:" />');

        jQuery("#addemoji").emojioneArea({
            autoHideFilters: true,
            useSprite: true,
            //accepts values: 'image',
            //default: 'unicode',
            //accepts values: 'unicode' | 'shortname' | 'image'
            //pickerPosition: "bottom"
        });

    }, 2800);



    $timeout(function () {
        var el = $("#addemoji").emojioneArea();
        el[0].emojioneArea.on("emojibtn.click", function () {
            const emoji1 = $('.emojibtn').find('.emojioneemoji').attr('src');
            //const emoji = $('.emojionearea-editor').find('img[src="' + emoji1 + '"]').attr('alt');
            const emoji = '<img class="emojiImg" src="' + emoji1 + '">';
            $('.textarea').append(emoji).trigger("change");

            //$('.textarea').val($('.textarea').val()+emoji);
        });

        jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
        jQuery('#attachment-list').scrollTop(jQuery('#attachment-list')[0].scrollHeight);

    }, 3000);
    $timeout(function () {

        var CommentedElement = $('#comments-container').comments({ //profilePictureURL: 'https://viima-app.s3.amazonaws.com/media/user_profiles/user-icon.png',
            roundProfilePictures: true,
            textareaRows: 1,
            enableAttachments: true,
            enablePinging: true,
            currentUserId: loginid,
            enableHashtags: true,
            textareaPlaceholderText: 'Type message here...',
            getComments: function (success, error) {
                $timeout(function () {
                    if ($routeParams.id) {
                        $scope.stopTime = setInterval(() => {
                            rest.path = "discussionOrder/" + $routeParams.id;
                            rest.get().success(function (data) {
                                var NewcommentsArray = data;
                                var newUserCommentsArr = NewcommentsArray.filter(function (NewcommentsArray) { return NewcommentsArray.user_id != loginid });
                                
                                // FOR read unread comments
                                var cmtArr = [];
                                var cmtArr = NewcommentsArray.filter(function (NewcommentsArray) { var isReadtrue = NewcommentsArray.read_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)")); return (!isReadtrue) });

                                var newcmtArr = commentsArray.filter(function (commentsArray) { var isReadtrue = commentsArray.read_id.match(new RegExp("(?:^|,)" + loginid + "(?:,|$)")); return (!isReadtrue) });

                                // --- update read id //
                                $scope.newCommentReadArray = [];
                                if (cmtArr) {
                                    angular.forEach(cmtArr, function (cmtval, cmti) {
                                        var newCmtObj = {
                                            id: cmtval.id,
                                            read_id: loginid
                                        }
                                        $scope.newCommentReadArray.push(newCmtObj);
                                        if ($scope.newCommentReadArray.length == cmtArr.length) {
                                               
                                            rest.path = "discussionCommentread";
                                            rest.put($scope.newCommentReadArray).success(function (res) {
                                                if (res.status == 1) {
                                                    //jQuery('.cmtclr' + $routeParams.id).css({ "color": "green" });
                                                }
                                            });
                                        }
                                    });
                                }
                                //if( (NewcommentsArray.length > commentsArray.length && ) )

                                var arrayNotload = $('#comment-list').find(' > li').length;
                                if (newUserCommentsArr.length > usercommentsArr.length || cmtArr.length > 0 || (!arrayNotload)) {
                                    $('#comment-list').find(' > li[data-id^=c]').hide();
                                    rest.path = "discussionCommentread";
                                    rest.put($scope.commentReadArray).success(function (res) {
                                        
                                        if (res.status == 1) {
                                            jQuery('.cmtclr' + $routeParams.id).css({ "color": "green" });
                                        }
                                    });
                                    
                                    $scope.commentsArrayAll();
                                    success(NewcommentsArray);

                                    $('ul.navigation').find('li[data-sort-key="oldest"]').trigger('click');
                                    if ($('#comment-list').find(' > li').length)
                                        jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                                    $('#comment-list').find(' > li[data-id^=c]').hide();
                                    usercommentsArr = [];
                                    // to remove same li date div
                                    // var seen = {};
                                    // $('.seperatordate').each(function() {
                                    //     var txt = $(this).text();
                                    //     if (seen[txt])
                                    //         $(this).remove();
                                    //     else
                                    //         seen[txt] = true;
                                    // });
                                    // end script
                                }
                            });
                            
                        }, 5000);
                    }

                    success(commentsArray);
                    $('ul.navigation').find('li[data-sort-key="oldest"]').trigger('click');
                    //jQuery('#comment-list').scrollTop(jQuery('#comment-list')[0].scrollHeight);
                    //jQuery('#attachment-list').scrollTop(jQuery('#attachment-list')[0].scrollHeight);
                    $('.userprof').on('dragstart', function (event) { event.preventDefault(); });
                    $('#comment-list').on('dragstart', function (event) { event.preventDefault(); });

                }, 500);
            },
            searchUsers: function (term, success, error) {
                setTimeout(function () {
                    success($scope.usersArray.filter(function (user) {

                        var containsSearchTerm = user.fullname.toLowerCase().indexOf(term.toLowerCase()) != -1;
                        var isNotSelf = user.id != loginid;
                        return containsSearchTerm && isNotSelf;
                    }));
                }, 1000);
            },

            searchEmojitext: function (term, success, error) {
                setTimeout(function () {
                    success($scope.emojitext.filter(function (emojitxt) {
                        var containsSearchTerm = emojitxt.emojiname.toLowerCase().indexOf(term.toLowerCase()) != -1;
                        return containsSearchTerm;
                    }));
                }, 500);
            },
            postComment: function (data, success, error) {
                // data.order_id = $routeParams.id;
                // data.user_id = $window.localStorage.getItem("session_iUserId");
                // data.fullname = $window.localStorage.getItem("session_vUserName");
                // data.profile_picture_url = 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic");
                // data.pings = '';
                // data.read_id = $window.localStorage.getItem("session_iUserId") + ',';
                // rest.path = "discussionOrder";
                // rest.post(data).success(function (info) {

                // }).error(errorCallback);
                // $timeout(function () {
                //     success(data);
                // }, 500);
                data.job_id = 0;
                data.order_id = $routeParams.id;
                data.user_id = $window.localStorage.getItem("session_iUserId");
                data.fullname = $window.localStorage.getItem("session_vUserName");
                data.profile_picture_url = 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic");
                data.read_id = $window.localStorage.getItem("session_iUserId") + ',';

                function escapeSpecialChars(regex) {
                    return regex.replace(/([()[{*+.$^\\|?])/g, '\\$1');
                }
                for (var i in emojimap) {
                    var regex = new RegExp(escapeSpecialChars(i), 'gim');
                    data.content = data.content.replace(regex, emojimap[i]);
                }

                var pingsvalue = [];
                if (data.content) {
                    $(Object.keys(data.pings)).each(function (index, userId) {
                        var fullname = data.pings[userId];
                        var pingText = '@' + fullname;
                        data.content = data.content.replace(new RegExp('@' + userId, 'g'), pingText);

                        pingsvalue[index] = Object.keys(data.pings)[index];
                    });
                }
                
                data.pings = pingsvalue.toString();
                rest.path = "discussionOrder";
                rest.post(data).success(function (info) {

                }).error(errorCallback);
                $timeout(function () {
                    success(data);
                }, 500);
            },
            putComment: function (data, success, error) {
                $routeParams.id = data.id;
                data.login_userid = $window.localStorage.getItem("session_iUserId");
                rest.path = 'discussionOrder';
                rest.put(data).success(function (res) {
                    if (res.Status == 401) {
                        notification("You can not edit other user message", "error");
                        $timeout(function () {
                            location.reload();
                        }, 1000);
                    } else if (res.Status == 200) {
                        notification("Successfully edited", "success");
                    } else {
                        notification("Please try later", "warning");
                    }
                }).error(errorCallback);
                $timeout(function () {
                    success(data);
                }, 500);
            },
            deleteComment: function (data, success, error) {
                data.login_userid = $window.localStorage.getItem("session_iUserId");
                rest.path = 'discussionOrder/' + data.id + '/' + data.login_userid;
                rest.delete(data).success(function (data) {
                    if (data.Status == 401) {
                        notification("You can not edit other user message", "error");
                        $timeout(function () {
                            location.reload();
                        }, 1000);
                    } else if (data.Status == 200) {
                        notification("Successfully edited", "success");
                    } else {
                        notification("Please try later", "warning");
                    }
                }).error(errorCallback);
                $timeout(function () {
                    success();
                }, 500);
            },
            upvoteComment: function (data, success, error) {
                $routeParams.id = data.id;
                rest.path = 'discussionOrder';
                rest.put(data).success(function (data) {

                }).error(errorCallback);
                $timeout(function () {
                    success(data);
                }, 500);
            },
            uploadAttachments: function (dataArray, success, error, data) {
                /*"fileURL":dataArray[0].file_url,*/
                $(dataArray).each(function (index, dataArrays) {
                    var obj = {
                        "order_id": $routeParams.id,
                        "user_id": $window.localStorage.getItem("session_iUserId"),
                        "fullname": $window.localStorage.getItem("session_vUserName"),
                        "profile_picture_url": 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic"),
                        "fileURL": "uploads/discussionfile/" + dataArray[index].file.name2,
                        "fileMimeType": dataArray[index].file.type,
                        "created": dataArray[index].created,
                        "modified": dataArray[index].modified,
                        "created_by_current_user": '1',
                        "upvote_count": '0',
                        "job_id": 0,
                        "user_has_upvoted": '0',
                        "read_id": $window.localStorage.getItem("session_iUserId") + ',',

                    }
                    rest.path = "discussionOrder";
                    rest.post(obj).success(function (info) {

                    }).error(errorCallback);
                    dataArray[0].fullname = $window.localStorage.getItem("session_vUserName");
                    dataArray[0].profile_picture_url = 'uploads/profilePic/' + $window.localStorage.getItem("session_vProfilePic");
                });
                $timeout(function () {
                    success(dataArray);
                }, 500);
            }
        });
    }, 1000);

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
        clearInterval($scope.stopTime);
    };

}).controller('workInstructionsController', function ($scope, $log, $location, $route, rest, $routeParams, $window) {
    //debugger;
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");
    rest.path = 'workinstructs';
    rest.get().success(function (data) {
        $scope.workInstructs = data;
        $scope.workInstructsEmpty = jQuery.isEmptyObject(data);
    }).error(errorCallback);

    $scope.getType = function (id, eID) {
        $routeParams.id = id;
        rest.path = 'workinstructs';
        rest.model().success(function (data) {
            $scope.w_instruct = data;
        }).error(errorCallback);
        scrollToId(eID);
    }

    $scope.save = function (formId) {
        if (angular.element("#" + formId).valid()) {
            if ($scope.w_instruct.id) {
                $routeParams.id = $scope.w_instruct.id;
                rest.path = 'workinstructs';
                rest.put($scope.w_instruct).success(function () {
                    notification('Record updated successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            } else {
                rest.path = 'workinstructs';
                rest.post($scope.w_instruct).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        }
    };

    $scope.deleteModel = function (id) {
        bootbox.confirm("Are you sure you want to delete this row?", function (result) {
            if (result == true) {
                rest.path = 'workinstructs/' + id;
                rest.delete().success(function () {
                    notification('Record deleted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }
        });
    };
}).controller('csvLingstProfileController', function ($scope, $q, $log, $location, $route, rest, $routeParams, $window, DTOptionsBuilder) {
    //debugger;
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    const filterByReference = (arr1, arr2) => {
        let resIds = [];
        let res = [];
        res = arr1.filter(el => {
            return arr2.find(element => {
                let element2 = element.trim();
                if (element2 === el.name) {
                    return resIds.push(el.id);
                }
            });
        });
        return resIds;
    }
    // To find software hardware and cat Tools Properties ids
    //$cookieStore.get('session_iUserId');
    const filterByReferenceProp = (arr1, arr2) => {
        let resIds = [];
        let res = [];
        res = arr1.filter(el => {

            return arr2.find(element => {
                
                let element2 = element.trim();
                if (element2 === el.value_name) {
                    return resIds.push(el.value_id);
                }
            });
        });
        return resIds;
    }

    $scope.propList = [];
    rest.path = "getAllPropertiesValue";
    rest.get().success(function (data) {
        $scope.propList = data;
    });

    $scope.specializeList = [];
    rest.path = "getAllSpecialization";
    rest.get().success(function (data) {
        $scope.specializeList = data;
    });

    // To get phone code country code To add data in mobile
    $scope.cpuntryMobilecodeList = [];
    fetch('country-phonecode.json')
        .then(response => response.json())
        .then(data => {
            $scope.cpuntryMobilecodeList = data;
        }
        );

    $scope.csvDataInsrt = [];
    var percent = 0;
    $scope.csvFieds = []
    $scope.getFile = function (files) {
        
        if (!files)
            $scope.csvProgress = false;
        $scope.csvFilename = files.name;
        $scope.csvmatchMsg = false;
        Papa.parse(files, {
            //header: false,
            //preview: 5,
            //worker:true,
            download: true,
            delimiter: "",
            //skipEmptyLines: true,
            encoding: "utf-8",
            complete: function (results, files, err) {
                
                var csv = results.data;
                var numindex = 0;
                $scope.csvData = [];
                var gtotal = 0;
                var Isnumpattern = /^[0-9,\.\? ]+$/;
                var isError = false;
                $scope.csvFieds = csv[0];
                $scope.csvData = csv;
                angular.forEach(csv, function (val, i) {
                    var dtCreationDate = '0000-00-00';
                    var dtLast_job = '0000-00-00';
                    /// avoid first row contain Fields name        
                    if (i > 0) {
                        var deferred = $q.defer();
                        if (val[3] == "�")
                            val[3] = '';
                        if (val[9] == "�")
                            val[9] = '';
                        if (val[11] == "�")
                            val[11] = '';
                        if (val[15]) {
                            var dt = (val[15]).split('.')
                            if (dt.length == 3) {
                                var dtCreationDate = dt[2] + '-' + dt[1] + '-' + dt[0]
                            }
                        }
                        if (val[16]) {
                            var last_dt = (val[16]).split('.')
                            if (dt.length == 3) {
                                var dtLast_job = last_dt[2] + '-' + last_dt[1] + '-' + last_dt[0]
                            }
                        }
                        var email1 = '';
                        var email2 = '';
                        if (val[10]) {
                            var all_eml = (val[10]).split(';')
                            if (all_eml.length > 1) {
                                var email1 = all_eml[0];
                                var email2 = all_eml[1];
                            } else {
                                var email1 = all_eml[0] ? all_eml[0] : '';
                            }
                        }
                        var address1 = [];

                        var address1 = [
                            { "id": "address1_street_number", "value": val[7] ? val[7] : '' },
                            { "id": "address1_locality", "value": val[5] ? val[5] : '' },
                            { "id": "address1_administrative_area_level_1", "value": val[2] ? val[2] : '' },
                            { "id": "address1_country", "value": val[4] ? val[4] : '' },
                            { "id": "address1_postal_code", "value": val[6] ? val[6] : '' }
                        ]
                        var cTitlePhone = '';
                        var cFlagCode = '';
                        var countryCode = '';
                        if (val[4]) {
                            var countryPhoneArr = $scope.cpuntryMobilecodeList.filter(function (el) {
                                return el.name == val[4];
                            });
                            if (countryPhoneArr.length > 0) {
                                cFlagCode = 'iti-flag ' + countryPhoneArr[0].code
                                cTitlePhone = countryPhoneArr[0].name + ' : ' + '+' + countryPhoneArr[0].phone
                                countryCode = countryPhoneArr[0].code
                            }
                        }
                        var countryObj = {
                            "countryTitle": cTitlePhone,
                            "countryFlagClass": cFlagCode,
                            "mobileNumber": val[9] ? val[9] : ''
                        }
                        //console.table(countryObj);
                        var paymentObj = {
                            "tax_id": val[13],
                            "country_code": countryCode,
                            "tax_type": val[21]
                        }
                        //filterByReference - find specialization value exist in main array.
                        var specializationArr = '';
                        if (val[30]) {
                            var spclArr2 = (val[30]).split(',');
                            deferred.resolve(filterByReference($scope.specializeList, spclArr2));
                            var specializationArr = filterByReference($scope.specializeList, spclArr2);
                            //if(specializationArr.length>0)
                            specializationArr = specializationArr.length > 0 ? specializationArr.toString() : '';
                        }
                        var hardwareVal = '';
                        if (val[26]) {
                            var hardArr2 = (val[26]).split(',');
                            deferred.resolve(filterByReferenceProp($scope.propList, hardArr2));
                            var hardwareVal = filterByReferenceProp($scope.propList, hardArr2);
                            hardwareVal = hardwareVal.length > 0 ? hardwareVal.toString() : '';
                        }
                        var softwareVal = '';
                        if (val[29]) {
                            var softArr2 = (val[29]).split(',');
                            deferred.resolve(filterByReferenceProp($scope.propList, softArr2));
                            var softwareVal = filterByReferenceProp($scope.propList, softArr2);
                            softwareVal = softwareVal.length > 0 ? softwareVal.toString() : '';
                        }
                        var catToolsVal = '';
                        if (val[22]) {
                            var catToolsArr2 = (val[22]).split(',');
                            deferred.resolve(filterByReferenceProp($scope.propList, catToolsArr2));
                            var catToolsVal = filterByReferenceProp($scope.propList, catToolsArr2);
                            catToolsVal = catToolsVal.length > 0 ? catToolsVal.toString() : '';
                        }
                        var firstName = val[8];
                        var lastName = '';
                        if (val[8]) {
                            var uName = val[8].split(' ');
                            if (uName.length == 2) {
                                firstName = uName[0];
                                lastName = uName[1];
                            }
                        }
                        var obj = {
                            'vUserName': val[8],
                            'vFirstName': firstName,
                            'vLastName': lastName,
                            'vEmailAddress': email1,
                            'vSecondaryEmailAddress': email2,
                            'iMobile': JSON.stringify(countryObj),
                            'vPhoneNumber': val[9],
                            'vWebsite': val[3],
                            'address1Detail': JSON.stringify(address1),
                            'tmemo': val[11],
                            'activation_status': val[12] === 'Active' ? 1 : 0,
                            'vTimeZoneCity': val[5],
                            'vAddress1': val[7],
                            'vAddress2': val[1],
                            'iGender': 1,
                            'freelancer': 'translation',
                            'specialization': specializationArr,
                            'vSalesId': val[13],
                            'created_by_name': val[18],
                            'dtCreationDate': dtCreationDate,
                            'dtLast_job': dtLast_job,
                            'propSoftware': softwareVal,
                            'propHardware': hardwareVal,
                            'propCatTools': catToolsVal,
                            'vpaymentInfo': JSON.stringify(paymentObj),
                        };
                        $scope.csvDataInsrt.push(obj);

                        numindex++;
                        //}  

                        percent += Math.round(100 / (results.data.length));
                        $(".progress-bar").width(percent + '%')
                        if (percent >= 97)
                            $(".progress-bar").width('100%')

                        if (i == results.data.length - 1) {
                            setTimeout(() => {
                                $scope.csvProgress = false;
                            }, 1000);
                            setTimeout(() => {
                                $scope.csvProgress = true;
                                percent = 0;
                                $(".progress-bar").width('0%')
                                $('#file-input').val('');
                            }, 2000)


                        }

                    }

                });
                
                //$scope.csvData = [];      
            }
        });
    };

    $scope.saveLinguistData = function (formId) {
        //if (angular.element("#" + formId).valid()) {
        if($scope.csvFieds.length > 30){
            if($scope.csvFieds[0] == 'Plunet Number' && $scope.csvFieds[2] == 'State' && $scope.csvFieds[3] == 'Website' && $scope.csvFieds[4] == 'Country' && $scope.csvFieds[5] == 'City' && $scope.csvFieds[6] == 'ZIP Code'){
                rest.path = 'savelinguistCsvProfile';
                rest.post($scope.csvDataInsrt).success(function (data) {
                    notification('Record inserted successfully.', 'success');
                    $route.reload();
                }).error(errorCallback);
            }else{
                notification('Necessary fields are missing. or Format is not proper.', 'warning');
            }
        }else{
            notification('Csv Format is not proper', 'warning');
        }    
        //}
    };

    $scope.dtOptions = DTOptionsBuilder.newOptions().
        withOption('scrollX', 'true').
        withOption('responsive', true).
        withOption('pageLength', 50).
        withOption('scrollCollapse', true);

}).controller('findLinguistController', function ($scope, $log, $window, $compile, $timeout, $uibModal, rest, $route, $rootScope, $routeParams, $location, $uibModalInstance, items) {

    $scope.userRight = $window.sessionStorage.getItem("session_iFkUserTypeId");
    $scope.itemQuantity = 0;
    $scope.itemList = [];
    $scope.linguistPriceList = [];
    //rest.path = 'linguistpriceAll' ;
    rest.path = 'customerpriceAll/' + 2;  //2 for external userID
    rest.get().success(function (data) {
        angular.forEach(data, function (val,i) {
            let langPair = JSON.parse(val.price_language);
            const isLang = langPair.filter(pd => pd.languagePrice == items.stLanguage)
            if(isLang.length > 0){
                val.price_basis = JSON.parse(val.price_basis);
                val.price_language = JSON.parse(val.price_language);
                $scope.linguistPriceList.push(val);
            }
        })
        //$scope.linguistPriceList = data;
        
    }) 
    
    $scope.filterLinguist = function (qty) {
        var scoopPrice = '';   
        $scope.scoopQtyPrice = 0 // price per quatity
        $scope.itemQuantity = 0;
        
        if(items){
            rest.path = 'itemsGet/' + items.order_id;
            rest.get().success(function (data) {
                angular.forEach(data, function (val, i) {
                    if(val.item_number == items.item_number){
                        if(val.price)
                            var scoopPrice = JSON.parse(val.price); 
                        if(scoopPrice.length){
                            angular.forEach(scoopPrice, function (v) {
                                if(v.quantity)
                                    $scope.itemQuantity += parseInt(v.quantity) 
                            })
                        }       
                        let sl = JSON.parse(val.source_lang);        
                        let tl = JSON.parse(val.target_lang);        
                        let objData = {
                            'scoopPrice' : scoopPrice,
                            'total_price' : val.total_price,
                            'quantity' : $scope.itemQuantity,
                            'language' : sl.sourceLang + ' > ' + tl.sourceLang 
                        }
                        $scope.scoopQtyPrice = parseFloat(val.total_price) / $scope.itemQuantity;
                        
                        //$scope.itemList.push(objData); 
                        $scope.itemList = JSON.parse(val.price); 
                    }
                })
                $scope.itemQuantity = qty ? qty : $scope.itemQuantity; 
                
                $scope.subLinguist = [];
                $scope.exArr = [];
                $scope.userIdArr = [];
                angular.forEach($scope.linguistPriceList, function (val, i) {
                    var qPrice = 0;
                    $scope.qTotPrice = 0;
                    const isPrice = val.price_basis.filter(lngEl => {
                        
                        const isFound = $scope.itemList.filter(el => {
                            
                            if (el.pricelist == lngEl.basePriceUnit) {
                                
                                var qPrice = parseFloat(lngEl.basePrice) / lngEl.baseQuentity
                                $scope.qTotPrice += parseFloat(qPrice)
                                
                                const tObj = {
                                    'priceName': el.pricelist,
                                    'scoop_qty': el.quantity,
                                    'scoop_price': el.itemTotal,
                                    'resource_id': val.resource_id,
                                    'res_price': $scope.qTotPrice,
                                }
                                $scope.exArr.push(tObj) 
                                
                                return el;
                            }
                            //return false;
                        });
                        return false;
                    });
                    
                    if( $scope.scoopQtyPrice != 0 && ($scope.qTotPrice < $scope.scoopQtyPrice) ){
                        const pObj = {
                            resource_id : val.resource_id,
                            price : $scope.qTotPrice
                        }
                        $scope.subLinguist.push(pObj); 
                    }
                })
                var notExist = $scope.exArr.reduce((c, { resource_id: key }) => (c[key] = (c[key] || 0) + 1, c), {});
                angular.forEach(notExist, function (countItem, resID) {
                    angular.forEach($scope.itemList, function (val, i) {
                        if(countItem < $scope.itemList.length){
                            $scope.exArr.filter(b1 => {
                                if((b1.resource_id==resID) && (val.pricelist !== b1.priceName)){
                                    var vPrice = parseFloat(val.itemTotal) / parseInt(val.quantity)
                                    $scope.subLinguist = $scope.subLinguist.map(objE => {
                                        if (objE.resource_id == resID) {
                                          return {...objE, price: objE.price + vPrice};
                                        }
                                        return objE;
                                      });
                                    return b1;
                                }
                                return false;
                            })    
                        }    
                    })        
                })    

                const subLinguist = $scope.subLinguist;
                const lngSort = (subLinguist = []) => {
                    const sorter = (a, b) => {
                        return +a.price - +b.price;
                    };
                    subLinguist.sort(sorter);
                };
                lngSort(subLinguist);
                //UniqueArraybyId(subLinguist,'resource_id');
                
                rest.path = 'user/' + 2;
                rest.get().success(function (data) {
                    $scope.userlist = data.data;
                    if($scope.userlist){
                        $scope.cheapLinguist = $scope.userlist.filter(a => subLinguist.some(b => a.iUserId === b.resource_id));
                    }
                }).error(errorCallback);
                
            });
        }
    };        
    $scope.filterLinguist();

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    
}).controller('activitydetailController', function ($uibModal, $timeout, $scope, $window, $location, $log, $interval, rest, $rootScope, $cookieStore, $route, $routeParams) {
    $scope.userRight = $window.localStorage.getItem("session_iFkUserTypeId");

    /*Recent Activity Code start*/
    $scope.activityLimit = 17;

    $scope.loadMoreActivity = function () {
        var increamented = $scope.activityLimit + 10;
        $scope.activityLimit = increamented > $scope.activityList.length ? $scope.activityList.length : increamented;

    }

    //recent activity
    if ($cookieStore.get('session_iUserId')) {
        $scope.dateDate = [];
        rest.path = "recentActivityGet/" + $cookieStore.get('session_iUserId');
        rest.get().success(function (data) {
            $scope.activityList = data;
            var color = ['success', 'warning', 'info', 'primary'];
            var date = new Date();
            var count = 0;

            angular.forEach(data, function (val, i) {
                //set activity side line color
                if (count == color.length) {
                    count = 0;
                }

                $scope.activityList[i].color = color[count];
                count++;

                //set recent activity date
                var a = date;
                var b = new Date(val.modified_date);
                var days = daydiff(b, a); // 1 day

                switch (days) {
                    case 0:
                        var recentDate = "Today " + timeFormat(val.modified_date);
                        break;
                    case 1:
                        var recentDate = "Yesterday " + timeFormat(val.modified_date);
                        break;
                    default:
                        var recentDate = days + " days ago.";
                }

                $timeout(function () {
                    $scope.dateDate[i] = recentDate;
                    val.recentDayAgo = recentDate;
                }, 100);

            });

        });
    }
    /*Recent Activity Code End*/

    // Search
    $scope.activityListFltr = [];
    $scope.search = {}; 
    $scope.filterActivity = function (frmId) {
        if (jQuery.isEmptyObject($scope.search) && !$scope.dueDateFrom && !$scope.dueDateTo) {
            notification('Please select option to filter statement.', 'warning');
            return false;
        } else {
            if ($scope.dueDateFrom && !$scope.dueDateTo) {
                notification('You have to select both dates.', 'warning');
                return false;
            } else if (!$scope.dueDateFrom && $scope.dueDateTo) {
                notification('You have to select both dates.', 'warning');
                return false;
            }
            if ($scope.dueDateFrom) {
                $scope.search.dueDateFrom = originalDateFormatNew($scope.dueDateFrom);
                $scope.search.dueDateFrom = moment($scope.search.dueDateFrom).format('YYYY-MM-DD');
            }

            if ($scope.dueDateTo) {
                $scope.search.dueDateTo = originalDateFormatNew($scope.dueDateTo);
                $scope.search.dueDateTo = moment($scope.search.dueDateTo).format('YYYY-MM-DD');
            }

            rest.path = 'activityLogGetAll';
            rest.post($scope.search).success(function (data) {

                $scope.activityListFltr = data;
                var color = ['success', 'warning', 'info', 'primary'];
                var date = new Date();
                var count = 0;

                angular.forEach(data, function (val, i) {
                    //set activity side line color
                    if (count == color.length) {
                        count = 0;
                    }
                    $scope.activityList[i].color = color[count];
                    count++;
                    //set recent activity date
                    var a = date;
                    var b = new Date(val.modified_date);
                    var days = daydiff(b, a); // 1 day
                    switch (days) {
                        case 0:
                            var recentDate = "Today " + timeFormat(val.modified_date);
                            break;
                        case 1:
                            var recentDate = "Yesterday " + timeFormat(val.modified_date);
                            break;
                        default:
                            var recentDate = days + " days ago.";
                    }
                    $timeout(function () {
                        $scope.dateDate[i] = recentDate;
                        val.recentDayAgo = recentDate;
                    }, 100);
                });
            })
        }
    }        
    $scope.filterActivity2 = function(formid){
        
        if($scope.search.length){
            $scope.activityListFltr = $scope.activityList.filter( (obj)=> {
                return obj.log_status == $scope.search.logStatus;
            });
        }
        
        var todayDate = new Date();
        var dateStart = ''
        var dateEnd = ''
        if ($scope.search.dueDateFrom) {
            var dueDateFrom = originalDateFormatNew($scope.search.dueDateFrom);
            dueDateFrom = moment(dueDateFrom).format('YYYY-MM-DD');
            dateStart = new Date(dueDateFrom);
            
            $scope.activityListFltr = $scope.activityList.filter( (obj)=> {
                return dateStart < new Date(obj.modified_date) ;
            }); 
            
        }
        if ($scope.search.dueDateTo) {
            var dueDateTo = originalDateFormatNew($scope.search.dueDateTo);
            dueDateTo = moment(dueDateTo).format('YYYY-MM-DD');
            dateEnd = new Date(dueDateTo);
            
            $scope.activityListFltr = $scope.activityList.filter( (obj)=> {
                if($scope.search.dueDateFrom)
                    return dateStart <= new Date(obj.modified_date) && dateEnd >= new Date(obj.modified_date);
                else($scope.search.dueDateFrom)
                    return dateEnd > new Date(obj.modified_date);
            });
            
        }    
            
    }

    $scope.refresh = function(){
        $route.reload();
    }

});